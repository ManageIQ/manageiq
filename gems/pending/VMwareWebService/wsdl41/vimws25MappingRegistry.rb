
#
# Generated by:
#    wsdl2ruby.rb --wsdl vimService.wsdl --mapping_registry --module_path VimWs25 --classdef vimws25
#
# - wsdl2ruby.rb from soap4r 1.5.6
# - Generated file vimws25.rb is unneeded and should be removed.
# - Unneeded lines of this file are manually commented out.
#
############################################

# require 'vimws25.rb'
# require 'soap/mapping'

# module VimWs25

# module DefaultMappingRegistry
#   EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
#   LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new

  EncodedRegistry.register(
    :class => VimWs25::DestroyPropertyFilterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyPropertyFilterRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateFilterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateFilterRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::PropertyFilterSpec"],
      ["partialUpdates", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrievePropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrievePropertiesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specSet", "VimWs25::PropertyFilterSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckForUpdatesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WaitForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "WaitForUpdatesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CancelWaitForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelWaitForUpdatesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WaitForUpdatesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "WaitForUpdatesExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["options", "VimWs25::WaitOptions", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrievePropertiesExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specSet", "VimWs25::PropertyFilterSpec[]", [1, nil]],
      ["options", "VimWs25::RetrieveOptions"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ContinueRetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ContinueRetrievePropertiesExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CancelRetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelRetrievePropertiesExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreatePropertyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreatePropertyCollectorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyPropertyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyPropertyCollectorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DynamicArray,
    :schema_ns => "urn:vim25",
    :schema_type => "DynamicArray",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["val", "[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DynamicData,
    :schema_ns => "urn:vim25",
    :schema_type => "DynamicData",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DynamicProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "DynamicProperty",
    :schema_element => [
      ["name", "SOAP::SOAPString"],
      ["val", nil]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDynamicProperty,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DynamicProperty") }
  )

  EncodedRegistry.register(
    :class => VimWs25::KeyAnyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "KeyAnyValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfKeyAnyValue,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "KeyAnyValue") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalizableMessage,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalizableMessage",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["arg", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["message", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLocalizableMessage,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LocalizableMessage") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCommunication,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCommunication",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNotConnected,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNotConnected",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNotReachable,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNotReachable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidRequest,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidRequest",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidType,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ManagedObjectNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedObjectNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["receiver", "VimWs25::ManagedObjectReference"],
      ["method", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotEnoughLicenses,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughLicenses",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotImplemented,
    :schema_ns => "urn:vim25",
    :schema_type => "NotImplemented",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RequestCanceled,
    :schema_ns => "urn:vim25",
    :schema_type => "RequestCanceled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::C_SecurityError,
    :schema_ns => "urn:vim25",
    :schema_type => "SecurityError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SystemError,
    :schema_ns => "urn:vim25",
    :schema_type => "SystemError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnexpectedFault,
    :schema_ns => "urn:vim25",
    :schema_type => "UnexpectedFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["faultName", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalizedMethodFault,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalizedMethodFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fault", "VimWs25::MethodFault"],
      ["localizedMessage", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfMethodFault,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "MethodFault") }
  )

  EncodedRegistry.register(
    :class => VimWs25::RuntimeFault,
    :schema_ns => "urn:vim25",
    :schema_type => "RuntimeFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ManagedObjectReference,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedObjectReference"
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfString,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("http://www.w3.org/2001/XMLSchema", "string") }
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAnyType,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("http://www.w3.org/2001/XMLSchema", "anyType") }
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfManagedObjectReference,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ManagedObjectReference") }
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfByte,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("http://www.w3.org/2001/XMLSchema", "byte") }
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfInt,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("http://www.w3.org/2001/XMLSchema", "int") }
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLong,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("http://www.w3.org/2001/XMLSchema", "long") }
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfShort,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("http://www.w3.org/2001/XMLSchema", "short") }
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidCollectorVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidCollectorVersion",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidProperty",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PropertyFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyFilterSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["propSet", "VimWs25::PropertySpec[]", [1, nil]],
      ["objectSet", "VimWs25::ObjectSpec[]", [1, nil]],
      ["reportMissingObjectsInResults", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPropertyFilterSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PropertyFilterSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PropertySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["all", "SOAP::SOAPBoolean", [0, 1]],
      ["pathSet", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPropertySpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PropertySpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ObjectSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VimWs25::SelectionSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfObjectSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ObjectSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::SelectionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectionSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfSelectionSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "SelectionSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::TraversalSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "TraversalSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VimWs25::SelectionSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ObjectContent,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectContent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["propSet", "VimWs25::DynamicProperty[]", [0, nil]],
      ["missingSet", "VimWs25::MissingProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfObjectContent,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ObjectContent") }
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateSet,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateSet",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["filterSet", "VimWs25::PropertyFilterUpdate[]", [0, nil]],
      ["truncated", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PropertyFilterUpdate,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyFilterUpdate",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::ManagedObjectReference"],
      ["objectSet", "VimWs25::ObjectUpdate[]", [0, nil]],
      ["missingSet", "VimWs25::MissingObject[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPropertyFilterUpdate,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PropertyFilterUpdate") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ObjectUpdate,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectUpdate",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["kind", "SOAP::SOAPString"],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["changeSet", "VimWs25::PropertyChange[]", [0, nil]],
      ["missingSet", "VimWs25::MissingProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfObjectUpdate,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ObjectUpdate") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PropertyChange,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyChange",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["op", "SOAP::SOAPString"],
      ["val", nil, [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPropertyChange,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PropertyChange") }
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingProperty",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfMissingProperty,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "MissingProperty") }
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingObject,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingObject",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfMissingObject,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "MissingObject") }
  )

  EncodedRegistry.register(
    :class => VimWs25::WaitOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "WaitOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["maxWaitSeconds", "SOAP::SOAPInt", [0, 1]],
      ["maxObjectUpdates", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["maxObjects", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveResult,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["token", "SOAP::SOAPString", [0, 1]],
      ["objects", "VimWs25::ObjectContent[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddAuthorizationRoleRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAuthorizationRoleRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["failIfUsed", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateAuthorizationRoleRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["newName", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MergePermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MergePermissionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["srcRoleId", "SOAP::SOAPInt"],
      ["dstRoleId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveRolePermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveRolePermissionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveEntityPermissionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveAllPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveAllPermissionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetEntityPermissionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["permission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetEntityPermissionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["permission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveEntityPermissionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveEntityPermissionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["user", "SOAP::SOAPString"],
      ["isGroup", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureClusterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureClusterRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ClusterConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ApplyRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplyRecommendationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CancelRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelRecommendationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RecommendHostsForVmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RecommendHostsForVmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostConnectSpec"],
      ["asConnected", "SOAP::SOAPBoolean"],
      ["resourcePool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveIntoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveIntoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveHostIntoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveHostIntoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["resourcePool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshRecommendationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveDasAdvancedRuntimeInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveDasAdvancedRuntimeInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureComputeResourceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureComputeResourceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ComputeResourceConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddCustomFieldDefRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["moType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPolicy", "VimWs25::PrivilegePolicyDef", [0, 1]],
      ["fieldPolicy", "VimWs25::PrivilegePolicyDef", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveCustomFieldDefRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RenameCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameCustomFieldDefRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetFieldRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetFieldRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DoesCustomizationSpecExistRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DoesCustomizationSpecExistRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GetCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OverwriteCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "OverwriteCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeleteCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DuplicateCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DuplicateCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RenameCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSpecItemToXmlRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpecItemToXmlRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::XmlToCustomizationSpecItemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "XmlToCustomizationSpecItemRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specItemXml", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckCustomizationResourcesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckCustomizationResourcesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["guestOs", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryConnectionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConnectionInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hostname", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["username", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOnMultiVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnMultiVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshDatastoreStorageInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDatastoreStorageInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualMachineFilesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["mountPathDatastoreMapping", "VimWs25::DatastoreMountPathDatastorePair[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RenameDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDescriptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDescriptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::BrowseDiagnosticLogRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "BrowseDiagnosticLogRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["start", "SOAP::SOAPInt", [0, 1]],
      ["lines", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GenerateLogBundlesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GenerateLogBundlesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["includeDefault", "SOAP::SOAPBoolean"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FetchDVPortKeysRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FetchDVPortKeysRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["criteria", "VimWs25::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FetchDVPortsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FetchDVPortsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["criteria", "VimWs25::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryUsedVlanIdInDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUsedVlanIdInDvsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureDvsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVSConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerformDvsProductSpecOperationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformDvsProductSpecOperationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["operation", "SOAP::SOAPString"],
      ["productSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MergeDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MergeDvsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddDVPortgroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddDVPortgroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVPortgroupConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveDVPortRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveDVPortRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]],
      ["destinationPortgroupKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateDvsCapabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDvsCapabilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["capability", "VimWs25::DVSCapability"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureDVPortRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureDVPortRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["port", "VimWs25::DVPortConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshDVPortStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDVPortStateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portKeys", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RectifyDvsHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RectifyDvsHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hosts", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateNetworkResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateNetworkResourcePoolRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configSpec", "VimWs25::DVSNetworkResourcePoolConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableNetworkResourceManagementRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableNetworkResourceManagementRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["enable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryConfigOptionDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfigOptionDescriptorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfigOptionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryConfigTargetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfigTargetRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryTargetCapabilitiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryTargetCapabilitiesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetCustomValueRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "setCustomValueRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnregisterExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnregisterExtensionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindExtensionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RegisterExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RegisterExtensionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extension", "VimWs25::Extension"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateExtensionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extension", "VimWs25::Extension"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GetPublicKeyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetPublicKeyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetPublicKeyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetPublicKeyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["publicKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetExtensionCertificateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetExtensionCertificateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["certificatePem", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveDatastoreFileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CopyDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CopyDatastoreFileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeleteDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteDatastoreFileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MakeDirectoryRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MakeDirectoryRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["createParentDirectories", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ChangeOwnerRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ChangeOwnerRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["owner", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateFolderRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveIntoFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveIntoFolderRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["list", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::VirtualMachineConfigSpec"],
      ["pool", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RegisterVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RegisterVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["asTemplate", "SOAP::SOAPBoolean"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateClusterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateClusterRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ClusterConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateClusterExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateClusterExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ClusterConfigSpecEx"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddStandaloneHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddStandaloneHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostConnectSpec"],
      ["compResSpec", "VimWs25::ComputeResourceConfigSpec", [0, 1]],
      ["addConnected", "SOAP::SOAPBoolean"],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateDatacenterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDatacenterRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnregisterAndDestroyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnregisterAndDestroyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateDVSRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDVSRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVSCreateSpec"]
    ]
  )

  # StoragePod added from VIM 5.5
  EncodedRegistry.register(
    :class => VimWs25::CreateStoragePodRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateStoragePodRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetCollectorPageSizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetCollectorPageSizeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RewindCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RewindCollectorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetCollectorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyCollectorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryHostConnectionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryHostConnectionInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateSystemResourcesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateSystemResourcesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resourceInfo", "VimWs25::HostSystemResourceInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconnectHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconnectHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cnxSpec", "VimWs25::HostConnectSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisconnectHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisconnectHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnterMaintenanceModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnterMaintenanceModeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeout", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExitMaintenanceModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitMaintenanceModeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RebootHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RebootHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ShutdownHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ShutdownHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerDownHostToStandByRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerDownHostToStandByRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerUpHostFromStandByRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerUpHostFromStandByRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryMemoryOverheadRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryMemoryOverheadRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["memorySize", "SOAP::SOAPLong"],
      ["videoRamSize", "SOAP::SOAPInt", [0, 1]],
      ["numVcpus", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryMemoryOverheadExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryMemoryOverheadExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmConfigInfo", "VimWs25::VirtualMachineConfigInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureHostForDASRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureHostForDASRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateFlagsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateFlagsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["flagInfo", "VimWs25::HostFlagInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnterLockdownModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnterLockdownModeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExitLockdownModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitLockdownModeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AcquireCimServicesTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireCimServicesTicketRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateIpmiRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpmiRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ipmiInfo", "VimWs25::HostIpmiInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveHardwareUptimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveHardwareUptimeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseGetManifestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseGetManifestRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseCompleteRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseCompleteRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseAbortRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseAbortRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseProgressRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseProgressRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["percent", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryIpPoolsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryIpPoolsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateIpPoolRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::IpPool"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpPoolRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::IpPool"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyIpPoolRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["id", "SOAP::SOAPInt"],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateAssignedLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateAssignedLicenseRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "SOAP::SOAPString"],
      ["licenseKey", "SOAP::SOAPString"],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveAssignedLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAssignedLicenseRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryAssignedLicensesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAssignedLicensesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entityId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QuerySupportedFeaturesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QuerySupportedFeaturesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryLicenseSourceAvailabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryLicenseSourceAvailabilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryLicenseUsageRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryLicenseUsageRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetLicenseEditionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetLicenseEditionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckLicenseFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckLicenseFeatureRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableFeatureRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisableFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableFeatureRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConfigureLicenseSourceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigureLicenseSourceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseSource", "VimWs25::LicenseSource"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLicenseRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddLicenseRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveLicenseRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DecodeLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DecodeLicenseRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateLicenseLabelRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLicenseLabelRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"],
      ["labelValue", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveLicenseLabelRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveLicenseLabelRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReloadRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReloadRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RenameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyNetworkRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyNetworkRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ValidateHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ValidateHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["vhp", "VimWs25::OvfValidateHostParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ParseDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ParseDescriptorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["pdp", "VimWs25::OvfParseDescriptorParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateImportSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateImportSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["resourcePool", "VimWs25::ManagedObjectReference"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["cisp", "VimWs25::OvfCreateImportSpecParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDescriptorRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["cdp", "VimWs25::OvfCreateDescriptorParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPerfProviderSummaryRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfProviderSummaryRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryAvailablePerfMetricRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailablePerfMetricRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPerfCounterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfCounterRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["counterId", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPerfCounterByLevelRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfCounterByLevelRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["level", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPerfRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["querySpec", "VimWs25::PerfQuerySpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPerfCompositeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfCompositeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["querySpec", "VimWs25::PerfQuerySpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreatePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreatePerfIntervalRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["intervalId", "VimWs25::PerfInterval"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemovePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemovePerfIntervalRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["samplePeriod", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdatePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePerfIntervalRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["interval", "VimWs25::PerfInterval"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EstimateDatabaseSizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EstimateDatabaseSizeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dbSizeParam", "VimWs25::DatabaseSizeParam"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["config", "VimWs25::ResourceConfigSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveIntoResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveIntoResourcePoolRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["list", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateChildResourceConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateChildResourceConfigurationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ResourceConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateResourcePoolRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ResourceConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyChildrenRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyChildrenRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["resSpec", "VimWs25::ResourceConfigSpec"],
      ["configSpec", "VimWs25::VAppConfigSpec"],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateChildVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateChildVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::VirtualMachineConfigSpec"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RegisterChildVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RegisterChildVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ImportVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ImportVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ImportSpec"],
      ["folder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryResourceConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryResourceConfigOptionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshRuntimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshRuntimeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByUuidRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindByDatastorePathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByDatastorePathRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindByDnsNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByDnsNameRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindByIpRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByIpRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindByInventoryPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByInventoryPathRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["inventoryPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindChildRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindChildRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindAllByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAllByUuidRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindAllByDnsNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAllByDnsNameRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindAllByIpRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAllByIpRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CurrentTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CurrentTimeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveServiceContentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveServiceContentRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ValidateMigrationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ValidateMigrationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVMotionCompatibilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveProductComponentsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveProductComponentsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateServiceMessageRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateServiceMessageRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LoginRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LoginBySSPIRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginBySSPIRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["base64Token", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LogoutRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LogoutRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AcquireLocalTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireLocalTicketRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TerminateSessionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "TerminateSessionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sessionId", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetLocaleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetLocaleRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["locale", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LoginExtensionBySubjectNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginExtensionBySubjectNameRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LoginExtensionByCertificateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginExtensionByCertificateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ImpersonateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ImpersonateUserRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SessionIsActiveRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionIsActiveRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sessionID", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AcquireCloneTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireCloneTicketRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CloneSessionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneSessionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cloneTicket", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConfigureDatastoreIORMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigureDatastoreIORMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::StorageIORMConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryIORMConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryIORMConfigOptionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CancelTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateProgressRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateProgressRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["percentDone", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetTaskStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetTaskStateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["state", "SOAP::SOAPString"],
      ["result", nil, [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetTaskDescriptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetTaskDescriptionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["description", "VimWs25::LocalizableMessage"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReadNextTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadNextTasksRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReadPreviousTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadPreviousTasksRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateCollectorForTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateCollectorForTasksRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::TaskFilterSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["taskTypeId", "SOAP::SOAPString"],
      ["initiatedBy", "SOAP::SOAPString", [0, 1]],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveUserGroupsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveUserGroupsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["domain", "SOAP::SOAPString", [0, 1]],
      ["searchStr", "SOAP::SOAPString"],
      ["belongsToGroup", "SOAP::SOAPString", [0, 1]],
      ["belongsToUser", "SOAP::SOAPString", [0, 1]],
      ["exactMatch", "SOAP::SOAPBoolean"],
      ["findUsers", "SOAP::SOAPBoolean"],
      ["findGroups", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateVAppConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVAppConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VAppConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateLinkedChildrenRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLinkedChildrenRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["addChangeSet", "VimWs25::VirtualAppLinkInfo[]", [0, nil]],
      ["removeSet", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CloneVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VAppCloneSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExportVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExportVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOnVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOffVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOffVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SuspendVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SuspendVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnregisterVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "unregisterVAppRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["spec", "VimWs25::VirtualDiskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeleteVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MoveVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CopyVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CopyVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destSpec", "VimWs25::VirtualDiskSpec", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["newCapacityKb", "SOAP::SOAPLong"],
      ["eagerZero", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVirtualDiskFragmentationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVirtualDiskFragmentationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DefragmentVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DefragmentVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ShrinkVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ShrinkVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["copy", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InflateVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "InflateVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EagerZeroVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EagerZeroVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ZeroFillVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ZeroFillVirtualDiskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetVirtualDiskUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetVirtualDiskUuidRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVirtualDiskUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVirtualDiskUuidRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVirtualDiskGeometryRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVirtualDiskGeometryRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshStorageInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshStorageInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateSnapshotRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["memory", "SOAP::SOAPBoolean"],
      ["quiesce", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RevertToCurrentSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RevertToCurrentSnapshotRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveAllSnapshotsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAllSnapshotsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpgradeVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtractOvfEnvironmentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtractOvfEnvironmentRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOnVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOffVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOffVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SuspendVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SuspendVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ShutdownGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ShutdownGuestRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RebootGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RebootGuestRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StandbyGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StandbyGuestRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AnswerVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AnswerVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["questionId", "SOAP::SOAPString"],
      ["answerChoice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizeVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizeVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckCustomizationSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrateVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["priority", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RelocateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RelocateVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineRelocateSpec"],
      ["priority", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CloneVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["folder", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::VirtualMachineCloneSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExportVmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExportVmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MarkAsTemplateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MarkAsTemplateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MarkAsVirtualMachineRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MarkAsVirtualMachineRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pool", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnregisterVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnregisterVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetGuestInformationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetGuestInformationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MountToolsInstallerRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MountToolsInstallerRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnmountToolsInstallerRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnmountToolsInstallerRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpgradeToolsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeToolsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["installerOptions", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AcquireMksTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireMksTicketRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AcquireTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireTicketRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetScreenResolutionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetScreenResolutionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DefragmentAllDisksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DefragmentAllDisksRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateSecondaryVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TurnOffFaultToleranceForVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "TurnOffFaultToleranceForVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MakePrimaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MakePrimaryVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TerminateFaultTolerantVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "TerminateFaultTolerantVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisableSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableSecondaryVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableSecondaryVMRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetDisplayTopologyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetDisplayTopologyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["displays", "VimWs25::VirtualMachineDisplayTopology[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StartRecordingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StartRecordingRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StopRecordingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StopRecordingRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StartReplayingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StartReplayingRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["replaySnapshot", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StopReplayingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StopReplayingRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PromoteDisksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PromoteDisksRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["unlink", "SOAP::SOAPBoolean"],
      ["disks", "VimWs25::VirtualDisk[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateScreenshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateScreenshotRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryChangedDiskAreasRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryChangedDiskAreasRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["snapshot", "VimWs25::ManagedObjectReference", [0, 1]],
      ["deviceKey", "SOAP::SOAPInt"],
      ["startOffset", "SOAP::SOAPLong"],
      ["changeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryUnownedFilesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUnownedFilesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReloadVirtualMachineFromPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "reloadVirtualMachineFromPathRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configurationPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryFaultToleranceCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryFaultToleranceCompatibilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAlarmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureAlarmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::AlarmSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateAlarmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::AlarmSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GetAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetAlarmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AreAlarmActionsEnabledRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AreAlarmActionsEnabledRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableAlarmActionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableAlarmActionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GetAlarmStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetAlarmStateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AcknowledgeAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcknowledgeAlarmRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureDVPortgroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureDVPortgroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVPortgroupConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryAvailableDvsSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailableDvsSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryCompatibleHostForNewDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryCompatibleHostForNewDvsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryCompatibleHostForExistingDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryCompatibleHostForExistingDvsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDvsCompatibleHostSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsCompatibleHostSpecRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDvsFeatureCapabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsFeatureCapabilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDvsByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsByUuidRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDvsConfigTargetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsConfigTargetRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dvs", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDvsCheckCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsCheckCompatibilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hostContainer", "VimWs25::DistributedVirtualSwitchManagerHostContainer"],
      ["dvsProductSpec", "VimWs25::DistributedVirtualSwitchManagerDvsProductSpec", [0, 1]],
      ["hostFilterSpec", "VimWs25::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReadNextEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadNextEventsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReadPreviousEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadPreviousEventsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveArgumentDescriptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveArgumentDescriptionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["eventTypeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateCollectorForEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateCollectorForEventsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::EventFilterSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LogUserEventRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LogUserEventRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["msg", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryEventsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::EventFilterSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PostEventRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PostEventRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["eventToPost", "VimWs25::Event"],
      ["taskInfo", "VimWs25::TaskInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::JoinDomainRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "JoinDomainRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["domainName", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LeaveCurrentDomainRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LeaveCurrentDomainRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureAutostartRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureAutostartRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostAutoStartManagerConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AutoStartPowerOnRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartPowerOnRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AutoStartPowerOffRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartPowerOffRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryBootDevicesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryBootDevicesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateBootDeviceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateBootDeviceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableHyperThreadingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableHyperThreadingRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisableHyperThreadingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableHyperThreadingRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SearchDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SearchDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VimWs25::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SearchDatastoreSubFoldersRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SearchDatastoreSubFoldersRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VimWs25::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeleteFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteFileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateLocalSwapDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLocalSwapDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryAvailableDisksForVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailableDisksForVmfsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreCreateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVmfsDatastoreCreateOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVmfsDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VmfsDatastoreCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExtendOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVmfsDatastoreExtendOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["devicePath", "SOAP::SOAPString"],
      ["suppressExpandCandidates", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExpandOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVmfsDatastoreExpandOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendVmfsDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VmfsDatastoreExtendSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExpandVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpandVmfsDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VmfsDatastoreExpandSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateNasDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateNasDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostNasVolumeSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateLocalDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateLocalDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveDatastoreRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConfigureDatastorePrincipalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigureDatastorePrincipalRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUnresolvedVmfsVolumesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResignatureUnresolvedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResignatureUnresolvedVmfsVolumeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resolutionSpec", "VimWs25::HostUnresolvedVmfsResignatureSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateDateTimeConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDateTimeConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostDateTimeConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryAvailableTimeZonesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailableTimeZonesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryDateTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDateTimeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateDateTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDateTimeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dateTime", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshDateTimeSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDateTimeSystemRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryAvailablePartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailablePartitionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SelectActivePartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectActivePartitionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["partition", "VimWs25::HostScsiDiskPartition", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPartitionCreateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPartitionCreateOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPartitionCreateDescRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPartitionCreateDescRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["diskUuid", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateDiagnosticPartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDiagnosticPartitionRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateDefaultPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDefaultPolicyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["defaultPolicy", "VimWs25::HostFirewallDefaultPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableRulesetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableRulesetRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisableRulesetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableRulesetRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshFirewallRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshFirewallRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetFirmwareToFactoryDefaultsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetFirmwareToFactoryDefaultsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::BackupFirmwareConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "BackupFirmwareConfigurationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryFirmwareConfigUploadURLRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryFirmwareConfigUploadURLRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RestoreFirmwareConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RestoreFirmwareConfigurationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshHealthStatusSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshHealthStatusSystemRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetSystemHealthInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetSystemHealthInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryModulesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryModulesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateModuleOptionStringRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateModuleOptionStringRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["options", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryConfiguredModuleOptionStringRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfiguredModuleOptionStringRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateUserRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "VimWs25::HostAccountSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateUserRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "VimWs25::HostAccountSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["group", "VimWs25::HostAccountSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveUserRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["groupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AssignUserToGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AssignUserToGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnassignUserFromGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnassignUserFromGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureServiceConsoleReservationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureServiceConsoleReservationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cfgBytes", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureVirtualMachineReservationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureVirtualMachineReservationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineMemoryReservationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateNetworkConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateNetworkConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostNetworkConfig"],
      ["changeMode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateDnsConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDnsConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostDnsConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateIpRouteConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpRouteConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateConsoleIpRouteConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateConsoleIpRouteConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateIpRouteTableConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpRouteTableConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteTableConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddVirtualSwitchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveVirtualSwitchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualSwitchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddPortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddPortGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgrp", "VimWs25::HostPortGroupSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemovePortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemovePortGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pgName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdatePortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePortGroupRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pgName", "SOAP::SOAPString"],
      ["portgrp", "VimWs25::HostPortGroupSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdatePhysicalNicLinkSpeedRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePhysicalNicLinkSpeedRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryNetworkHintRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryNetworkHintRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddServiceConsoleVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveServiceConsoleVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateServiceConsoleVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RestartServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RestartServiceConsoleVirtualNicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshNetworkSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshNetworkSystemRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckHostPatchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScanHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ScanHostPatchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["repository", "VimWs25::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScanHostPatchV2RequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ScanHostPatchV2RequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StageHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StageHostPatchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InstallHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "InstallHostPatchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["repository", "VimWs25::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString"],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InstallHostPatchV2RequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "InstallHostPatchV2RequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UninstallHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UninstallHostPatchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["bulletinIds", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryHostPatchRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdatePassthruConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePassthruConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostPciPassthruConfig[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConfigurePowerPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigurePowerPolicyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateServicePolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateServicePolicyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StartServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StartServiceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StopServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StopServiceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RestartServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RestartServiceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UninstallServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UninstallServiceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshServicesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshServicesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureSnmpAgentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureSnmpAgentRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostSnmpConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SendTestNotificationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SendTestNotificationRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveDiskPartitionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveDiskPartitionInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeDiskPartitionInfoRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoForResizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeDiskPartitionInfoForResizeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["partition", "VimWs25::HostScsiDiskPartition"],
      ["blockRange", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateDiskPartitionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDiskPartitionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiskPartitionSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FormatVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FormatVmfsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["createSpec", "VimWs25::HostVmfsSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RescanVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RescanVmfsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AttachVmfsExtentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AttachVmfsExtentRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExpandVmfsExtentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpandVmfsExtentRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpgradeVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeVmfsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpgradeVmLayoutRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeVmLayoutRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUnresolvedVmfsVolumeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResolveMultipleUnresolvedVmfsVolumesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResolveMultipleUnresolvedVmfsVolumesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resolutionSpec", "VimWs25::HostUnresolvedVmfsResolutionSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnmountForceMountedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnmountForceMountedVmfsVolumeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RescanHbaRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RescanHbaRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hbaDevice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RescanAllHbaRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RescanAllHbaRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateSoftwareInternetScsiEnabledRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateSoftwareInternetScsiEnabledRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiDiscoveryPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiDiscoveryPropertiesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["discoveryProperties", "VimWs25::HostInternetScsiHbaDiscoveryProperties"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiAuthenticationPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiAuthenticationPropertiesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiDigestPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiDigestPropertiesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiAdvancedOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiAdvancedOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]],
      ["options", "VimWs25::HostInternetScsiHbaParamValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiIPPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiIPPropertiesRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["ipProperties", "VimWs25::HostInternetScsiHbaIPProperties"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiNameRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateInternetScsiAliasRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiAliasRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddInternetScsiSendTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddInternetScsiSendTargetsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveInternetScsiSendTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveInternetScsiSendTargetsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AddInternetScsiStaticTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddInternetScsiStaticTargetsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveInternetScsiStaticTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveInternetScsiStaticTargetsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnableMultipathPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableMultipathPathRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisableMultipathPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableMultipathPathRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SetMultipathLunPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetMultipathLunPolicyRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["lunId", "SOAP::SOAPString"],
      ["policy", "VimWs25::HostMultipathInfoLogicalUnitPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPathSelectionPolicyOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPathSelectionPolicyOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryStorageArrayTypePolicyOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryStorageArrayTypePolicyOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateScsiLunDisplayNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateScsiLunDisplayNameRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["lunUuid", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RefreshStorageSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshStorageSystemRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateIpConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ipConfig", "VimWs25::HostIpConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SelectVnicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectVnicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeselectVnicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeselectVnicRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryNetConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryNetConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SelectVnicForNicTypeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectVnicForNicTypeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeselectVnicForNicTypeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeselectVnicForNicTypeRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateOptionsRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["changedValue", "VimWs25::OptionValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckComplianceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckComplianceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryComplianceStatusRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryComplianceStatusRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClearComplianceStatusRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ClearComplianceStatusRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryExpressionMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryExpressionMetadataRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["expressionName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AssociateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AssociateProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DissociateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DissociateProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckProfileComplianceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckProfileComplianceRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExportProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExportProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["createSpec", "VimWs25::ProfileCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryPolicyMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPolicyMetadataRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["policyName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FindAssociatedProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAssociatedProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateClusterProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateClusterProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::ClusterProfileConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateReferenceHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateReferenceHostRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateHostProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateHostProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostProfileConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExecuteHostProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExecuteHostProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["deferredParam", "VimWs25::ProfileDeferredPolicyOptionParameter[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ApplyHostConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplyHostConfigRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["configSpec", "VimWs25::HostConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GenerateConfigTaskListRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GenerateConfigTaskListRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configSpec", "VimWs25::HostConfigSpec"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryHostProfileMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryHostProfileMetadataRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profileName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateDefaultProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDefaultProfileRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profileType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReconfigureScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RunScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RunScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveEntityScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveEntityScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateObjectScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateObjectScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RetrieveObjectScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveObjectScheduledTaskRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OpenInventoryViewFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "OpenInventoryViewFolderRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CloseInventoryViewFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloseInventoryViewFolderRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ModifyListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ModifyListViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["add", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["remove", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetListViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResetListViewFromViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetListViewFromViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["view", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestroyViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateInventoryViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateInventoryViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateContainerViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateContainerViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateListViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateListViewFromViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateListViewFromViewRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["view", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RevertToSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RevertToSnapshotRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveSnapshotRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["removeChildren", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RenameSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameSnapshotRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckCompatibilityRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVMotionCompatibilityExRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckMigrateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckMigrateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckRelocateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckRelocateRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VirtualMachineRelocateSpec"],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AboutInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "AboutInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["build", "SOAP::SOAPString"],
      ["localeVersion", "SOAP::SOAPString", [0, 1]],
      ["localeBuild", "SOAP::SOAPString", [0, 1]],
      ["osType", "SOAP::SOAPString"],
      ["productLineId", "SOAP::SOAPString"],
      ["apiType", "SOAP::SOAPString"],
      ["apiVersion", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["licenseProductName", "SOAP::SOAPString", [0, 1]],
      ["licenseProductVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AuthorizationDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["privilege", "VimWs25::ElementDescription[]", [1, nil]],
      ["privilegeGroup", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::Permission,
    :schema_ns => "urn:vim25",
    :schema_type => "Permission",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["roleId", "SOAP::SOAPInt"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPermission,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "Permission") }
  )

  EncodedRegistry.register(
    :class => VimWs25::AuthorizationRole,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationRole",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["system", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["info", "VimWs25::Description"],
      ["privilege", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAuthorizationRole,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AuthorizationRole") }
  )

  EncodedRegistry.register(
    :class => VimWs25::AuthorizationPrivilege,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationPrivilege",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["privId", "SOAP::SOAPString"],
      ["onParent", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAuthorizationPrivilege,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AuthorizationPrivilege") }
  )

  EncodedRegistry.register(
    :class => VimWs25::BoolPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "BoolPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::Capability,
    :schema_ns => "urn:vim25",
    :schema_type => "Capability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["provisioningSupported", "SOAP::SOAPBoolean"],
      ["multiHostSupported", "SOAP::SOAPBoolean"],
      ["userShellAccessSupported", "SOAP::SOAPBoolean"],
      ["supportedEVCMode", "VimWs25::EVCMode[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterComputeResourceSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterComputeResourceSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "SOAP::SOAPString"],
      ["currentFailoverLevel", "SOAP::SOAPInt"],
      ["admissionControlInfo", "VimWs25::ClusterDasAdmissionControlInfo", [0, 1]],
      ["numVmotions", "SOAP::SOAPInt"],
      ["targetBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComputeResourceSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComputeResourceConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComputeResourceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldDef,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDef",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["managedObjectType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPrivileges", "VimWs25::PrivilegePolicyDef", [0, 1]],
      ["fieldInstancePrivileges", "VimWs25::PrivilegePolicyDef", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfCustomFieldDef,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "CustomFieldDef") }
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldValue,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfCustomFieldValue,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "CustomFieldValue") }
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldStringValue,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldStringValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSpecInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpecInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastUpdateTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfCustomizationSpecInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "CustomizationSpecInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSpecItem,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpecItem",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["info", "VimWs25::CustomizationSpecInfo"],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong", [0, 1]],
      ["accessible", "SOAP::SOAPBoolean"],
      ["multipleHostAccess", "SOAP::SOAPBoolean", [0, 1]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["directoryHierarchySupported", "SOAP::SOAPBoolean"],
      ["rawDiskMappingsSupported", "SOAP::SOAPBoolean"],
      ["perFileThinProvisioningSupported", "SOAP::SOAPBoolean"],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreHostMount,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreHostMount",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["mountInfo", "VimWs25::HostMountInfo"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDatastoreHostMount,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DatastoreHostMount") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreMountPathDatastorePair,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreMountPathDatastorePair",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["oldMountPath", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDatastoreMountPathDatastorePair,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DatastoreMountPathDatastorePair") }
  )

  EncodedRegistry.register(
    :class => VimWs25::Description,
    :schema_ns => "urn:vim25",
    :schema_type => "Description",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticManagerLogDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogDescriptor",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["fileName", "SOAP::SOAPString"],
      ["creator", "SOAP::SOAPString"],
      ["format", "SOAP::SOAPString"],
      ["mimeType", "SOAP::SOAPString"],
      ["info", "VimWs25::Description"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDiagnosticManagerLogDescriptor,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DiagnosticManagerLogDescriptor") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticManagerLogHeader,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogHeader",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["lineStart", "SOAP::SOAPInt"],
      ["lineEnd", "SOAP::SOAPInt"],
      ["lineText", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticManagerBundleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerBundleInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["system", "VimWs25::ManagedObjectReference", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDiagnosticManagerBundleInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DiagnosticManagerBundleInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSContactInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSContactInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["contact", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSFeatureCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSFeatureCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dvsOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortGroupOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["compatibleHostComponentProductInfo", "VimWs25::DistributedVirtualSwitchHostProductSpec[]", [0, nil]],
      ["featuresSupported", "VimWs25::DVSFeatureCapability", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["hostMember", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["portgroupName", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["contact", "VimWs25::DVSContactInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["autoPreInstallAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["autoUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["partialUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSUplinkPortPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSUplinkPortPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSNameArrayUplinkPortPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNameArrayUplinkPortPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["uplinkPortName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["host", "VimWs25::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VimWs25::DVSContactInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configSpec", "VimWs25::DVSConfigSpec"],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["capability", "VimWs25::DVSCapability", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting"],
      ["host", "VimWs25::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VimWs25::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCMode",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["guaranteedCPUFeatures", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["track", "SOAP::SOAPString[]", [0, nil]],
      ["vendorTier", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfEVCMode,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "EVCMode") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ElementDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ElementDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfElementDescription,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ElementDescription") }
  )

  EncodedRegistry.register(
    :class => VimWs25::EnumDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "EnumDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["tags", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfEnumDescription,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "EnumDescription") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendedDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendedElementDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedElementDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionServerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionServerInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["description", "VimWs25::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["adminEmail", "SOAP::SOAPString[]", [1, nil]],
      ["serverThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionServerInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionServerInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionClientInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionClientInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "VimWs25::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionClientInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionClientInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionTaskTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionTaskTypeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["taskID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionTaskTypeInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionTaskTypeInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionEventTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionEventTypeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["eventID", "SOAP::SOAPString"],
      ["eventTypeSchema", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionEventTypeInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionEventTypeInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionFaultTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionFaultTypeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionFaultTypeInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionFaultTypeInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionPrivilegeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionPrivilegeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["privID", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionPrivilegeInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionPrivilegeInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionResourceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionResourceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["v_module", ["SOAP::SOAPString", XSD::QName.new("urn:vim25", "module")]],
      ["data", "VimWs25::KeyValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtensionResourceInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtensionResourceInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtensionHealthInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionHealthInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::Extension,
    :schema_ns => "urn:vim25",
    :schema_type => "Extension",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["description", "VimWs25::Description"],
      ["key", "SOAP::SOAPString"],
      ["company", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString"],
      ["subjectName", "SOAP::SOAPString", [0, 1]],
      ["server", "VimWs25::ExtensionServerInfo[]", [0, nil]],
      ["client", "VimWs25::ExtensionClientInfo[]", [0, nil]],
      ["taskList", "VimWs25::ExtensionTaskTypeInfo[]", [0, nil]],
      ["eventList", "VimWs25::ExtensionEventTypeInfo[]", [0, nil]],
      ["faultList", "VimWs25::ExtensionFaultTypeInfo[]", [0, nil]],
      ["privilegeList", "VimWs25::ExtensionPrivilegeInfo[]", [0, nil]],
      ["resourceList", "VimWs25::ExtensionResourceInfo[]", [0, nil]],
      ["lastHeartbeatTime", "SOAP::SOAPDateTime"],
      ["healthInfo", "VimWs25::ExtensionHealthInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtension,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "Extension") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostServiceTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServiceTicket",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["service", "SOAP::SOAPString"],
      ["serviceVersion", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseDatastoreLeaseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseDatastoreLeaseInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastoreKey", "SOAP::SOAPString"],
      ["hosts", "VimWs25::HttpNfcLeaseHostInfo[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHttpNfcLeaseDatastoreLeaseInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HttpNfcLeaseDatastoreLeaseInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseHostInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHttpNfcLeaseHostInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HttpNfcLeaseHostInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["lease", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["deviceUrl", "VimWs25::HttpNfcLeaseDeviceUrl[]", [0, nil]],
      ["totalDiskCapacityInKB", "SOAP::SOAPLong"],
      ["leaseTimeout", "SOAP::SOAPInt"],
      ["hostMap", "VimWs25::HttpNfcLeaseDatastoreLeaseInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseDeviceUrl,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseDeviceUrl",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["importKey", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"],
      ["disk", "SOAP::SOAPBoolean", [0, 1]],
      ["targetId", "SOAP::SOAPString", [0, 1]],
      ["datastoreKey", "SOAP::SOAPString", [0, 1]],
      ["fileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHttpNfcLeaseDeviceUrl,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HttpNfcLeaseDeviceUrl") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseManifestEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseManifestEntry",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["sha1", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"],
      ["disk", "SOAP::SOAPBoolean"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHttpNfcLeaseManifestEntry,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HttpNfcLeaseManifestEntry") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ImportSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfImportSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ImportSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::InheritablePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "InheritablePolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IntPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "IntPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::KeyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "KeyValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfKeyValue,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "KeyValue") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseAssignmentManagerLicenseAssignment,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAssignmentManagerLicenseAssignment",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"],
      ["scope", "SOAP::SOAPString", [0, 1]],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]],
      ["assignedLicense", "VimWs25::LicenseManagerLicenseInfo"],
      ["properties", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLicenseAssignmentManagerLicenseAssignment,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LicenseAssignmentManagerLicenseAssignment") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseSource,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseSource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseServerSource,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerSource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalLicenseSource,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalLicenseSource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["licenseKeys", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EvaluationLicenseSource,
    :schema_ns => "urn:vim25",
    :schema_type => "EvaluationLicenseSource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["remainingHours", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseFeatureInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["featureName", "SOAP::SOAPString"],
      ["featureDescription", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["sourceRestriction", "SOAP::SOAPString", [0, 1]],
      ["dependentKey", "SOAP::SOAPString[]", [0, nil]],
      ["edition", "SOAP::SOAPBoolean", [0, 1]],
      ["expiresOn", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLicenseFeatureInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LicenseFeatureInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseReservationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLicenseReservationInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LicenseReservationInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseAvailabilityInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAvailabilityInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["feature", "VimWs25::LicenseFeatureInfo"],
      ["total", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLicenseAvailabilityInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LicenseAvailabilityInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseDiagnostics,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseDiagnostics",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["sourceLastChanged", "SOAP::SOAPDateTime"],
      ["sourceLost", "SOAP::SOAPString"],
      ["sourceLatency", "SOAP::SOAPFloat"],
      ["licenseRequests", "SOAP::SOAPString"],
      ["licenseRequestFailures", "SOAP::SOAPString"],
      ["licenseFeatureUnknowns", "SOAP::SOAPString"],
      ["opState", "SOAP::SOAPString"],
      ["lastStatusUpdate", "SOAP::SOAPDateTime"],
      ["opFailureMessage", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseUsageInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseUsageInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::LicenseSource"],
      ["sourceAvailable", "SOAP::SOAPBoolean"],
      ["reservationInfo", "VimWs25::LicenseReservationInfo[]", [0, nil]],
      ["featureInfo", "VimWs25::LicenseFeatureInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseManagerEvaluationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerEvaluationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["properties", "VimWs25::KeyAnyValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseManagerLicenseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerLicenseInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"],
      ["editionKey", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["total", "SOAP::SOAPInt"],
      ["used", "SOAP::SOAPInt", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["properties", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLicenseManagerLicenseInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LicenseManagerLicenseInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalizationManagerMessageCatalog,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalizationManagerMessageCatalog",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["moduleName", "SOAP::SOAPString"],
      ["catalogName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["catalogUri", "SOAP::SOAPString"],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["md5sum", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfLocalizationManagerMessageCatalog,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "LocalizationManagerMessageCatalog") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LongPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "LongPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean"],
      ["ipPoolName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NumericRange,
    :schema_ns => "urn:vim25",
    :schema_type => "NumericRange",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPInt"],
      ["v_end", ["SOAP::SOAPInt", XSD::QName.new("urn:vim25", "end")]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNumericRange,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NumericRange") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfDeploymentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDeploymentOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOvfDeploymentOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OvfDeploymentOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfManagerCommonParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfManagerCommonParams",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfValidateHostParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfValidateHostParams",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfValidateHostResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfValidateHostResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["downloadSize", "SOAP::SOAPLong", [0, 1]],
      ["flatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["sparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["supportedDiskProvisioning", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfParseDescriptorParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfParseDescriptorParams",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfParseDescriptorResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfParseDescriptorResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VimWs25::OvfNetworkInfo[]", [0, nil]],
      ["ipAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocols", "SOAP::SOAPString[]", [0, nil]],
      ["property", "VimWs25::VAppPropertyInfo[]", [0, nil]],
      ["productInfo", "VimWs25::VAppProductInfo", [0, 1]],
      ["annotation", "SOAP::SOAPString"],
      ["approximateDownloadSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateFlatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateSparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["defaultEntityName", "SOAP::SOAPString"],
      ["virtualApp", "SOAP::SOAPBoolean"],
      ["deploymentOption", "VimWs25::OvfDeploymentOption[]", [0, nil]],
      ["defaultDeploymentOption", "SOAP::SOAPString"],
      ["entityName", "VimWs25::KeyValue[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNetworkInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOvfNetworkInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OvfNetworkInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfCreateImportSpecParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateImportSpecParams",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]],
      ["entityName", "SOAP::SOAPString"],
      ["hostSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VimWs25::OvfNetworkMapping[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]],
      ["propertyMapping", "VimWs25::KeyValue[]", [0, nil]],
      ["resourceMapping", "VimWs25::OvfResourceMap[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfResourceMap,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfResourceMap",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "SOAP::SOAPString"],
      ["parent", "VimWs25::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOvfResourceMap,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OvfResourceMap") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfNetworkMapping,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNetworkMapping",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOvfNetworkMapping,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OvfNetworkMapping") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfCreateImportSpecResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateImportSpecResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["importSpec", "VimWs25::ImportSpec", [0, 1]],
      ["fileItem", "VimWs25::OvfFileItem[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfFileItem,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfFileItem",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong", [0, 1]],
      ["cimType", "SOAP::SOAPInt"],
      ["create", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOvfFileItem,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OvfFileItem") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfCreateDescriptorParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateDescriptorParams",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ovfFiles", "VimWs25::OvfFile[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfCreateDescriptorResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateDescriptorResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfFile,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfFile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOvfFile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OvfFile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PasswordField,
    :schema_ns => "urn:vim25",
    :schema_type => "PasswordField",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerformanceDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformanceDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["counterType", "VimWs25::ElementDescription[]", [1, nil]],
      ["statsType", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfProviderSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfProviderSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["currentSupported", "SOAP::SOAPBoolean"],
      ["summarySupported", "SOAP::SOAPBoolean"],
      ["refreshRate", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfCounterInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfCounterInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["nameInfo", "VimWs25::ElementDescription"],
      ["groupInfo", "VimWs25::ElementDescription"],
      ["unitInfo", "VimWs25::ElementDescription"],
      ["rollupType", "SOAP::SOAPString"],
      ["statsType", "SOAP::SOAPString"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["perDeviceLevel", "SOAP::SOAPInt", [0, 1]],
      ["associatedCounterId", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfCounterInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfCounterInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfMetricId,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricId",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["counterId", "SOAP::SOAPInt"],
      ["instance", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfMetricId,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfMetricId") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfQuerySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfQuerySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["maxSample", "SOAP::SOAPInt", [0, 1]],
      ["metricId", "VimWs25::PerfMetricId[]", [0, nil]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]],
      ["format", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfQuerySpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfQuerySpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfSampleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfSampleInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfSampleInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfSampleInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfMetricSeries,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricSeries",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::PerfMetricId"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfMetricSeries,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfMetricSeries") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfMetricIntSeries,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricIntSeries",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::PerfMetricId"],
      ["value", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfMetricSeriesCSV,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricSeriesCSV",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::PerfMetricId"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfMetricSeriesCSV,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfMetricSeriesCSV") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfEntityMetricBase,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfEntityMetricBase",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfEntityMetricBase,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfEntityMetricBase") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfEntityMetric,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfEntityMetric",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["sampleInfo", "VimWs25::PerfSampleInfo[]", [0, nil]],
      ["value", "VimWs25::PerfMetricSeries[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfEntityMetricCSV,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfEntityMetricCSV",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["sampleInfoCSV", "SOAP::SOAPString"],
      ["value", "VimWs25::PerfMetricSeriesCSV[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfCompositeMetric,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfCompositeMetric",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::PerfEntityMetricBase", [0, 1]],
      ["childEntity", "VimWs25::PerfEntityMetricBase[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfInterval,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfInterval",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["samplingPeriod", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["length", "SOAP::SOAPInt"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPerfInterval,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PerfInterval") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PosixUserSearchResult,
    :schema_ns => "urn:vim25",
    :schema_type => "PosixUserSearchResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"],
      ["id", "SOAP::SOAPInt"],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PrivilegePolicyDef,
    :schema_ns => "urn:vim25",
    :schema_type => "PrivilegePolicyDef",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["createPrivilege", "SOAP::SOAPString"],
      ["readPrivilege", "SOAP::SOAPString"],
      ["updatePrivilege", "SOAP::SOAPString"],
      ["deletePrivilege", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceAllocationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceAllocationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["reservation", "SOAP::SOAPLong", [0, 1]],
      ["expandableReservation", "SOAP::SOAPBoolean", [0, 1]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VimWs25::SharesInfo", [0, 1]],
      ["overheadLimit", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceAllocationOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceAllocationOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VimWs25::SharesOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceConfigOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceConfigOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cpuAllocationOption", "VimWs25::ResourceAllocationOption"],
      ["memoryAllocationOption", "VimWs25::ResourceAllocationOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["cpuAllocation", "VimWs25::ResourceAllocationInfo"],
      ["memoryAllocation", "VimWs25::ResourceAllocationInfo"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfResourceConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ResourceConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DatabaseSizeParam,
    :schema_ns => "urn:vim25",
    :schema_type => "DatabaseSizeParam",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inventoryDesc", "VimWs25::InventoryDescription"],
      ["perfStatsDesc", "VimWs25::PerformanceStatisticsDescription", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InventoryDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "InventoryDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numHosts", "SOAP::SOAPInt"],
      ["numVirtualMachines", "SOAP::SOAPInt"],
      ["numResourcePools", "SOAP::SOAPInt", [0, 1]],
      ["numClusters", "SOAP::SOAPInt", [0, 1]],
      ["numCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numDiskDev", "SOAP::SOAPInt", [0, 1]],
      ["numvCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numvNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numvDiskDev", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PerformanceStatisticsDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformanceStatisticsDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["intervals", "VimWs25::PerfInterval[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatabaseSizeEstimate,
    :schema_ns => "urn:vim25",
    :schema_type => "DatabaseSizeEstimate",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolResourceUsage,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolResourceUsage",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["reservationUsed", "SOAP::SOAPLong"],
      ["reservationUsedForVm", "SOAP::SOAPLong"],
      ["unreservedForPool", "SOAP::SOAPLong"],
      ["unreservedForVm", "SOAP::SOAPLong"],
      ["overallUsage", "SOAP::SOAPLong"],
      ["maxUsage", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolRuntimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["memory", "VimWs25::ResourcePoolResourceUsage"],
      ["cpu", "VimWs25::ResourcePoolResourceUsage"],
      ["overallStatus", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolQuickStats,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolQuickStats",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPLong", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPLong", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["distributedCpuEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPLong", [0, 1]],
      ["sharedMemory", "SOAP::SOAPLong", [0, 1]],
      ["swappedMemory", "SOAP::SOAPLong", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPLong", [0, 1]],
      ["overheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VimWs25::ResourceConfigSpec"],
      ["runtime", "VimWs25::ResourcePoolRuntimeInfo"],
      ["quickStats", "VimWs25::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVMotionCompatibility,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionCompatibility",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVMotionCompatibility,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVMotionCompatibility") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProductComponentInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ProductComponentInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["release", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProductComponentInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProductComponentInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ServiceContent,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceContent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rootFolder", "VimWs25::ManagedObjectReference"],
      ["propertyCollector", "VimWs25::ManagedObjectReference"],
      ["viewManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["about", "VimWs25::AboutInfo"],
      ["setting", "VimWs25::ManagedObjectReference", [0, 1]],
      ["userDirectory", "VimWs25::ManagedObjectReference", [0, 1]],
      ["sessionManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["authorizationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["perfManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["scheduledTaskManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["alarmManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["eventManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["taskManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["extensionManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["customizationSpecManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["customFieldsManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["accountManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diagnosticManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["searchIndex", "VimWs25::ManagedObjectReference", [0, 1]],
      ["fileManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["virtualDiskManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["virtualizationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["vmProvisioningChecker", "VimWs25::ManagedObjectReference", [0, 1]],
      ["vmCompatibilityChecker", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ovfManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ipPoolManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dvSwitchManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["hostProfileManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["clusterProfileManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["complianceManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["localizationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["storageResourceManager", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SessionManagerLocalTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionManagerLocalTicket",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"],
      ["passwordFilePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserSession,
    :schema_ns => "urn:vim25",
    :schema_type => "UserSession",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["loginTime", "SOAP::SOAPDateTime"],
      ["lastActiveTime", "SOAP::SOAPDateTime"],
      ["locale", "SOAP::SOAPString"],
      ["messageLocale", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfUserSession,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "UserSession") }
  )

  EncodedRegistry.register(
    :class => VimWs25::SharesInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "SharesInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["shares", "SOAP::SOAPInt"],
      ["level", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SharesOption,
    :schema_ns => "urn:vim25",
    :schema_type => "SharesOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VimWs25::IntOption"],
      ["defaultLevel", "SOAP::SOAPString"]
    ]
  )

  # StoragePod added from VIM 5.5
  EncodedRegistry.register(
    :class => VimWs25::StoragePodSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "StoragePodSummary",
    :schema_basetype => XSD::QName.new("urn:vim25", "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["freeSpace", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageIOAllocationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIOAllocationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VimWs25::SharesInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageIOAllocationOption,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIOAllocationOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["limitOption", "VimWs25::LongOption"],
      ["sharesOption", "VimWs25::SharesOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageIORMInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIORMInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["congestionThreshold", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageIORMConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIORMConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["congestionThreshold", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageIORMConfigOption,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIORMConfigOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabledOption", "VimWs25::BoolOption"],
      ["congestionThresholdOption", "VimWs25::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StringPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "StringPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::Tag,
    :schema_ns => "urn:vim25",
    :schema_type => "Tag",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfTag,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "Tag") }
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["methodInfo", "VimWs25::ElementDescription[]", [1, nil]],
      ["state", "VimWs25::ElementDescription[]", [1, nil]],
      ["reason", "VimWs25::TypeDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskFilterSpecByEntity,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecByEntity",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["recursion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskFilterSpecByTime,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecByTime",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timeType", "SOAP::SOAPString"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskFilterSpecByUsername,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecByUsername",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::TaskFilterSpecByEntity", [0, 1]],
      ["time", "VimWs25::TaskFilterSpecByTime", [0, 1]],
      ["userName", "VimWs25::TaskFilterSpecByUsername", [0, 1]],
      ["state", "SOAP::SOAPString[]", [0, nil]],
      ["alarm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VimWs25::ManagedObjectReference", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["parentTaskKey", "SOAP::SOAPString[]", [0, nil]],
      ["rootTaskKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfTaskInfoState,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "TaskInfoState") }
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["task", "VimWs25::ManagedObjectReference"],
      ["description", "VimWs25::LocalizableMessage", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["descriptionId", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["locked", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["state", "SOAP::SOAPString"],
      ["cancelled", "SOAP::SOAPBoolean"],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["reason", "VimWs25::TaskReason"],
      ["queueTime", "SOAP::SOAPDateTime"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["completeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt"],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]],
      ["rootTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfTaskInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "TaskInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskReason,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReason",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskReasonSystem,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonSystem",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskReasonUser,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonUser",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskReasonAlarm,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonAlarm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["alarmName", "SOAP::SOAPString"],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entityName", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskReasonSchedule,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonSchedule",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TypeDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "TypeDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfTypeDescription,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "TypeDescription") }
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualMachineFilesResultFailedVmFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmFile", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "UpdateVirtualMachineFilesResultFailedVmFileInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesResult,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualMachineFilesResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failedVmFile", "VimWs25::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserSearchResult,
    :schema_ns => "urn:vim25",
    :schema_type => "UserSearchResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfUserSearchResult,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "UserSearchResult") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualAppSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VimWs25::ResourceConfigSpec"],
      ["runtime", "VimWs25::ResourcePoolRuntimeInfo"],
      ["quickStats", "VimWs25::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]],
      ["product", "VimWs25::VAppProductInfo", [0, 1]],
      ["vAppState", "SOAP::SOAPString", [0, 1]],
      ["suspended", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualAppLinkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppLinkInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualAppLinkInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualAppLinkInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileBackedVirtualDiskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "FileBackedVirtualDiskSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["capacityKb", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceBackedVirtualDiskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceBackedVirtualDiskSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTicket",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineMksTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMksTicket",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDisplayTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDisplayTopology",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["x", "SOAP::SOAPInt"],
      ["y", "SOAP::SOAPInt"],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineDisplayTopology,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineDisplayTopology") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DiskChangeExtent,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskChangeExtent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDiskChangeExtent,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DiskChangeExtent") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DiskChangeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskChangeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startOffset", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"],
      ["changedArea", "VimWs25::DiskChangeExtent[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::Action,
    :schema_ns => "urn:vim25",
    :schema_type => "Action",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodActionArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodActionArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", nil, [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfMethodActionArgument,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "MethodActionArgument") }
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodAction,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["argument", "VimWs25::MethodActionArgument[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SendEmailAction,
    :schema_ns => "urn:vim25",
    :schema_type => "SendEmailAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toList", "SOAP::SOAPString"],
      ["ccList", "SOAP::SOAPString"],
      ["subject", "SOAP::SOAPString"],
      ["body", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SendSNMPAction,
    :schema_ns => "urn:vim25",
    :schema_type => "SendSNMPAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RunScriptAction,
    :schema_ns => "urn:vim25",
    :schema_type => "RunScriptAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["script", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CreateTaskAction,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateTaskAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["taskTypeId", "SOAP::SOAPString"],
      ["cancelable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmAction,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAlarmAction,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AlarmAction") }
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmTriggeringActionTransitionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmTriggeringActionTransitionSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startState", "SOAP::SOAPString"],
      ["finalState", "SOAP::SOAPString"],
      ["repeats", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAlarmTriggeringActionTransitionSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AlarmTriggeringActionTransitionSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmTriggeringAction,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmTriggeringAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::Action"],
      ["transitionSpecs", "VimWs25::AlarmTriggeringActionTransitionSpec[]", [0, nil]],
      ["green2yellow", "SOAP::SOAPBoolean"],
      ["yellow2red", "SOAP::SOAPBoolean"],
      ["red2yellow", "SOAP::SOAPBoolean"],
      ["yellow2green", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GroupAlarmAction,
    :schema_ns => "urn:vim25",
    :schema_type => "GroupAlarmAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::AlarmAction[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expr", "VimWs25::TypeDescription[]", [1, nil]],
      ["stateOperator", "VimWs25::ElementDescription[]", [1, nil]],
      ["metricOperator", "VimWs25::ElementDescription[]", [1, nil]],
      ["hostSystemConnectionState", "VimWs25::ElementDescription[]", [1, nil]],
      ["virtualMachinePowerState", "VimWs25::ElementDescription[]", [1, nil]],
      ["datastoreConnectionState", "VimWs25::ElementDescription[]", [0, nil]],
      ["hostSystemPowerState", "VimWs25::ElementDescription[]", [0, nil]],
      ["virtualMachineGuestHeartbeatStatus", "VimWs25::ElementDescription[]", [0, nil]],
      ["entityStatus", "VimWs25::ElementDescription[]", [1, nil]],
      ["action", "VimWs25::TypeDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAlarmExpression,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AlarmExpression") }
  )

  EncodedRegistry.register(
    :class => VimWs25::AndAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "AndAlarmExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expression", "VimWs25::AlarmExpression[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OrAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "OrAlarmExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expression", "VimWs25::AlarmExpression[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StateAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "StateAlarmExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operator", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["statePath", "SOAP::SOAPString"],
      ["yellow", "SOAP::SOAPString", [0, 1]],
      ["red", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventAlarmExpressionComparison,
    :schema_ns => "urn:vim25",
    :schema_type => "EventAlarmExpressionComparison",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["attributeName", "SOAP::SOAPString"],
      ["operator", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfEventAlarmExpressionComparison,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "EventAlarmExpressionComparison") }
  )

  EncodedRegistry.register(
    :class => VimWs25::EventAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "EventAlarmExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["comparisons", "VimWs25::EventAlarmExpressionComparison[]", [0, nil]],
      ["eventType", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MetricAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "MetricAlarmExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operator", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["metric", "VimWs25::PerfMetricId"],
      ["yellow", "SOAP::SOAPInt", [0, 1]],
      ["yellowInterval", "SOAP::SOAPInt", [0, 1]],
      ["red", "SOAP::SOAPInt", [0, 1]],
      ["redInterval", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VimWs25::AlarmExpression"],
      ["action", "VimWs25::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VimWs25::AlarmSetting", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["creationEventId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSetting",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toleranceRange", "SOAP::SOAPInt"],
      ["reportingFrequency", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VimWs25::AlarmExpression"],
      ["action", "VimWs25::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VimWs25::AlarmSetting", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmState,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["overallStatus", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["acknowledged", "SOAP::SOAPBoolean", [0, 1]],
      ["acknowledgedByUser", "SOAP::SOAPString", [0, 1]],
      ["acknowledgedTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAlarmState,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AlarmState") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterAction,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterAction") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterActionHistory,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterActionHistory",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::ClusterAction"],
      ["time", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterActionHistory,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterActionHistory") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterAffinityRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAffinityRuleSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterAntiAffinityRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAntiAffinityRuleSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterAttemptedVmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAttemptedVmInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["task", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterAttemptedVmInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterAttemptedVmInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo"],
      ["dasVmConfig", "VimWs25::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VimWs25::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VimWs25::ClusterRuleInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["enableVmBehaviorOverrides", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmBehavior", "SOAP::SOAPString", [0, 1]],
      ["vmotionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsVmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsVmConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDrsVmConfigInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDrsVmConfigInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterConfigInfoEx,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigInfoEx",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo"],
      ["dasVmConfig", "VimWs25::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VimWs25::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VimWs25::ClusterRuleInfo[]", [0, nil]],
      ["dpmConfigInfo", "VimWs25::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfig", "VimWs25::ClusterDpmHostConfigInfo[]", [0, nil]],
      ["group", "VimWs25::ClusterGroupInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDpmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDpmConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultDpmBehavior", "SOAP::SOAPString", [0, 1]],
      ["hostPowerActionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDpmHostConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDpmHostConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDpmHostConfigInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDpmHostConfigInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VimWs25::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VimWs25::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VimWs25::ClusterRuleSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasVmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterDasVmConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDasVmConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDasVmConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsVmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsVmConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterDrsVmConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDrsVmConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDrsVmConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterRuleSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterRuleInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterRuleSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterRuleSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterConfigSpecEx,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigSpecEx",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VimWs25::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VimWs25::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VimWs25::ClusterRuleSpec[]", [0, nil]],
      ["dpmConfig", "VimWs25::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfigSpec", "VimWs25::ClusterDpmHostConfigSpec[]", [0, nil]],
      ["groupSpec", "VimWs25::ClusterGroupSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDpmHostConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDpmHostConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterDpmHostConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDpmHostConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDpmHostConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterGroupSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterGroupSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterGroupInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterGroupSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterGroupSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasAamHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAamHostInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostDasState", "VimWs25::ClusterDasAamNodeState[]", [0, nil]],
      ["primaryHosts", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasAamNodeState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAamNodeState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["configState", "SOAP::SOAPString"],
      ["runtimeState", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDasAamNodeState,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDasAamNodeState") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAdmissionControlInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAdmissionControlPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasAdvancedRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAdvancedRuntimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VimWs25::ClusterDasHostInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["hostMonitoring", "SOAP::SOAPString", [0, 1]],
      ["failoverLevel", "SOAP::SOAPInt", [0, 1]],
      ["admissionControlPolicy", "VimWs25::ClusterDasAdmissionControlPolicy", [0, 1]],
      ["admissionControlEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmSettings", "VimWs25::ClusterDasVmSettings", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numVcpus", "SOAP::SOAPInt"],
      ["cpuMHz", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["slots", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasFailoverLevelAdvancedRuntimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VimWs25::ClusterDasHostInfo", [0, 1]],
      ["slotInfo", "VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"],
      ["totalSlots", "SOAP::SOAPInt"],
      ["usedSlots", "SOAP::SOAPInt"],
      ["unreservedSlots", "SOAP::SOAPInt"],
      ["totalVms", "SOAP::SOAPInt"],
      ["totalHosts", "SOAP::SOAPInt"],
      ["totalGoodHosts", "SOAP::SOAPInt"],
      ["hostSlots", "VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasHostInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasHostRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasHostRecommendation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["drsRating", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasVmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["restartPriority", "SOAP::SOAPString", [0, 1]],
      ["powerOffOnIsolation", "SOAP::SOAPBoolean", [0, 1]],
      ["dasSettings", "VimWs25::ClusterDasVmSettings", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDasVmConfigInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDasVmConfigInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasVmSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmSettings",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["restartPriority", "SOAP::SOAPString", [0, 1]],
      ["isolationResponse", "SOAP::SOAPString", [0, 1]],
      ["vmToolsMonitoringSettings", "VimWs25::ClusterVmToolsMonitoringSettings", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsFaultsFaultsByVm,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsFaultsFaultsByVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDrsFaultsFaultsByVm,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDrsFaultsFaultsByVm") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsFaults,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsFaults",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["faultsByVm", "VimWs25::ClusterDrsFaultsFaultsByVm[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDrsFaults,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDrsFaults") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsMigration,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsMigration",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["cpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["memoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["source", "VimWs25::ManagedObjectReference"],
      ["sourceCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["sourceMemoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["destination", "VimWs25::ManagedObjectReference"],
      ["destinationCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["destinationMemoryLoad", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDrsMigration,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDrsMigration") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDrsRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsRecommendation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["migrationList", "VimWs25::ClusterDrsMigration[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterDrsRecommendation,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterDrsRecommendation") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverHostAdmissionControlInfoHostStatus",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["status", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterFailoverHostAdmissionControlInfoHostStatus") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverHostAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverHostAdmissionControlInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostStatus", "VimWs25::ClusterFailoverHostAdmissionControlInfoHostStatus[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverHostAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverHostAdmissionControlPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failoverHosts", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverLevelAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverLevelAdmissionControlInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentFailoverLevel", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverLevelAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverLevelAdmissionControlPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failoverLevel", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverResourcesAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverResourcesAdmissionControlInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentCpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["currentMemoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterFailoverResourcesAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverResourcesAdmissionControlPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["memoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterGroupInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterGroupInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterGroupInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterGroupInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterHostGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterHostGroup",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterHostPowerAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterHostPowerAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]],
      ["operationType", "SOAP::SOAPString"],
      ["powerConsumptionWatt", "SOAP::SOAPInt", [0, 1]],
      ["cpuCapacityMHz", "SOAP::SOAPInt", [0, 1]],
      ["memCapacityMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterHostRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterHostRecommendation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["rating", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterHostRecommendation,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterHostRecommendation") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterInitialPlacementAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterInitialPlacementAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]],
      ["targetHost", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterMigrationAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterMigrationAction",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]],
      ["drsMigration", "VimWs25::ClusterDrsMigration", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterNotAttemptedVmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterNotAttemptedVmInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterNotAttemptedVmInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterNotAttemptedVmInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterPowerOnVmResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterPowerOnVmResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["attempted", "VimWs25::ClusterAttemptedVmInfo[]", [0, nil]],
      ["notAttempted", "VimWs25::ClusterNotAttemptedVmInfo[]", [0, nil]],
      ["recommendations", "VimWs25::ClusterRecommendation[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterRecommendation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["prerequisite", "SOAP::SOAPString[]", [0, nil]],
      ["action", "VimWs25::ClusterAction[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterRecommendation,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterRecommendation") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterRuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterRuleInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfClusterRuleInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ClusterRuleInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterVmGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterVmGroup",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterVmHostRuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterVmHostRuleInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vmGroupName", "SOAP::SOAPString", [0, 1]],
      ["affineHostGroupName", "SOAP::SOAPString", [0, 1]],
      ["antiAffineHostGroupName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterVmToolsMonitoringSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterVmToolsMonitoringSettings",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["clusterSettings", "SOAP::SOAPBoolean", [0, 1]],
      ["failureInterval", "SOAP::SOAPInt", [0, 1]],
      ["minUpTime", "SOAP::SOAPInt", [0, 1]],
      ["maxFailures", "SOAP::SOAPInt", [0, 1]],
      ["maxFailureWindow", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VimWs25::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDVPortConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DVPortConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VimWs25::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSTrafficShapingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSTrafficShapingPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["enabled", "VimWs25::BoolPolicy", [0, 1]],
      ["averageBandwidth", "VimWs25::LongPolicy", [0, 1]],
      ["peakBandwidth", "VimWs25::LongPolicy", [0, 1]],
      ["burstSize", "VimWs25::LongPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSVendorSpecificConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSVendorSpecificConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["keyValue", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortSetting",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blocked", "VimWs25::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VimWs25::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DVSVendorSpecificConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortStatus",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["linkUp", "SOAP::SOAPBoolean"],
      ["blocked", "SOAP::SOAPBoolean"],
      ["vlanIds", "VimWs25::NumericRange[]", [0, nil]],
      ["trunkingMode", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["linkPeer", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["statusDetail", "SOAP::SOAPString", [0, 1]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2InactiveReasonNetwork", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortState,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["runtimeInfo", "VimWs25::DVPortStatus", [0, 1]],
      ["stats", "VimWs25::DistributedVirtualSwitchPortStatistics"],
      ["vendorSpecificState", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualPort,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPort",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VimWs25::DVPortConfigInfo"],
      ["dvsUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["proxyHost", "VimWs25::ManagedObjectReference", [0, 1]],
      ["connectee", "VimWs25::DistributedVirtualSwitchPortConnectee", [0, 1]],
      ["conflict", "SOAP::SOAPBoolean"],
      ["conflictPortKey", "SOAP::SOAPString", [0, 1]],
      ["state", "VimWs25::DVPortState", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]],
      ["lastStatusChange", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualPort,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualPort") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numPorts", "SOAP::SOAPInt", [0, 1]],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["policy", "VimWs25::DVPortgroupPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDVPortgroupConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DVPortgroupConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference", [0, 1]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["policy", "VimWs25::DVPortgroupPolicy"],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualPortgroupInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPortgroupInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupType", "SOAP::SOAPString"],
      ["uplinkPortgroup", "SOAP::SOAPBoolean"],
      ["portgroup", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualPortgroupInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualPortgroupInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSManagerDvsConfigTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSManagerDvsConfigTarget",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["distributedVirtualPortgroup", "VimWs25::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VimWs25::DistributedVirtualSwitchInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerCompatibilityResult,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerCompatibilityResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchManagerCompatibilityResult,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchManagerCompatibilityResult") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostContainer,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostContainer",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostDvsFilterSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchManagerHostDvsFilterSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostArrayFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostArrayFilter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostContainerFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostContainerFilter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["hostContainer", "VimWs25::DistributedVirtualSwitchManagerHostContainer"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostDvsMembershipFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostDvsMembershipFilter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerDvsProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerDvsProductSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["newSwitchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["backing", "VimWs25::DistributedVirtualSwitchHostMemberBacking", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchHostMemberConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostMemberConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberPnicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberPnicSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pnicDevice", "SOAP::SOAPString"],
      ["uplinkPortKey", "SOAP::SOAPString", [0, 1]],
      ["uplinkPortgroupKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchHostMemberPnicSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostMemberPnicSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberBacking",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberPnicBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberPnicBacking",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pnicSpec", "VimWs25::DistributedVirtualSwitchHostMemberPnicSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt"],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["backing", "VimWs25::DistributedVirtualSwitchHostMemberBacking"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMember,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMember",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["config", "VimWs25::DistributedVirtualSwitchHostMemberConfigInfo"],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["uplinkPortKey", "SOAP::SOAPString[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchHostMember,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostMember") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostProductSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["productLineId", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchHostProductSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostProductSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchKeyedOpaqueBlob",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["opaqueData", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchKeyedOpaqueBlob") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSNetworkResourcePoolAllocationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNetworkResourcePoolAllocationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VimWs25::SharesInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSNetworkResourcePoolConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNetworkResourcePoolConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["allocationInfo", "VimWs25::DVSNetworkResourcePoolAllocationInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDVSNetworkResourcePoolConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DVSNetworkResourcePoolConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSNetworkResourcePool,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNetworkResourcePool",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["allocationInfo", "VimWs25::DVSNetworkResourcePoolAllocationInfo"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDVSNetworkResourcePool,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DVSNetworkResourcePool") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortConnectee,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortConnectee",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["connectedEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["nicKey", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["addressHint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortConnection,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortConnection",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortCriteria,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortCriteria",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["connected", "SOAP::SOAPBoolean", [0, 1]],
      ["active", "SOAP::SOAPBoolean", [0, 1]],
      ["uplinkPort", "SOAP::SOAPBoolean", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference", [0, 1]],
      ["portgroupKey", "SOAP::SOAPString[]", [0, nil]],
      ["inside", "SOAP::SOAPBoolean", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortStatistics,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortStatistics",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["packetsInMulticast", "SOAP::SOAPLong"],
      ["packetsOutMulticast", "SOAP::SOAPLong"],
      ["bytesInMulticast", "SOAP::SOAPLong"],
      ["bytesOutMulticast", "SOAP::SOAPLong"],
      ["packetsInUnicast", "SOAP::SOAPLong"],
      ["packetsOutUnicast", "SOAP::SOAPLong"],
      ["bytesInUnicast", "SOAP::SOAPLong"],
      ["bytesOutUnicast", "SOAP::SOAPLong"],
      ["packetsInBroadcast", "SOAP::SOAPLong"],
      ["packetsOutBroadcast", "SOAP::SOAPLong"],
      ["bytesInBroadcast", "SOAP::SOAPLong"],
      ["bytesOutBroadcast", "SOAP::SOAPLong"],
      ["packetsInDropped", "SOAP::SOAPLong"],
      ["packetsOutDropped", "SOAP::SOAPLong"],
      ["packetsInException", "SOAP::SOAPLong"],
      ["packetsOutException", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchProductSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["build", "SOAP::SOAPString", [0, 1]],
      ["forwardingClass", "SOAP::SOAPString", [0, 1]],
      ["bundleId", "SOAP::SOAPString", [0, 1]],
      ["bundleUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDistributedVirtualSwitchProductSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DistributedVirtualSwitchProductSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSFeatureCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSFeatureCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting"],
      ["host", "VimWs25::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VimWs25::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["pvlanConfig", "VimWs25::VMwareDVSPvlanMapEntry[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt"],
      ["linkDiscoveryProtocolConfig", "VimWs25::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["host", "VimWs25::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VimWs25::DVSContactInfo", [0, 1]],
      ["pvlanConfigSpec", "VimWs25::VMwareDVSPvlanConfigSpec[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VimWs25::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareUplinkPortOrderPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareUplinkPortOrderPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["activeUplinkPort", "SOAP::SOAPString[]", [0, nil]],
      ["standbyUplinkPort", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSFailureCriteria,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSFailureCriteria",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["checkSpeed", "VimWs25::StringPolicy", [0, 1]],
      ["speed", "VimWs25::IntPolicy", [0, 1]],
      ["checkDuplex", "VimWs25::BoolPolicy", [0, 1]],
      ["fullDuplex", "VimWs25::BoolPolicy", [0, 1]],
      ["checkErrorPercent", "VimWs25::BoolPolicy", [0, 1]],
      ["percentage", "VimWs25::IntPolicy", [0, 1]],
      ["checkBeacon", "VimWs25::BoolPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmwareUplinkPortTeamingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareUplinkPortTeamingPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::StringPolicy", [0, 1]],
      ["reversePolicy", "VimWs25::BoolPolicy", [0, 1]],
      ["notifySwitches", "VimWs25::BoolPolicy", [0, 1]],
      ["rollingOrder", "VimWs25::BoolPolicy", [0, 1]],
      ["failureCriteria", "VimWs25::DVSFailureCriteria", [0, 1]],
      ["uplinkPortOrder", "VimWs25::VMwareUplinkPortOrderPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchVlanSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchVlanSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchPvlanSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchPvlanSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["pvlanId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchVlanIdSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchVlanIdSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchTrunkVlanSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchTrunkVlanSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "VimWs25::NumericRange[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVSSecurityPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSSecurityPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["allowPromiscuous", "VimWs25::BoolPolicy", [0, 1]],
      ["macChanges", "VimWs25::BoolPolicy", [0, 1]],
      ["forgedTransmits", "VimWs25::BoolPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSPortSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPortSetting",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blocked", "VimWs25::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VimWs25::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DVSVendorSpecificConfig", [0, 1]],
      ["vlan", "VimWs25::VmwareDistributedVirtualSwitchVlanSpec", [0, 1]],
      ["qosTag", "VimWs25::IntPolicy", [0, 1]],
      ["uplinkTeamingPolicy", "VimWs25::VmwareUplinkPortTeamingPolicy", [0, 1]],
      ["securityPolicy", "VimWs25::DVSSecurityPolicy", [0, 1]],
      ["txUplink", "VimWs25::BoolPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSPortgroupPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPortgroupPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"],
      ["vlanOverrideAllowed", "SOAP::SOAPBoolean"],
      ["uplinkTeamingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["securityPolicyOverrideAllowed", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSPvlanConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPvlanConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pvlanEntry", "VimWs25::VMwareDVSPvlanMapEntry"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVMwareDVSPvlanConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VMwareDVSPvlanConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VMwareDVSPvlanMapEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPvlanMapEntry",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["primaryVlanId", "SOAP::SOAPInt"],
      ["secondaryVlanId", "SOAP::SOAPInt"],
      ["pvlanType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVMwareDVSPvlanMapEntry,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VMwareDVSPvlanMapEntry") }
  )

  EncodedRegistry.register(
    :class => VimWs25::Event,
    :schema_ns => "urn:vim25",
    :schema_type => "Event",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfEvent,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "Event") }
  )

  EncodedRegistry.register(
    :class => VimWs25::EventEx,
    :schema_ns => "urn:vim25",
    :schema_type => "EventEx",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["eventTypeId", "SOAP::SOAPString"],
      ["severity", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["arguments", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["objectId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralHostInfoEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralHostInfoEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralHostWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralHostWarningEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralHostErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralHostErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralVmInfoEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralVmInfoEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralVmWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralVmWarningEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralVmErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralVmErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GeneralUserEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralUserEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedEntityEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendedEventPair,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedEventPair",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfExtendedEventPair,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ExtendedEventPair") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString"],
      ["managedObject", "VimWs25::ManagedObjectReference"],
      ["data", "VimWs25::ExtendedEventPair[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HealthStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HealthStatusChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["componentId", "SOAP::SOAPString"],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"],
      ["componentName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInventoryUnreadableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInventoryUnreadableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatacenterEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatacenterCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::FolderEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatacenterRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterRenamedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ServerStartedSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ServerStartedSessionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserLoginSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UserLoginSessionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserLogoutSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UserLogoutSessionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::BadUsernameSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "BadUsernameSessionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlreadyAuthenticatedSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyAuthenticatedSessionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoAccessUserEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NoAccessUserEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SessionTerminatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionTerminatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sessionId", "SOAP::SOAPString"],
      ["terminatedUsername", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GlobalMessageChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GlobalMessageChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InfoUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InfoUpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WarningUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "WarningUpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ErrorUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ErrorUpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UserUpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDisconnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSyncFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSyncFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConnectionLostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectionLostEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostReconnectionFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostReconnectionFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedNoConnectionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNoConnectionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedBadUsernameEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedBadUsernameEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedBadVersionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedBadVersionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedAlreadyManagedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedAlreadyManagedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["serverName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedNoLicenseEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNoLicenseEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedNetworkErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNetworkErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedCcagentUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedCcagentUpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedBadCcagentEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedBadCcagentEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedAccountFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedAccountFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedNoAccessEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNoAccessEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostShutdownEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostShutdownEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedNotFoundEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNotFoundEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCnxFailedTimeoutEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedTimeoutEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUpgradeFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnteringMaintenanceModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteringMaintenanceModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnteredMaintenanceModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteredMaintenanceModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExitMaintenanceModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitMaintenanceModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CanceledHostOperationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CanceledHostOperationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TimedOutHostOperationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TimedOutHostOperationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasDisabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasEnablingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasEnablingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasDisablingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasDisablingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasOkEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasOkEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VcAgentUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUpgradedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VcAgentUninstalledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUninstalledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VcAgentUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUpgradeFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VcAgentUninstallFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUninstallFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAddedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAddFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAddFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldIP", "SOAP::SOAPString"],
      ["newIP", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnteringStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteringStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsEnteringStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsEnteringStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EnteredStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteredStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsEnteredStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsEnteredStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExitingStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitingStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsExitingStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsExitingStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExitedStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitedStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsExitedStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsExitedStandbyModeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExitStandbyModeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitStandbyModeFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsExitStandbyModeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsExitStandbyModeFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UpdatedAgentBeingRestartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatedAgentBeingRestartedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AccountCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AccountCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AccountRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AccountRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["account", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserPasswordChanged,
    :schema_ns => "urn:vim25",
    :schema_type => "UserPasswordChanged",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AccountUpdatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AccountUpdatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserAssignedToGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "UserAssignedToGroup",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserUnassignedFromGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "UserUnassignedFromGroup",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastorePrincipalConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastorePrincipalConfigured",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipal", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMFSDatastoreCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMFSDatastoreCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NASDatastoreCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NASDatastoreCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalDatastoreCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalDatastoreCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMFSDatastoreExtendedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMFSDatastoreExtendedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMFSDatastoreExpandedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMFSDatastoreExpandedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreRemovedOnHostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreRemovedOnHostEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreRenamedOnHostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreRenamedOnHostEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DuplicateIpDetectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DuplicateIpDetectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["duplicateIP", "SOAP::SOAPString"],
      ["macAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreDiscoveredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreDiscoveredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsResourceConfigureFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsResourceConfigureFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsResourceConfigureSyncedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsResourceConfigureSyncedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostGetShortNameFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostGetShortNameFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostShortNameToIpFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostShortNameToIpFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpToShortNameFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpToShortNameFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPrimaryAgentNotShortNameEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPrimaryAgentNotShortNameEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["primaryAgent", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNotInClusterEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNotInClusterEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIsolationIpPingFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIsolationIpPingFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolationIp", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpInconsistentEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpInconsistentEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["ipAddress2", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUserWorldSwapNotEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUserWorldSwapNotEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNonCompliantEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNonCompliantEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCompliantEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCompliantEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostComplianceCheckedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostComplianceCheckedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterComplianceCheckedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterComplianceCheckedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileAssociatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileAssociatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileDissociatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDissociatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigAppliedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigAppliedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileReferenceHostChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileReferenceHostChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"],
      ["referenceHost", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProfileAppliedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileAppliedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostShortNameInconsistentEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostShortNameInconsistentEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"],
      ["shortName2", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNoRedundantManagementNetworkEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNoRedundantManagementNetworkEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNoAvailableNetworksEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNoAvailableNetworksEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostExtraNetworksEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostExtraNetworksEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNoHAEnabledPortGroupsEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNoHAEnabledPortGroupsEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMissingNetworksEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMissingNetworksEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VnicPortArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "VnicPortArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vnic", "SOAP::SOAPString"],
      ["port", "VimWs25::DistributedVirtualSwitchPortConnection"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVnicPortArgument,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VnicPortArgument") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVnicConnectedToCustomizedDVPortEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVnicConnectedToCustomizedDVPortEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["vnic", "VimWs25::VnicPortArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GhostDvsProxySwitchDetectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GhostDvsProxySwitchDetectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GhostDvsProxySwitchRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GhostDvsProxySwitchRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPoweredOffEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPoweredOffEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPoweredOnEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPoweredOnEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSuspendedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSuspendedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmStartingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmStoppingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStoppingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSuspendingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSuspendingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmResumingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResumingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDisconnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRemoteConsoleConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRemoteConsoleConnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRemoteConsoleDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRemoteConsoleDisconnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDiscoveredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiscoveredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmOrphanedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmOrphanedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VimWs25::VirtualMachineConfigSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmStartRecordingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartRecordingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmEndRecordingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEndRecordingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmStartReplayingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartReplayingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmEndReplayingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEndReplayingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRegisteredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRegisteredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmAutoRenameEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAutoRenameEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingHotMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingHotMigratedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmResettingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResettingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmStaticMacConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStaticMacConflictEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMacConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMacConflictEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingDeployedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingDeployedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VimWs25::VmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDeployFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDeployFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destDatastore", "VimWs25::EntityEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDeployedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDeployedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VimWs25::VmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMacChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMacChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["oldMac", "SOAP::SOAPString"],
      ["newMac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMacAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMacAssignedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUuidConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUuidConflictEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmInstanceUuidConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmInstanceUuidConflictEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingMigratedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedMigrateEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedMigrateEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMigratedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUnsupportedStartingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUnsupportedStartingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsVmMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsVmMigratedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsVmPoweredOnEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsVmPoweredOnEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsRuleViolationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRuleViolationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsRuleComplianceEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRuleComplianceEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRelocateSpecEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelocateSpecEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingRelocatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingRelocatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRelocatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelocatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRelocateFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelocateFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmEmigratingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEmigratingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmCloneEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmCloneEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingClonedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingClonedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VimWs25::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmBeingClonedNoFolderEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingClonedNoFolderEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmCloneFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmCloneFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VimWs25::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VimWs25::HostEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmClonedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmClonedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceVm", "VimWs25::VmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmResourceReallocatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResourceReallocatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRenamedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDateRolledBackEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDateRolledBackEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmNoNetworkAccessEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNoNetworkAccessEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDiskFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["disk", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToPowerOnEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToPowerOnEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToPowerOffEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToPowerOffEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToSuspendEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToSuspendEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToResetEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToResetEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToShutdownGuestEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToShutdownGuestEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToRebootGuestEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToRebootGuestEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedToStandbyGuestEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToStandbyGuestEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmGuestShutdownEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmGuestShutdownEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmGuestRebootEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmGuestRebootEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmGuestStandbyEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmGuestStandbyEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUpgradingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUpgradingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUpgradeCompleteEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUpgradeCompleteEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUpgradeFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRestartedOnAlternateHostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRestartedOnAlternateHostEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VimWs25::VirtualMachineConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMessageEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMessageEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMessageWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMessageWarningEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMessageErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMessageErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigMissingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigMissingEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPowerOffOnIsolationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPowerOffOnIsolationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmShutdownOnIsolationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmShutdownOnIsolationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VimWs25::HostEventArgument"],
      ["shutdownResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailoverFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailoverFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDasBeingResetEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasBeingResetEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDasResetFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasResetFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMaxRestartCountReached,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMaxRestartCountReached",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMaxFTRestartCountReached,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMaxFTRestartCountReached",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDasBeingResetWithScreenshotEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasBeingResetWithScreenshotEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["screenshotFilePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotEnoughResourcesToStartVmEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughResourcesToStartVmEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUuidAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUuidAssignedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmInstanceUuidAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmInstanceUuidAssignedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmUuidChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUuidChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldUuid", "SOAP::SOAPString"],
      ["newUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmInstanceUuidChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmInstanceUuidChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldInstanceUuid", "SOAP::SOAPString"],
      ["newInstanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmWwnConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnConflictEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVms", "VimWs25::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VimWs25::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmAcquiredMksTicketEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAcquiredMksTicketEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmAcquiredTicketEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAcquiredTicketEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostWwnConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostWwnConflictEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["conflictedVms", "VimWs25::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VimWs25::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmWwnAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnAssignedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["nodeWwns", "SOAP::SOAPLong[]", [1, nil]],
      ["portWwns", "SOAP::SOAPLong[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmWwnChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSecondaryAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryAddedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceTurnedOffEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceTurnedOffEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceStateChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceStateChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldState", "SOAP::SOAPString"],
      ["newState", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSecondaryDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryDisabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSecondaryDisabledBySystemEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryDisabledBySystemEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSecondaryEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmStartingSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartingSecondaryEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSecondaryStartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryStartedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedUpdatingSecondaryConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedUpdatingSecondaryConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedStartingSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedStartingSecondaryEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmTimedoutStartingSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmTimedoutStartingSecondaryEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["timeout", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmNoCompatibleHostForSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNoCompatibleHostForSecondaryEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPrimaryFailoverEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPrimaryFailoverEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceVmTerminatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceVmTerminatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostWwnChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostWwnChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAdminDisableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAdminDisableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAdminEnableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAdminEnableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostEnableAdminFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostEnableAdminFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["permissions", "VimWs25::Permission[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedRelayoutOnVmfs2DatastoreEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedRelayoutOnVmfs2DatastoreEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedRelayoutEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedRelayoutEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRelayoutSuccessfulEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelayoutSuccessfulEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmRelayoutUpToDateEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelayoutUpToDateEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPoweringOnWithCustomizedDVPortEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPoweringOnWithCustomizedDVPortEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["vnic", "VimWs25::VnicPortArgument[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDasUpdateErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasUpdateErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoMaintenanceModeDrsRecommendationForVM,
    :schema_ns => "urn:vim25",
    :schema_type => "NoMaintenanceModeDrsRecommendationForVM",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDasUpdateOkEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasUpdateOkEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskStartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskStartedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskCompletedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskEmailCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEmailCompletedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskEmailFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEmailFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmStatusChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["source", "VimWs25::ManagedEntityEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["from", "SOAP::SOAPString"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmActionTriggeredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmActionTriggeredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["source", "VimWs25::ManagedEntityEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmEmailCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEmailCompletedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmEmailFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEmailFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmSnmpCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSnmpCompletedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmSnmpFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSnmpFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmScriptCompleteEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmScriptCompleteEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmScriptFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmScriptFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldDefEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldDefAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefAddedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldDefRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldDefRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefRenamedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomFieldValueChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldValueChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AuthorizationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PermissionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PermissionAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionAddedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VimWs25::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PermissionUpdatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionUpdatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VimWs25::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PermissionRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RoleEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RoleAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleAddedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RoleUpdatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleUpdatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RoleRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleRemovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreDestroyedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreRenamedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreCapacityIncreasedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreCapacityIncreasedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["oldCapacity", "SOAP::SOAPLong"],
      ["newCapacity", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreDuplicatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreDuplicatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreFileEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreFileCopiedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileCopiedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VimWs25::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreFileMovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileMovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VimWs25::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreFileDeletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileDeletedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NonVIWorkloadDetectedOnDatastoreEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NonVIWorkloadDetectedOnDatastoreEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreIORMReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreIORMReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VimWs25::TaskInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskTimeoutEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskTimeoutEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VimWs25::TaskInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ServerLicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ServerLicenseExpiredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["product", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLicenseExpiredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionLicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionLicenseExpiredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoLicenseEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NoLicenseEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VimWs25::LicenseFeatureInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseServerUnavailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerUnavailableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseServerAvailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerAvailableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseExpiredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VimWs25::LicenseFeatureInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidEditionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidEditionEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInventoryFullEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInventoryFullEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseRestrictedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseRestrictedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IncorrectHostInformationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "IncorrectHostInformationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnlicensedVirtualMachinesEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UnlicensedVirtualMachinesEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["unlicensed", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnlicensedVirtualMachinesFoundEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UnlicensedVirtualMachinesFoundEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AllVirtualMachinesLicensedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AllVirtualMachinesLicensedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseNonComplianceEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseNonComplianceEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationWarningEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationHostWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationHostWarningEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationHostErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationHostErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationResourceWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationResourceWarningEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstPool", "VimWs25::ResourcePoolEventArgument"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationResourceErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationResourceErrorEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstPool", "VimWs25::ResourcePoolEventArgument"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasDisabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasAdmissionControlDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAdmissionControlDisabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasAdmissionControlEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAdmissionControlEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasHostFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasHostFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["failedHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasHostIsolatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasHostIsolatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolatedHost", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasClusterIsolatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasClusterIsolatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasAgentUnavailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAgentUnavailableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasAgentFoundEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAgentFoundEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientFailoverResourcesEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientFailoverResourcesEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FailoverLevelRestored,
    :schema_ns => "urn:vim25",
    :schema_type => "FailoverLevelRestored",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterOvercommittedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterOvercommittedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostOvercommittedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostOvercommittedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterStatusChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStatusChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::FolderEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDestroyedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["behavior", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsDisabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMonitoringStateChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMonitoringStateChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmHealthMonitoringStateChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmHealthMonitoringStateChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"],
      ["parent", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolDestroyedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolMovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolMovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"],
      ["oldParent", "VimWs25::ResourcePoolEventArgument"],
      ["newParent", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceViolatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceViolatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmResourcePoolMovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResourcePoolMovedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldParent", "VimWs25::ResourcePoolEventArgument"],
      ["newParent", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TemplateUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateUpgradeEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TemplateBeingUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateBeingUpgradedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TemplateUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateUpgradeFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TemplateUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateUpgradedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationStartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationStartedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSucceeded,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSucceeded",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationUnknownFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownFailure",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSysprepFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprepFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]],
      ["sysprepVersion", "SOAP::SOAPString"],
      ["systemVersion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationLinuxIdentityFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLinuxIdentityFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationNetworkSetupFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationNetworkSetupFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LockerMisconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LockerMisconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LockerReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LockerReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldDatastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["newDatastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoDatastoresConfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDatastoresConfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AdminPasswordNotChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AdminPasswordNotChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalTSMEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalTSMEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoteTSMEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoteTSMEnabledEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VimAccountPasswordChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VimAccountPasswordChangedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IScsiBootFailureEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "IScsiBootFailureEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::FolderEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsRenamedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VimWs25::DVSConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsUpgradeAvailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradeAvailableEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsUpgradeInProgressEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradeInProgressEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsUpgradeRejectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradeRejectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsHostJoinedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostJoinedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostJoined", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsHostLeftEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostLeftEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostLeft", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsOutOfSyncHostArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsOutOfSyncHostArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["outOfSyncHost", "VimWs25::HostEventArgument"],
      ["configParamters", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDvsOutOfSyncHostArgument,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DvsOutOfSyncHostArgument") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OutOfSyncDvsHost,
    :schema_ns => "urn:vim25",
    :schema_type => "OutOfSyncDvsHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VimWs25::DvsOutOfSyncHostArgument[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsHostWentOutOfSyncEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostWentOutOfSyncEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VimWs25::DvsOutOfSyncHostArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsHostBackInSyncEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostBackInSyncEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostBackInSync", "VimWs25::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsHostStatusUpdated,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostStatusUpdated",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostMember", "VimWs25::HostEventArgument"],
      ["oldStatus", "SOAP::SOAPString", [0, 1]],
      ["newStatus", "SOAP::SOAPString", [0, 1]],
      ["oldStatusDetail", "SOAP::SOAPString", [0, 1]],
      ["newStatusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortDeletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortDeletedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortConnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VimWs25::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortDisconnectedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VimWs25::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortLinkUpEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortLinkUpEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortLinkDownEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortLinkDownEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortJoinPortgroupEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortJoinPortgroupEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortLeavePortgroupEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortLeavePortgroupEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortBlockedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortBlockedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortUnblockedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortUnblockedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortEnteredPassthruEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortEnteredPassthruEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsPortExitedPassthruEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortExitedPassthruEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsDestroyedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsMergedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsMergedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sourceDvs", "VimWs25::DvsEventArgument"],
      ["destinationDvs", "VimWs25::DvsEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupCreatedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupRenamedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupReconfiguredEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VimWs25::DVPortgroupConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortgroupDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupDestroyedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsInvocationFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsInvocationFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsRecoveredFromFailureEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRecoveredFromFailureEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmReloadFromPathEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmReloadFromPathEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmReloadFromPathFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmReloadFromPathFailedEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "EventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RoleEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EntityEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "EntityEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ManagedEntityEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedEntityEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FolderEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "FolderEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["folder", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatacenterEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComputeResourceEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["computeResource", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourcePoolEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourcePool", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "HostEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostEventArgument,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostEventArgument") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VmEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVmEventArgument,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VmEventArgument") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlarmEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["alarm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profile", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsEventArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventArgDesc,
    :schema_ns => "urn:vim25",
    :schema_type => "EventArgDesc",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["description", "VimWs25::ElementDescription", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfEventArgDesc,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "EventArgDesc") }
  )

  EncodedRegistry.register(
    :class => VimWs25::EventDescriptionEventDetail,
    :schema_ns => "urn:vim25",
    :schema_type => "EventDescriptionEventDetail",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString"],
      ["formatOnDatacenter", "SOAP::SOAPString"],
      ["formatOnComputeResource", "SOAP::SOAPString"],
      ["formatOnHost", "SOAP::SOAPString"],
      ["formatOnVm", "SOAP::SOAPString"],
      ["fullFormat", "SOAP::SOAPString"],
      ["longDescription", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfEventDescriptionEventDetail,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "EventDescriptionEventDetail") }
  )

  EncodedRegistry.register(
    :class => VimWs25::EventDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "EventDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["category", "VimWs25::ElementDescription[]", [1, nil]],
      ["eventInfo", "VimWs25::EventDescriptionEventDetail[]", [1, nil]],
      ["enumeratedTypes", "VimWs25::EnumDescription[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventFilterSpecByEntity,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecByEntity",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["recursion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventFilterSpecByTime,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecByTime",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventFilterSpecByUsername,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecByUsername",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EventFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::EventFilterSpecByEntity", [0, 1]],
      ["time", "VimWs25::EventFilterSpecByTime", [0, 1]],
      ["userName", "VimWs25::EventFilterSpecByUsername", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt", [0, 1]],
      ["alarm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VimWs25::ManagedObjectReference", [0, 1]],
      ["disableFullMessage", "SOAP::SOAPBoolean", [0, 1]],
      ["category", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["eventTypeId", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ActiveDirectoryFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ActiveDirectoryFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AdminDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "AdminDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AdminNotDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "AdminNotDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AffinityConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "AffinityConfigured",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["configuredAffinity", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AgentInstallFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "AgentInstallFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["statusCode", "SOAP::SOAPInt", [0, 1]],
      ["installerOutput", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlreadyBeingManaged,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyBeingManaged",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlreadyConnected,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyConnected",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlreadyExists,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyExists",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AlreadyUpgraded,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyUpgraded",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ApplicationQuiesceFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplicationQuiesceFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AuthMinimumAdminPermission,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthMinimumAdminPermission",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::BlockedByFirewall,
    :schema_ns => "urn:vim25",
    :schema_type => "BlockedByFirewall",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessFile,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessFile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessLocalSource,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessLocalSource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessNetwork,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessNetwork",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessVmComponent,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmComponent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessVmConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessVmDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAccessVmDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmAsStandalone,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAddHostWithFTVmAsStandalone",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmToDifferentCluster,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAddHostWithFTVmToDifferentCluster",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmToNonHACluster,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAddHostWithFTVmToNonHACluster",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotChangeDrsBehaviorForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotChangeDrsBehaviorForFtSecondary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotChangeHaSettingsForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotChangeHaSettingsForFtSecondary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotCreateFile,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotCreateFile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotDecryptPasswords,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDecryptPasswords",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotDeleteFile,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDeleteFile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotDisableDrsOnClustersWithVApps,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDisableDrsOnClustersWithVApps",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotDisableSnapshot,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDisableSnapshot",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotDisconnectHostWithFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDisconnectHostWithFaultToleranceVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotModifyConfigCpuRequirements,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotModifyConfigCpuRequirements",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotMoveFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotMoveFaultToleranceVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["moveType", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotMoveHostWithFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotMoveHostWithFaultToleranceVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClockSkew,
    :schema_ns => "urn:vim25",
    :schema_type => "ClockSkew",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CloneFromSnapshotNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneFromSnapshotNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConcurrentAccess,
    :schema_ns => "urn:vim25",
    :schema_type => "ConcurrentAccess",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConnectedIso,
    :schema_ns => "urn:vim25",
    :schema_type => "ConnectedIso",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["cdrom", "VimWs25::VirtualCdrom"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CpuCompatibilityUnknown,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuCompatibilityUnknown",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CpuHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuHotPlugNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CpuIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuIncompatible",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CpuIncompatible1ECX,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuIncompatible1ECX",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["sse3", "SOAP::SOAPBoolean"],
      ["ssse3", "SOAP::SOAPBoolean"],
      ["sse41", "SOAP::SOAPBoolean"],
      ["sse42", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CpuIncompatible81EDX,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuIncompatible81EDX",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["nx", "SOAP::SOAPBoolean"],
      ["ffxsr", "SOAP::SOAPBoolean"],
      ["rdtscp", "SOAP::SOAPBoolean"],
      ["lm", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationFault,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationPending,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationPending",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DasConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DasConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["output", "SOAP::SOAPString", [0, 1]],
      ["event", "VimWs25::Event[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatabaseError,
    :schema_ns => "urn:vim25",
    :schema_type => "DatabaseError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatacenterMismatchArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterMismatchArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["inputDatacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDatacenterMismatchArgument,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DatacenterMismatchArgument") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DatacenterMismatch,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterMismatch",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidArgument", "VimWs25::DatacenterMismatchArgument[]", [1, nil]],
      ["expectedDatacenter", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreNotWritableOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreNotWritableOnHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DestinationSwitchFull,
    :schema_ns => "urn:vim25",
    :schema_type => "DestinationSwitchFull",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceBackingNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceBackingNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceControllerNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceControllerNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["controller", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceHotPlugNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceUnsupportedForVmPlatform,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceUnsupportedForVmPlatform",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceUnsupportedForVmVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceUnsupportedForVmVersion",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["currentVersion", "SOAP::SOAPString"],
      ["expectedVersion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisableAdminNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableAdminNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisallowedDiskModeChange,
    :schema_ns => "urn:vim25",
    :schema_type => "DisallowedDiskModeChange",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisallowedMigrationDeviceAttached,
    :schema_ns => "urn:vim25",
    :schema_type => "DisallowedMigrationDeviceAttached",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DisallowedOperationOnFailoverHost,
    :schema_ns => "urn:vim25",
    :schema_type => "DisallowedOperationOnFailoverHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DiskMoveTypeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskMoveTypeNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DomainNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "DomainNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]],
      ["domainName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsDisabledOnVm,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsDisabledOnVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsVmotionIncompatibleFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsVmotionIncompatibleFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DuplicateName,
    :schema_ns => "urn:vim25",
    :schema_type => "DuplicateName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["object", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsNotAuthorized,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsNotAuthorized",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sessionExtensionKey", "SOAP::SOAPString", [0, 1]],
      ["dvsExtensionKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsOperationBulkFaultFaultOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsOperationBulkFaultFaultOnHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDvsOperationBulkFaultFaultOnHost,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DvsOperationBulkFaultFaultOnHost") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsOperationBulkFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsOperationBulkFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostFault", "VimWs25::DvsOperationBulkFaultFaultOnHost[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsScopeViolated,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsScopeViolated",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["scope", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUFeaturesForMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUFeaturesForMode",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUModel,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUModel",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUModelForMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUModelForMode",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUVendor,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUVendor",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["clusterCPUVendor", "SOAP::SOAPString"],
      ["hostCPUVendor", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUVendorUnknown,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUVendorUnknown",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostDisconnected,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedHostDisconnected",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostSoftware,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedHostSoftware",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostSoftwareForMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedHostSoftwareForMode",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EVCAdmissionFailedVmActive,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedVmActive",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::EightHostLimitViolated,
    :schema_ns => "urn:vim25",
    :schema_type => "EightHostLimitViolated",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExpiredAddonLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpiredAddonLicense",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExpiredEditionLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpiredEditionLicense",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExpiredFeatureLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpiredFeatureLicense",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ExtendedFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["faultTypeId", "SOAP::SOAPString"],
      ["data", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FailToLockFaultToleranceVMs,
    :schema_ns => "urn:vim25",
    :schema_type => "FailToLockFaultToleranceVMs",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["alreadyLockedVm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceAntiAffinityViolated,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceAntiAffinityViolated",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceCannotEditMem,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceCannotEditMem",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceCpuIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceCpuIncompatible",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["model", "SOAP::SOAPBoolean"],
      ["family", "SOAP::SOAPBoolean"],
      ["stepping", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceNeedsThickDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceNeedsThickDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceNotLicensed,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceNotLicensed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceNotSameBuild,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceNotSameBuild",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["build", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultTolerancePrimaryPowerOnNotAttempted,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultTolerancePrimaryPowerOnNotAttempted",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["secondaryVm", "VimWs25::ManagedObjectReference"],
      ["primaryVm", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileAlreadyExists,
    :schema_ns => "urn:vim25",
    :schema_type => "FileAlreadyExists",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileBackedPortNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "FileBackedPortNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileFault,
    :schema_ns => "urn:vim25",
    :schema_type => "FileFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileLocked,
    :schema_ns => "urn:vim25",
    :schema_type => "FileLocked",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "FileNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileNotWritable,
    :schema_ns => "urn:vim25",
    :schema_type => "FileNotWritable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileTooLarge,
    :schema_ns => "urn:vim25",
    :schema_type => "FileTooLarge",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FilesystemQuiesceFault,
    :schema_ns => "urn:vim25",
    :schema_type => "FilesystemQuiesceFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FtIssuesOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "FtIssuesOnHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString"],
      ["errors", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FullStorageVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "FullStorageVMotionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GenericDrsFault,
    :schema_ns => "urn:vim25",
    :schema_type => "GenericDrsFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostFaults", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GenericVmConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "GenericVmConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HAErrorsAtDest,
    :schema_ns => "urn:vim25",
    :schema_type => "HAErrorsAtDest",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["failure", "VimWs25::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConnectFault,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInDomain,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInDomain",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForFaultTolerance",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIncompatibleForRecordReplay,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForRecordReplay",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInventoryFull,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInventoryFull",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPowerOpFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPowerOpFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HotSnapshotMoveNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "HotSnapshotMoveNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IDEDiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "IDEDiskNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IORMNotSupportedHostOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "IORMNotSupportedHostOnDatastore",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InUseFeatureManipulationDisallowed,
    :schema_ns => "urn:vim25",
    :schema_type => "InUseFeatureManipulationDisallowed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InaccessibleDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "InaccessibleDatastore",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IncompatibleDefaultDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "IncompatibleDefaultDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IncompatibleHostForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "IncompatibleHostForFtSecondary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IncompatibleSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "IncompatibleSetting",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["conflictingProperty", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IncorrectFileType,
    :schema_ns => "urn:vim25",
    :schema_type => "IncorrectFileType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IncorrectHostInformation,
    :schema_ns => "urn:vim25",
    :schema_type => "IncorrectHostInformation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IndependentDiskVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "IndependentDiskVMotionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientCpuResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientCpuResourcesFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientFailoverResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientFailoverResourcesFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientHostCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientHostCapacityFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientHostCpuCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientHostCpuCapacityFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientHostMemoryCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientHostMemoryCapacityFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientMemoryResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientMemoryResourcesFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientPerCpuCapacity,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientPerCpuCapacity",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientResourcesFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientStandbyCpuResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientStandbyCpuResource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientStandbyMemoryResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientStandbyMemoryResource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InsufficientStandbyResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientStandbyResource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidAffinitySettingFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidAffinitySettingFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidBmcRole,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidBmcRole",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidBundle,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidBundle",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidClientCertificate,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidClientCertificate",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidController,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["controllerKey", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDasRestartPriorityForFtVm,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDasRestartPriorityForFtVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDatastore",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDatastorePath,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDatastorePath",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDeviceBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDeviceBacking",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDeviceOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDeviceOperation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["badOp", "SOAP::SOAPString", [0, 1]],
      ["badFileOp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDeviceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDeviceSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDiskFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDiskFormat",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidDrsBehaviorForFtVm,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDrsBehaviorForFtVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidEditionLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidEditionLicense",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidEvent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidFolder,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidFolder",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidFormat",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidHostName,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidHostName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidHostState,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidHostState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidIndexArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidIndexArgument",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidIpmiLoginInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidIpmiLoginInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidIpmiMacAddress,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidIpmiMacAddress",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["userProvidedMacAddress", "SOAP::SOAPString"],
      ["observedMacAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidLicense",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseContent", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidLocale,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidLocale",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidLogin,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidLogin",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidName,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidNasCredentials,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidNasCredentials",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidNetworkInType,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidNetworkInType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidNetworkResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidNetworkResource",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidOperationOnSecondaryVm,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidOperationOnSecondaryVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidPowerState,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPowerState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["requestedState", "SOAP::SOAPString", [0, 1]],
      ["existingState", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidPrivilege,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPrivilege",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["privilege", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidPropertyType,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPropertyType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPropertyValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidResourcePoolStructureFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidResourcePoolStructureFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidSnapshotFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidSnapshotFormat",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidState,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InvalidVmConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidVmConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::InventoryHasStandardAloneHosts,
    :schema_ns => "urn:vim25",
    :schema_type => "InventoryHasStandardAloneHosts",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hosts", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IpHostnameGeneratorError,
    :schema_ns => "urn:vim25",
    :schema_type => "IpHostnameGeneratorError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LegacyNetworkInterfaceInUse,
    :schema_ns => "urn:vim25",
    :schema_type => "LegacyNetworkInterfaceInUse",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseAssignmentFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAssignmentFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseDowngradeDisallowed,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseDowngradeDisallowed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["edition", "SOAP::SOAPString"],
      ["entityId", "SOAP::SOAPString"],
      ["features", "VimWs25::KeyAnyValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseEntityNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseEntityNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseExpired,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseExpired",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseKeyEntityMismatch,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseKeyEntityMismatch",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseRestricted,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseRestricted",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseServerUnavailable,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerUnavailable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseSourceUnavailable,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseSourceUnavailable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseSource", "VimWs25::LicenseSource"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LimitExceeded,
    :schema_ns => "urn:vim25",
    :schema_type => "LimitExceeded",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["limit", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LinuxVolumeNotClean,
    :schema_ns => "urn:vim25",
    :schema_type => "LinuxVolumeNotClean",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LogBundlingFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "LogBundlingFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MaintenanceModeFileMove,
    :schema_ns => "urn:vim25",
    :schema_type => "MaintenanceModeFileMove",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MemoryHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MemoryHotPlugNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MemorySizeNotRecommended,
    :schema_ns => "urn:vim25",
    :schema_type => "MemorySizeNotRecommended",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MemorySizeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MemorySizeNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MemorySnapshotOnIndependentDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "MemorySnapshotOnIndependentDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodAlreadyDisabledFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodAlreadyDisabledFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sourceId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MethodDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["source", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationFeatureNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationFeatureNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MigrationNotReady,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationNotReady",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MismatchedBundle,
    :schema_ns => "urn:vim25",
    :schema_type => "MismatchedBundle",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["bundleUuid", "SOAP::SOAPString"],
      ["hostUuid", "SOAP::SOAPString"],
      ["bundleBuildNumber", "SOAP::SOAPInt"],
      ["hostBuildNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MismatchedNetworkPolicies,
    :schema_ns => "urn:vim25",
    :schema_type => "MismatchedNetworkPolicies",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MismatchedVMotionNetworkNames,
    :schema_ns => "urn:vim25",
    :schema_type => "MismatchedVMotionNetworkNames",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sourceNetwork", "SOAP::SOAPString"],
      ["destNetwork", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingBmcSupport,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingBmcSupport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingController,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingLinuxCustResources,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingLinuxCustResources",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingNetworkIpConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingNetworkIpConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingPowerOffConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingPowerOffConfiguration",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingPowerOnConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingPowerOnConfiguration",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MissingWindowsCustResources,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingWindowsCustResources",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MountError,
    :schema_ns => "urn:vim25",
    :schema_type => "MountError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["diskIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MultipleCertificatesVerifyFaultThumbprintData,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipleCertificatesVerifyFaultThumbprintData",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfMultipleCertificatesVerifyFaultThumbprintData,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "MultipleCertificatesVerifyFaultThumbprintData") }
  )

  EncodedRegistry.register(
    :class => VimWs25::MultipleCertificatesVerifyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipleCertificatesVerifyFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["thumbprintData", "VimWs25::MultipleCertificatesVerifyFaultThumbprintData[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MultipleSnapshotsNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipleSnapshotsNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NasConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "NasConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NasConnectionLimitReached,
    :schema_ns => "urn:vim25",
    :schema_type => "NasConnectionLimitReached",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NasSessionCredentialConflict,
    :schema_ns => "urn:vim25",
    :schema_type => "NasSessionCredentialConflict",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NasVolumeNotMounted,
    :schema_ns => "urn:vim25",
    :schema_type => "NasVolumeNotMounted",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkCopyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkCopyFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkInaccessible,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkInaccessible",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworksMayNotBeTheSame,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworksMayNotBeTheSame",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NicSettingMismatch,
    :schema_ns => "urn:vim25",
    :schema_type => "NicSettingMismatch",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numberOfNicsInSpec", "SOAP::SOAPInt"],
      ["numberOfNicsInVM", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoActiveHostInCluster,
    :schema_ns => "urn:vim25",
    :schema_type => "NoActiveHostInCluster",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["computeResource", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoAvailableIp,
    :schema_ns => "urn:vim25",
    :schema_type => "NoAvailableIp",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoClientCertificate,
    :schema_ns => "urn:vim25",
    :schema_type => "NoClientCertificate",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoCompatibleHardAffinityHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleHardAffinityHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoCompatibleHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoCompatibleHostWithAccessToDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleHostWithAccessToDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoCompatibleSoftAffinityHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleSoftAffinityHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoDiskFound,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDiskFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoDiskSpace,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDiskSpace",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoDisksToCustomize,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDisksToCustomize",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoGateway,
    :schema_ns => "urn:vim25",
    :schema_type => "NoGateway",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoGuestHeartbeat,
    :schema_ns => "urn:vim25",
    :schema_type => "NoGuestHeartbeat",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoHostSuitableForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "NoHostSuitableForFtSecondary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoLicenseServerConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "NoLicenseServerConfigured",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoPeerHostFound,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPeerHostFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoPermission,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermission",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["object", "VimWs25::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoPermissionOnAD,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermissionOnAD",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoPermissionOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermissionOnHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoPermissionOnNasVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermissionOnNasVolume",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoSubjectName,
    :schema_ns => "urn:vim25",
    :schema_type => "NoSubjectName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoVcManagedIpConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "NoVcManagedIpConfigured",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoVirtualNic,
    :schema_ns => "urn:vim25",
    :schema_type => "NoVirtualNic",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NoVmInVApp,
    :schema_ns => "urn:vim25",
    :schema_type => "NoVmInVApp",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NonADUserRequired,
    :schema_ns => "urn:vim25",
    :schema_type => "NonADUserRequired",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NonHomeRDMVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NonHomeRDMVMotionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NonPersistentDisksNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NonPersistentDisksNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotAuthenticated,
    :schema_ns => "urn:vim25",
    :schema_type => "NotAuthenticated",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["object", "VimWs25::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotEnoughCpus,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughCpus",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotEnoughLogicalCpus,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughLogicalCpus",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "NotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotSupportedDeviceForFT,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedDeviceForFT",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString", [0, 1]],
      ["deviceType", "SOAP::SOAPString"],
      ["deviceLabel", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotSupportedHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotSupportedHostInCluster,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedHostInCluster",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotSupportedHostInDvs,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedHostInDvs",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NotUserConfigurableProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "NotUserConfigurableProperty",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NumVirtualCpusExceedsLimit,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusExceedsLimit",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpus", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NumVirtualCpusIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusIncompatible",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["numCpu", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NumVirtualCpusNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpusDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OutOfBounds,
    :schema_ns => "urn:vim25",
    :schema_type => "OutOfBounds",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["argumentName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfAttribute,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfAttribute",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfConnectedDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConnectedDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfConnectedDeviceFloppy,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConnectedDeviceFloppy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfConnectedDeviceIso,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConnectedDeviceIso",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfConstraint,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConstraint",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfDiskMappingNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDiskMappingNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfDiskOrderConstraint,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDiskOrderConstraint",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfDuplicateElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDuplicateElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfDuplicatedElementBoundary,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDuplicatedElementBoundary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfElementInvalidValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfElementInvalidValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfExport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfExportFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfExportFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfFault,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfHardwareCheck,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHardwareCheck",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfHardwareExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHardwareExport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfHostResourceConstraint,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHostResourceConstraint",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfHostValueNotParsed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHostValueNotParsed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfImport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfImport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfImportFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfImportFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInternalError,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInternalError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidPackage",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidValueConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueConfiguration",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidValueEmpty,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueEmpty",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidValueFormatMalformed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueFormatMalformed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidValueReference,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueReference",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfInvalidVmName,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidVmName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfMappedOsId,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMappedOsId",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["ovfId", "SOAP::SOAPInt"],
      ["ovfDescription", "SOAP::SOAPString"],
      ["targetDescription", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfMissingAttribute,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingAttribute",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfMissingElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfMissingElementNormalBoundary,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingElementNormalBoundary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfMissingHardware,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingHardware",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourceType", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfNoHostNic,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNoHostNic",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfNoSupportedHardwareFamily,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNoSupportedHardwareFamily",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["version", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfProperty",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyExport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyNetwork,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyNetwork",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyQualifier,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyQualifier",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyQualifierDuplicate,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyQualifierDuplicate",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyQualifierIgnored,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyQualifierIgnored",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfSystemFault,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfSystemFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfToXmlUnsupportedElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfToXmlUnsupportedElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnableToExportDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnableToExportDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["diskName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnexpectedElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnexpectedElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnknownDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnknownDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnknownDeviceBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnknownDeviceBacking",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["backing", "VimWs25::VirtualDeviceBackingInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnknownEntity,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnknownEntity",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedAttribute,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedAttribute",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedAttributeValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedAttributeValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDeviceExport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedDiskProvisioning,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDiskProvisioning",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString"],
      ["supportedDiskProvisioning", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedElementValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedElementValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedPackage",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedSection,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedSection",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["info", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedSubType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedSubType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"],
      ["deviceSubType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfUnsupportedType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfWrongElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfWrongElement",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfWrongNamespace,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfWrongNamespace",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["namespaceName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfXmlFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfXmlFormat",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchAlreadyInstalled,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchAlreadyInstalled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchBinariesNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchBinariesNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["binary", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchInstallFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchInstallFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"],
      ["rolledBack", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchIntegrityError,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchIntegrityError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchMetadataCorrupted,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMetadataCorrupted",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchMetadataInvalid,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMetadataInvalid",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchMetadataNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMetadataNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchMissingDependencies,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMissingDependencies",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["prerequisitePatch", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisiteLib", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchNotApplicable,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchNotApplicable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PatchSuperseded,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchSuperseded",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["supersede", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysCompatRDMNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysCompatRDMNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PlatformConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "PlatformConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOnFtSecondaryFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnFtSecondaryFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["hostSelectionBy", "SOAP::SOAPString"],
      ["hostErrors", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["rootCause", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerOnFtSecondaryTimedout,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnFtSecondaryTimedout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileUpdateFailedUpdateFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileUpdateFailedUpdateFailure",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profilePath", "VimWs25::ProfilePropertyPath"],
      ["errMsg", "VimWs25::LocalizableMessage"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileUpdateFailedUpdateFailure,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileUpdateFailedUpdateFailure") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileUpdateFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileUpdateFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["failure", "VimWs25::ProfileUpdateFailedUpdateFailure[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::QuestionPending,
    :schema_ns => "urn:vim25",
    :schema_type => "QuestionPending",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RDMConversionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMConversionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RDMNotPreserved,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMNotPreserved",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RDMNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RDMNotSupportedOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMNotSupportedOnDatastore",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RDMPointsToInaccessibleDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMPointsToInaccessibleDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RawDiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RawDiskNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ReadOnlyDisksWithLegacyDestination,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadOnlyDisksWithLegacyDestination",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["roDiskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RebootRequired,
    :schema_ns => "urn:vim25",
    :schema_type => "RebootRequired",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patch", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RecordReplayDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "RecordReplayDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoteDeviceNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoteDeviceNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RemoveFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceInUse,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceInUse",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ResourceNotAvailable,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceNotAvailable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["containerType", "SOAP::SOAPString", [0, 1]],
      ["containerName", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RestrictedVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "RestrictedVersion",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RuleViolation,
    :schema_ns => "urn:vim25",
    :schema_type => "RuleViolation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["rule", "VimWs25::ClusterRuleInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SSLDisabledFault,
    :schema_ns => "urn:vim25",
    :schema_type => "SSLDisabledFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SSLVerifyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "SSLVerifyFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["selfSigned", "SOAP::SOAPBoolean"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SSPIChallenge,
    :schema_ns => "urn:vim25",
    :schema_type => "SSPIChallenge",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["base64Token", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmAlreadyDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyEnabled,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmAlreadyEnabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyRegistered,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmAlreadyRegistered",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SecondaryVmNotRegistered,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmNotRegistered",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SharedBusControllerNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SharedBusControllerNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotCloneNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotCloneNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotCopyNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotCopyNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotFault,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotIncompatibleDeviceInVm,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotIncompatibleDeviceInVm",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotLocked,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotLocked",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotMoveFromNonHomeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotMoveFromNonHomeNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotMoveNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotMoveNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotMoveToNonHomeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotMoveToNonHomeNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotNoChange,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotNoChange",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SnapshotRevertIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotRevertIssue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["snapshotName", "SOAP::SOAPString", [0, 1]],
      ["event", "VimWs25::Event[]", [0, nil]],
      ["errors", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SoftRuleVioCorrectionDisallowed,
    :schema_ns => "urn:vim25",
    :schema_type => "SoftRuleVioCorrectionDisallowed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SoftRuleVioCorrectionImpact,
    :schema_ns => "urn:vim25",
    :schema_type => "SoftRuleVioCorrectionImpact",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageVMotionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SuspendedRelocateNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SuspendedRelocateNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SwapDatastoreNotWritableOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "SwapDatastoreNotWritableOnHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SwapDatastoreUnset,
    :schema_ns => "urn:vim25",
    :schema_type => "SwapDatastoreUnset",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SwapPlacementOverrideNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SwapPlacementOverrideNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::SwitchNotInUpgradeMode,
    :schema_ns => "urn:vim25",
    :schema_type => "SwitchNotInUpgradeMode",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskInProgress,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskInProgress",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["task", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::Timedout,
    :schema_ns => "urn:vim25",
    :schema_type => "Timedout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TooManyConsecutiveOverrides,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyConsecutiveOverrides",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TooManyDevices,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyDevices",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TooManyDisksOnLegacyHost,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyDisksOnLegacyHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TooManyHosts,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyHosts",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TooManySnapshotLevels,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManySnapshotLevels",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsAlreadyUpgraded,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsAlreadyUpgraded",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsAutoUpgradeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsAutoUpgradeNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsImageNotAvailable,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsImageNotAvailable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsImageSignatureCheckFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsImageSignatureCheckFailed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsInstallationInProgress,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsInstallationInProgress",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsUnavailable,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsUnavailable",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsUpgradeCancelled,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsUpgradeCancelled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UncommittedUndoableDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "UncommittedUndoableDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnconfiguredPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "UnconfiguredPropertyValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UncustomizableGuest,
    :schema_ns => "urn:vim25",
    :schema_type => "UncustomizableGuest",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uncustomizableGuestOS", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnexpectedCustomizationFault,
    :schema_ns => "urn:vim25",
    :schema_type => "UnexpectedCustomizationFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnrecognizedHost,
    :schema_ns => "urn:vim25",
    :schema_type => "UnrecognizedHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnsharedSwapVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsharedSwapVMotionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnsupportedDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedDatastore",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnsupportedGuest,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedGuest",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["unsupportedGuestOS", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnsupportedVimApiVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedVimApiVersion",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnsupportedVmxLocation,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedVmxLocation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UnusedVirtualDiskBlocksNotScrubbed,
    :schema_ns => "urn:vim25",
    :schema_type => "UnusedVirtualDiskBlocksNotScrubbed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "UserNotFound",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["unresolved", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppNotRunning,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppNotRunning",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppPropertyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppPropertyFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppTaskInProgress,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppTaskInProgress",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["task", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMINotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VMINotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMOnConflictDVPort,
    :schema_ns => "urn:vim25",
    :schema_type => "VMOnConflictDVPort",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMOnVirtualIntranet,
    :schema_ns => "urn:vim25",
    :schema_type => "VMOnVirtualIntranet",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionInterfaceIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionInterfaceIssue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionLinkCapacityLow,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionLinkCapacityLow",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionLinkDown,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionLinkDown",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionNotConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionNotConfigured",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionNotLicensed,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionNotLicensed",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionProtocolIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionProtocolIncompatible",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VimFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VimFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskBlocksNotFullyProvisioned,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskBlocksNotFullyProvisioned",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskModeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskModeNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualHardwareCompatibilityIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardwareCompatibilityIssue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualHardwareVersionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardwareVersionNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmAlreadyExistsInDatacenter,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAlreadyExistsInDatacenter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigIncompatibleForFaultTolerance",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigIncompatibleForRecordReplay,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigIncompatibleForRecordReplay",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceConfigIssue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssueWrapper,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceConfigIssueWrapper",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceInvalidFileBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceInvalidFileBacking",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["backingType", "SOAP::SOAPString", [0, 1]],
      ["backingFilename", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceIssue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceOpIssuesList,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceOpIssuesList",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errors", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warnings", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceTooManyVMsOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceTooManyVMsOnHost",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["maxNumFtVms", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmHostAffinityRuleViolation,
    :schema_ns => "urn:vim25",
    :schema_type => "VmHostAffinityRuleViolation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmLimitLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "VmLimitLicense",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["limit", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmMonitorIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMonitorIncompatibleForFaultTolerance",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPowerOnDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPowerOnDisabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmToolsUpgradeFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VmToolsUpgradeFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmValidateMaxDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VmValidateMaxDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["max", "SOAP::SOAPInt"],
      ["count", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmWwnConflict,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnConflict",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["wwn", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsAlreadyMounted,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsAlreadyMounted",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsAmbiguousMount,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsAmbiguousMount",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsMountFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsMountFault",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmotionInterfaceNotEnabled,
    :schema_ns => "urn:vim25",
    :schema_type => "VmotionInterfaceNotEnabled",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VolumeEditorError,
    :schema_ns => "urn:vim25",
    :schema_type => "VolumeEditorError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WakeOnLanNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "WakeOnLanNotSupported",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WakeOnLanNotSupportedByVmotionNIC,
    :schema_ns => "urn:vim25",
    :schema_type => "WakeOnLanNotSupportedByVmotionNIC",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WillModifyConfigCpuRequirements,
    :schema_ns => "urn:vim25",
    :schema_type => "WillModifyConfigCpuRequirements",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostActiveDirectoryInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectoryInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["joinedDomain", "SOAP::SOAPString", [0, 1]],
      ["trustedDomain", "SOAP::SOAPString[]", [0, nil]],
      ["domainMembershipStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostActiveDirectorySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectorySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostActiveDirectory,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectory",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostActiveDirectorySpec", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostActiveDirectory,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostActiveDirectory") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAuthenticationManagerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAuthenticationManagerInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["authConfig", "VimWs25::HostAuthenticationStoreInfo[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAuthenticationStoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAuthenticationStoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostAuthenticationStoreInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostAuthenticationStoreInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::AutoStartDefaults,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartDefaults",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitForHeartbeat", "SOAP::SOAPBoolean", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AutoStartPowerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartPowerInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["startOrder", "SOAP::SOAPInt"],
      ["startDelay", "SOAP::SOAPInt"],
      ["waitForHeartbeat", "SOAP::SOAPString"],
      ["startAction", "SOAP::SOAPString"],
      ["stopDelay", "SOAP::SOAPInt"],
      ["stopAction", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfAutoStartPowerInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "AutoStartPowerInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAutoStartManagerConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAutoStartManagerConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaults", "VimWs25::AutoStartDefaults", [0, 1]],
      ["powerInfo", "VimWs25::AutoStartPowerInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostBootDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBootDeviceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["bootDevices", "VimWs25::HostBootDevice[]", [0, nil]],
      ["currentBootDeviceKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostBootDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBootDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostBootDevice,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostBootDevice") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["recursiveResourcePoolsSupported", "SOAP::SOAPBoolean"],
      ["cpuMemoryResourceConfigurationSupported", "SOAP::SOAPBoolean"],
      ["rebootSupported", "SOAP::SOAPBoolean"],
      ["shutdownSupported", "SOAP::SOAPBoolean"],
      ["vmotionSupported", "SOAP::SOAPBoolean"],
      ["standbySupported", "SOAP::SOAPBoolean"],
      ["ipmiSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["maxSupportedVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxRunningVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxSupportedVcpus", "SOAP::SOAPInt", [0, 1]],
      ["datastorePrincipalSupported", "SOAP::SOAPBoolean"],
      ["sanSupported", "SOAP::SOAPBoolean"],
      ["nfsSupported", "SOAP::SOAPBoolean"],
      ["iscsiSupported", "SOAP::SOAPBoolean"],
      ["vlanTaggingSupported", "SOAP::SOAPBoolean"],
      ["nicTeamingSupported", "SOAP::SOAPBoolean"],
      ["highGuestMemSupported", "SOAP::SOAPBoolean"],
      ["maintenanceModeSupported", "SOAP::SOAPBoolean"],
      ["suspendedRelocateSupported", "SOAP::SOAPBoolean"],
      ["restrictedSnapshotRelocateSupported", "SOAP::SOAPBoolean"],
      ["perVmSwapFiles", "SOAP::SOAPBoolean"],
      ["localSwapDatastoreSupported", "SOAP::SOAPBoolean"],
      ["unsharedSwapVMotionSupported", "SOAP::SOAPBoolean"],
      ["backgroundSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["preAssignedPCIUnitNumbersSupported", "SOAP::SOAPBoolean"],
      ["screenshotSupported", "SOAP::SOAPBoolean"],
      ["scaledScreenshotSupported", "SOAP::SOAPBoolean"],
      ["storageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmotionWithStorageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["ftSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["replayUnsupportedReason", "SOAP::SOAPString", [0, 1]],
      ["replayCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["ftCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["loginBySSLThumbprintSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["cloneFromSnapshotSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["deltaDiskBackingsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["perVMNetworkTrafficShapingSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["tpmSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedCpuFeature", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["virtualExecUsageSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2UnsupportedReason", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2UnsupportedReasonExtended", "SOAP::SOAPString", [0, 1]],
      ["vStorageCapable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigChange,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigChange",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["product", "VimWs25::AboutInfo"],
      ["hyperThread", "VimWs25::HostHyperThreadScheduleInfo", [0, 1]],
      ["consoleReservation", "VimWs25::ServiceConsoleReservationInfo", [0, 1]],
      ["virtualMachineReservation", "VimWs25::VirtualMachineMemoryReservationInfo", [0, 1]],
      ["storageDevice", "VimWs25::HostStorageDeviceInfo", [0, 1]],
      ["multipathState", "VimWs25::HostMultipathStateInfo", [0, 1]],
      ["fileSystemVolume", "VimWs25::HostFileSystemVolumeInfo", [0, 1]],
      ["systemFile", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VimWs25::HostNetworkInfo", [0, 1]],
      ["vmotion", "VimWs25::HostVMotionInfo", [0, 1]],
      ["virtualNicManagerInfo", "VimWs25::HostVirtualNicManagerInfo", [0, 1]],
      ["capabilities", "VimWs25::HostNetCapabilities", [0, 1]],
      ["datastoreCapabilities", "VimWs25::HostDatastoreSystemCapabilities", [0, 1]],
      ["offloadCapabilities", "VimWs25::HostNetOffloadCapabilities", [0, 1]],
      ["service", "VimWs25::HostServiceInfo", [0, 1]],
      ["firewall", "VimWs25::HostFirewallInfo", [0, 1]],
      ["autoStart", "VimWs25::HostAutoStartManagerConfig", [0, 1]],
      ["activeDiagnosticPartition", "VimWs25::HostDiagnosticPartition", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]],
      ["optionDef", "VimWs25::OptionDef[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["localSwapDatastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["systemResources", "VimWs25::HostSystemResourceInfo", [0, 1]],
      ["dateTimeInfo", "VimWs25::HostDateTimeInfo", [0, 1]],
      ["flags", "VimWs25::HostFlagInfo", [0, 1]],
      ["adminDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["ipmi", "VimWs25::HostIpmiInfo", [0, 1]],
      ["sslThumbprintInfo", "VimWs25::HostSslThumbprintInfo", [0, 1]],
      ["pciPassthruInfo", "VimWs25::HostPciPassthruInfo[]", [0, nil]],
      ["authenticationManagerInfo", "VimWs25::HostAuthenticationManagerInfo", [0, 1]],
      ["featureVersion", "VimWs25::HostFeatureVersionInfo[]", [0, nil]],
      ["powerSystemCapability", "VimWs25::PowerSystemCapability", [0, 1]],
      ["powerSystemInfo", "VimWs25::PowerSystemInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigManager,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigManager",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cpuScheduler", "VimWs25::ManagedObjectReference", [0, 1]],
      ["datastoreSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["memoryManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["storageSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["vmotionSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["virtualNicManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["serviceSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["firewallSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["advancedOption", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diagnosticSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["autoStartManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dateTimeSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["patchManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["bootDeviceSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["firmwareSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["healthStatusSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pciPassthruSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["kernelModuleSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["authenticationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["powerSystem", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nasDatastore", "VimWs25::HostNasVolumeConfig[]", [0, nil]],
      ["network", "VimWs25::HostNetworkConfig", [0, 1]],
      ["nicTypeSelection", "VimWs25::HostVirtualNicManagerNicTypeSelection[]", [0, nil]],
      ["service", "VimWs25::HostServiceConfig[]", [0, nil]],
      ["firewall", "VimWs25::HostFirewallConfig", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipalPasswd", "SOAP::SOAPString", [0, 1]],
      ["datetime", "VimWs25::HostDateTimeConfig", [0, 1]],
      ["storageDevice", "VimWs25::HostStorageDeviceInfo", [0, 1]],
      ["license", "VimWs25::HostLicenseSpec", [0, 1]],
      ["security", "VimWs25::HostSecuritySpec", [0, 1]],
      ["userAccount", "VimWs25::HostAccountSpec[]", [0, nil]],
      ["usergroupAccount", "VimWs25::HostAccountSpec[]", [0, nil]],
      ["memory", "VimWs25::HostMemorySpec", [0, 1]],
      ["activeDirectory", "VimWs25::HostActiveDirectory[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConnectInfoNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectInfoNetworkInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::NetworkSummary"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostConnectInfoNetworkInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostConnectInfoNetworkInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNewNetworkConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNewNetworkConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::NetworkSummary"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDatastoreConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::DatastoreSummary"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDatastoreConnectInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDatastoreConnectInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDatastoreExistsConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreExistsConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDatastoreNameConflictConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreNameConflictConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLicenseConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLicenseConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["license", "VimWs25::LicenseManagerLicenseInfo"],
      ["evaluation", "VimWs25::LicenseManagerEvaluationInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serverIp", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::HostListSummary"],
      ["vm", "VimWs25::VirtualMachineSummary[]", [0, nil]],
      ["vimAccountNameRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["clusterSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VimWs25::HostConnectInfoNetworkInfo[]", [0, nil]],
      ["datastore", "VimWs25::HostDatastoreConnectInfo[]", [0, nil]],
      ["license", "VimWs25::HostLicenseConnectInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConnectSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean"],
      ["vimAccountName", "SOAP::SOAPString", [0, 1]],
      ["vimAccountPassword", "SOAP::SOAPString", [0, 1]],
      ["managementIp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCpuIdInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuIdInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["eax", "SOAP::SOAPString", [0, 1]],
      ["ebx", "SOAP::SOAPString", [0, 1]],
      ["ecx", "SOAP::SOAPString", [0, 1]],
      ["edx", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostCpuIdInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostCpuIdInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHyperThreadScheduleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHyperThreadScheduleInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["available", "SOAP::SOAPBoolean"],
      ["active", "SOAP::SOAPBoolean"],
      ["config", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileQueryFlags,
    :schema_ns => "urn:vim25",
    :schema_type => "FileQueryFlags",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileType", "SOAP::SOAPBoolean"],
      ["fileSize", "SOAP::SOAPBoolean"],
      ["modification", "SOAP::SOAPBoolean"],
      ["fileOwner", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfFileInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "FileInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::FileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "FileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfFileQuery,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "FileQuery") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigFileQueryFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileQueryFilter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["matchConfigVersion", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigFileQueryFlags,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileQueryFlags",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VimWs25::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TemplateConfigFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateConfigFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VimWs25::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDiskFileQueryFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileQueryFilter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString[]", [0, nil]],
      ["matchHardwareVersion", "SOAP::SOAPInt[]", [0, nil]],
      ["controllerType", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDiskFileQueryFlags,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileQueryFlags",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPBoolean"],
      ["capacityKb", "SOAP::SOAPBoolean"],
      ["hardwareVersion", "SOAP::SOAPBoolean"],
      ["controllerType", "SOAP::SOAPBoolean", [0, 1]],
      ["diskExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDiskFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::VmDiskFileQueryFilter", [0, 1]],
      ["details", "VimWs25::VmDiskFileQueryFlags", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FolderFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "FolderFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSnapshotFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSnapshotFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IsoImageFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "IsoImageFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FloppyImageFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "FloppyImageFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmNvramFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNvramFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmLogFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmLogFileQuery",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TemplateConfigFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateConfigFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDiskFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["diskType", "SOAP::SOAPString", [0, 1]],
      ["capacityKb", "SOAP::SOAPLong", [0, 1]],
      ["hardwareVersion", "SOAP::SOAPInt", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["diskExtents", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FolderFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FolderFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmSnapshotFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSnapshotFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IsoImageFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "IsoImageFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FloppyImageFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FloppyImageFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmNvramFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNvramFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmLogFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmLogFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDatastoreBrowserSearchSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreBrowserSearchSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["query", "VimWs25::FileQuery[]", [0, nil]],
      ["details", "VimWs25::FileQueryFlags", [0, 1]],
      ["searchCaseInsensitive", "SOAP::SOAPBoolean", [0, 1]],
      ["matchPattern", "SOAP::SOAPString[]", [0, nil]],
      ["sortFoldersFirst", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDatastoreBrowserSearchResults,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreBrowserSearchResults",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["folderPath", "SOAP::SOAPString", [0, 1]],
      ["file", "VimWs25::FileInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDatastoreBrowserSearchResults,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDatastoreBrowserSearchResults") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDatastoreSystemCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreSystemCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nfsMountCreationRequired", "SOAP::SOAPBoolean"],
      ["nfsMountCreationSupported", "SOAP::SOAPBoolean"],
      ["localDatastoreSupported", "SOAP::SOAPBoolean"],
      ["vmfsExtentExpansionSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["vmfs", "VimWs25::HostVmfsVolume", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NasDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NasDatastoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["nas", "VimWs25::HostNasVolume", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LocalDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalDatastoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["path", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["vmfs", "VimWs25::HostVmfsSpec"],
      ["extent", "VimWs25::HostScsiDiskPartition[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreExtendSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreExtendSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["extent", "VimWs25::HostScsiDiskPartition[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreExpandSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreExpandSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreBaseOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreBaseOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreSingleExtentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreSingleExtentOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["vmfsExtent", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreAllExtentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreAllExtentOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["vmfsExtent", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreMultipleExtentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreMultipleExtentOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["vmfsExtent", "VimWs25::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmfsDatastoreOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["info", "VimWs25::VmfsDatastoreBaseOption"],
      ["spec", "VimWs25::VmfsDatastoreSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVmfsDatastoreOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VmfsDatastoreOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDateTimeConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDateTimeConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["ntpConfig", "VimWs25::HostNtpConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDateTimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDateTimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timeZone", "VimWs25::HostDateTimeSystemTimeZone"],
      ["ntpConfig", "VimWs25::HostNtpConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDateTimeSystemTimeZone,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDateTimeSystemTimeZone",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["gmtOffset", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDateTimeSystemTimeZone,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDateTimeSystemTimeZone") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDhcpServiceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDhcpServiceSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["defaultLeaseDuration", "SOAP::SOAPInt"],
      ["leaseBeginIp", "SOAP::SOAPString"],
      ["leaseEndIp", "SOAP::SOAPString"],
      ["maxLeaseDuration", "SOAP::SOAPInt"],
      ["unlimitedLease", "SOAP::SOAPBoolean"],
      ["ipSubnetAddr", "SOAP::SOAPString"],
      ["ipSubnetMask", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDhcpServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDhcpServiceConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDhcpServiceSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDhcpServiceConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDhcpServiceConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDhcpService,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDhcpService",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDhcpServiceSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDhcpService,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDhcpService") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiagnosticPartitionCreateOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartitionCreateOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["disk", "VimWs25::HostScsiDisk"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDiagnosticPartitionCreateOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDiagnosticPartitionCreateOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiagnosticPartitionCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartitionCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["id", "VimWs25::HostScsiDiskPartition"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["active", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiagnosticPartitionCreateDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartitionCreateDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["diskUuid", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiagnosticPartition,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartition",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["slots", "SOAP::SOAPInt"],
      ["id", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDiagnosticPartition,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDiagnosticPartition") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDirectoryStoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDirectoryStoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskDimensionsChs,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskDimensionsChs",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cylinder", "SOAP::SOAPLong"],
      ["head", "SOAP::SOAPInt"],
      ["sector", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskDimensionsLba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskDimensionsLba",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blockSize", "SOAP::SOAPInt"],
      ["block", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskDimensions,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskDimensions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskPartitionAttributes,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionAttributes",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt"],
      ["startSector", "SOAP::SOAPLong"],
      ["endSector", "SOAP::SOAPLong"],
      ["type", "SOAP::SOAPString"],
      ["logical", "SOAP::SOAPBoolean"],
      ["attributes", "SOAP::SOAPByte"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDiskPartitionAttributes,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDiskPartitionAttributes") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskPartitionBlockRange,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionBlockRange",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["start", "VimWs25::HostDiskDimensionsLba"],
      ["v_end", ["VimWs25::HostDiskDimensionsLba", XSD::QName.new("urn:vim25", "end")]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDiskPartitionBlockRange,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDiskPartitionBlockRange") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskPartitionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["chs", "VimWs25::HostDiskDimensionsChs", [0, 1]],
      ["totalSectors", "SOAP::SOAPLong", [0, 1]],
      ["partition", "VimWs25::HostDiskPartitionAttributes[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskPartitionLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionLayout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["total", "VimWs25::HostDiskDimensionsLba", [0, 1]],
      ["partition", "VimWs25::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskPartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiskPartitionSpec"],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDiskPartitionInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDiskPartitionInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDnsConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDnsConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDnsConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDnsConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]],
      ["virtualNicConnection", "VimWs25::HostVirtualNicConnection", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFeatureVersionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFeatureVersionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostFeatureVersionInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostFeatureVersionInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ModeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ModeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["browse", "SOAP::SOAPString", [0, 1]],
      ["read", "SOAP::SOAPString"],
      ["modify", "SOAP::SOAPString"],
      ["use", "SOAP::SOAPString"],
      ["admin", "SOAP::SOAPString", [0, 1]],
      ["full", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFileAccess,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileAccess",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["who", "SOAP::SOAPString"],
      ["what", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFileSystemVolumeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileSystemVolumeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["volumeTypeList", "SOAP::SOAPString[]", [0, nil]],
      ["mountInfo", "VimWs25::HostFileSystemMountInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFileSystemMountInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileSystemMountInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mountInfo", "VimWs25::HostMountInfo"],
      ["volume", "VimWs25::HostFileSystemVolume"],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostFileSystemMountInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostFileSystemMountInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFileSystemVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileSystemVolume",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNasVolumeSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNasVolumeSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"],
      ["accessMode", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNasVolumeConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNasVolumeConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostNasVolumeSpec", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostNasVolumeConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostNasVolumeConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNasVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNasVolume",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLocalFileSystemVolumeSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLocalFileSystemVolumeSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLocalFileSystemVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLocalFileSystemVolume",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallConfigRuleSetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallConfigRuleSetConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rulesetId", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostFirewallConfigRuleSetConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostFirewallConfigRuleSetConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rule", "VimWs25::HostFirewallConfigRuleSetConfig[]", [0, nil]],
      ["defaultBlockingPolicy", "VimWs25::HostFirewallDefaultPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallDefaultPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallDefaultPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["incomingBlocked", "SOAP::SOAPBoolean", [0, 1]],
      ["outgoingBlocked", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaultPolicy", "VimWs25::HostFirewallDefaultPolicy"],
      ["ruleset", "VimWs25::HostFirewallRuleset[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFlagInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFlagInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["backgroundSnapshotsEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostForceMountedInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostForceMountedInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["persist", "SOAP::SOAPBoolean"],
      ["mounted", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHardwareInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemInfo", "VimWs25::HostSystemInfo"],
      ["cpuPowerManagementInfo", "VimWs25::HostCpuPowerManagementInfo", [0, 1]],
      ["cpuInfo", "VimWs25::HostCpuInfo"],
      ["cpuPkg", "VimWs25::HostCpuPackage[]", [1, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["numaInfo", "VimWs25::HostNumaInfo", [0, 1]],
      ["pciDevice", "VimWs25::HostPciDevice[]", [0, nil]],
      ["cpuFeature", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["biosInfo", "VimWs25::HostBIOSInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VimWs25::HostSystemIdentificationInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCpuPowerManagementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPowerManagementInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "SOAP::SOAPString", [0, 1]],
      ["hardwareSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCpuInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numCpuPackages", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["hz", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCpuPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPackage",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["index", "SOAP::SOAPShort"],
      ["vendor", "SOAP::SOAPString"],
      ["hz", "SOAP::SOAPLong"],
      ["busHz", "SOAP::SOAPLong"],
      ["description", "SOAP::SOAPString"],
      ["threadId", "SOAP::SOAPShort[]", [1, nil]],
      ["cpuFeature", "VimWs25::HostCpuIdInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostCpuPackage,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostCpuPackage") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNumaInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumaInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["numNodes", "SOAP::SOAPInt"],
      ["numaNode", "VimWs25::HostNumaNode[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNumaNode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumaNode",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["typeId", "SOAP::SOAPByte"],
      ["cpuID", "SOAP::SOAPShort[]", [1, nil]],
      ["memoryRangeBegin", "SOAP::SOAPLong"],
      ["memoryRangeLength", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostNumaNode,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostNumaNode") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostBIOSInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBIOSInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["biosVersion", "SOAP::SOAPString", [0, 1]],
      ["releaseDate", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHardwareElementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareElementInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VimWs25::ElementDescription"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostHardwareElementInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostHardwareElementInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostStorageOperationalInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageOperationalInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostStorageOperationalInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostStorageOperationalInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostStorageElementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageElementInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VimWs25::ElementDescription"],
      ["operationalInfo", "VimWs25::HostStorageOperationalInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostStorageElementInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostStorageElementInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHardwareStatusInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareStatusInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["memoryStatusInfo", "VimWs25::HostHardwareElementInfo[]", [0, nil]],
      ["cpuStatusInfo", "VimWs25::HostHardwareElementInfo[]", [0, nil]],
      ["storageStatusInfo", "VimWs25::HostStorageElementInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HealthSystemRuntime,
    :schema_ns => "urn:vim25",
    :schema_type => "HealthSystemRuntime",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemHealthInfo", "VimWs25::HostSystemHealthInfo", [0, 1]],
      ["hardwareStatusInfo", "VimWs25::HostHardwareStatusInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHostBusAdapter,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHostBusAdapter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostHostBusAdapter,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostHostBusAdapter") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostParallelScsiHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostParallelScsiHba",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostBlockHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBlockHba",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFibreChannelHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFibreChannelHba",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"],
      ["portType", "SOAP::SOAPString"],
      ["speed", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaParamValue,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaParamValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]],
      ["isInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostInternetScsiHbaParamValue,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostInternetScsiHbaParamValue") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDiscoveryCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDiscoveryCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoverySettable", "SOAP::SOAPBoolean"],
      ["slpDiscoverySettable", "SOAP::SOAPBoolean"],
      ["staticTargetDiscoverySettable", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoverySettable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDiscoveryProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDiscoveryProperties",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["iSnsDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["iSnsHost", "SOAP::SOAPString", [0, 1]],
      ["slpDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["slpDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["slpHost", "SOAP::SOAPString", [0, 1]],
      ["staticTargetDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoveryEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaAuthenticationCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaAuthenticationCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["chapAuthSettable", "SOAP::SOAPBoolean"],
      ["krb5AuthSettable", "SOAP::SOAPBoolean"],
      ["srpAuthSettable", "SOAP::SOAPBoolean"],
      ["spkmAuthSettable", "SOAP::SOAPBoolean"],
      ["mutualChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetMutualChapSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaAuthenticationProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaAuthenticationProperties",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["chapAuthEnabled", "SOAP::SOAPBoolean"],
      ["chapName", "SOAP::SOAPString", [0, 1]],
      ["chapSecret", "SOAP::SOAPString", [0, 1]],
      ["chapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["chapInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["mutualChapName", "SOAP::SOAPString", [0, 1]],
      ["mutualChapSecret", "SOAP::SOAPString", [0, 1]],
      ["mutualChapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["mutualChapInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDigestCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDigestCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["headerDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetHeaderDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetDataDigestSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDigestProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDigestProperties",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["headerDigestType", "SOAP::SOAPString", [0, 1]],
      ["headerDigestInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestType", "SOAP::SOAPString", [0, 1]],
      ["dataDigestInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaIPCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaIPCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["addressSettable", "SOAP::SOAPBoolean"],
      ["ipConfigurationMethodSettable", "SOAP::SOAPBoolean"],
      ["subnetMaskSettable", "SOAP::SOAPBoolean"],
      ["defaultGatewaySettable", "SOAP::SOAPBoolean"],
      ["primaryDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["alternateDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["ipv6Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["arpRedirectSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["mtuSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["hostNameAsTargetAddress", "SOAP::SOAPBoolean", [0, 1]],
      ["nameAliasSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaIPProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaIPProperties",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["dhcpConfigurationEnabled", "SOAP::SOAPBoolean"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["primaryDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["alternateDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["ipv6Address", "SOAP::SOAPString", [0, 1]],
      ["ipv6SubnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipv6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["arpRedirectEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["jumboFramesEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaSendTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaSendTarget",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VimWs25::OptionDef[]", [0, nil]],
      ["advancedOptions", "VimWs25::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostInternetScsiHbaSendTarget,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostInternetScsiHbaSendTarget") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaStaticTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaStaticTarget",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["iScsiName", "SOAP::SOAPString"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VimWs25::OptionDef[]", [0, nil]],
      ["advancedOptions", "VimWs25::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostInternetScsiHbaStaticTarget,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostInternetScsiHbaStaticTarget") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaTargetSet,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaTargetSet",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["staticTargets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["sendTargets", "VimWs25::HostInternetScsiHbaSendTarget[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHba",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["isSoftwareBased", "SOAP::SOAPBoolean"],
      ["discoveryCapabilities", "VimWs25::HostInternetScsiHbaDiscoveryCapabilities"],
      ["discoveryProperties", "VimWs25::HostInternetScsiHbaDiscoveryProperties"],
      ["authenticationCapabilities", "VimWs25::HostInternetScsiHbaAuthenticationCapabilities"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties"],
      ["digestCapabilities", "VimWs25::HostInternetScsiHbaDigestCapabilities", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["ipCapabilities", "VimWs25::HostInternetScsiHbaIPCapabilities"],
      ["ipProperties", "VimWs25::HostInternetScsiHbaIPProperties"],
      ["supportedAdvancedOptions", "VimWs25::OptionDef[]", [0, nil]],
      ["advancedOptions", "VimWs25::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString", [0, 1]],
      ["configuredSendTarget", "VimWs25::HostInternetScsiHbaSendTarget[]", [0, nil]],
      ["configuredStaticTarget", "VimWs25::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["maxSpeedMb", "SOAP::SOAPInt", [0, 1]],
      ["currentSpeedMb", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProxySwitchSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProxySwitchSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["backing", "VimWs25::DistributedVirtualSwitchHostMemberBacking", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProxySwitchConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProxySwitchConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostProxySwitchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostProxySwitchConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostProxySwitchConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProxySwitch,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProxySwitch",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dvsUuid", "SOAP::SOAPString"],
      ["dvsName", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["uplinkPort", "VimWs25::KeyValue[]", [0, nil]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostProxySwitchSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostProxySwitch,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostProxySwitch") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpConfigIpV6Address,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6Address",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["dadState", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]],
      ["operation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostIpConfigIpV6Address,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostIpConfigIpV6Address") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpConfigIpV6AddressConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6AddressConfiguration",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipV6Address", "VimWs25::HostIpConfigIpV6Address[]", [0, nil]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["dhcpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipV6Config", "VimWs25::HostIpConfigIpV6AddressConfiguration", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpRouteConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpRouteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["gatewayDeviceConnection", "VimWs25::HostVirtualNicConnection", [0, 1]],
      ["ipV6GatewayDeviceConnection", "VimWs25::HostVirtualNicConnection", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpRouteEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteEntry",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "SOAP::SOAPString"],
      ["deviceName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostIpRouteEntry,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostIpRouteEntry") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpRouteOp,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteOp",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["route", "VimWs25::HostIpRouteEntry"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostIpRouteOp,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostIpRouteOp") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpRouteTableConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteTableConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::HostIpRouteOp[]", [0, nil]],
      ["ipv6Route", "VimWs25::HostIpRouteOp[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpRouteTableInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteTableInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::HostIpRouteEntry[]", [0, nil]],
      ["ipv6Route", "VimWs25::HostIpRouteEntry[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpmiInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpmiInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["bmcIpAddress", "SOAP::SOAPString", [0, 1]],
      ["bmcMacAddress", "SOAP::SOAPString", [0, 1]],
      ["login", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::KernelModuleSectionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "KernelModuleSectionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::KernelModuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "KernelModuleInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"],
      ["optionString", "SOAP::SOAPString"],
      ["loaded", "SOAP::SOAPBoolean"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["useCount", "SOAP::SOAPInt"],
      ["readOnlySection", "VimWs25::KernelModuleSectionInfo"],
      ["writableSection", "VimWs25::KernelModuleSectionInfo"],
      ["textSection", "VimWs25::KernelModuleSectionInfo"],
      ["dataSection", "VimWs25::KernelModuleSectionInfo"],
      ["bssSection", "VimWs25::KernelModuleSectionInfo"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfKernelModuleInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "KernelModuleInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLicenseSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLicenseSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::LicenseSource", [0, 1]],
      ["editionKey", "SOAP::SOAPString", [0, 1]],
      ["disabledFeatureKey", "SOAP::SOAPString[]", [0, nil]],
      ["enabledFeatureKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LinkDiscoveryProtocolConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkDiscoveryProtocolConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["protocol", "SOAP::SOAPString"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostAccountSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAccountSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostAccountSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostAccountSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPosixAccountSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPosixAccountSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["posixId", "SOAP::SOAPInt", [0, 1]],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLocalAuthenticationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLocalAuthenticationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ServiceConsoleReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceConsoleReservationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservedCfg", "SOAP::SOAPLong"],
      ["serviceConsoleReserved", "SOAP::SOAPLong"],
      ["unreserved", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineMemoryReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMemoryReservationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualMachineMin", "SOAP::SOAPLong"],
      ["virtualMachineMax", "SOAP::SOAPLong"],
      ["virtualMachineReserved", "SOAP::SOAPLong"],
      ["allocationPolicy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineMemoryReservationSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMemoryReservationSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualMachineReserved", "SOAP::SOAPLong", [0, 1]],
      ["allocationPolicy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMemorySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMemorySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservation", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMountInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMountInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString", [0, 1]],
      ["accessMode", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathInfoLogicalUnitPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoLogicalUnitPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathInfoLogicalUnitStorageArrayTypePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoLogicalUnitStorageArrayTypePolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathInfoFixedLogicalUnitPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoFixedLogicalUnitPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"],
      ["prefer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathInfoLogicalUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoLogicalUnit",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "VimWs25::HostMultipathInfoPath[]", [1, nil]],
      ["policy", "VimWs25::HostMultipathInfoLogicalUnitPolicy"],
      ["storageArrayTypePolicy", "VimWs25::HostMultipathInfoLogicalUnitStorageArrayTypePolicy", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostMultipathInfoLogicalUnit,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostMultipathInfoLogicalUnit") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathInfoPath,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoPath",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["isWorkingPath", "SOAP::SOAPBoolean", [0, 1]],
      ["adapter", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["transport", "VimWs25::HostTargetTransport", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostMultipathInfoPath,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostMultipathInfoPath") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["lun", "VimWs25::HostMultipathInfoLogicalUnit[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathStateInfoPath,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathStateInfoPath",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostMultipathStateInfoPath,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostMultipathStateInfoPath") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMultipathStateInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathStateInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "VimWs25::HostMultipathStateInfoPath[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNatServicePortForwardSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServicePortForwardSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["hostPort", "SOAP::SOAPInt"],
      ["guestPort", "SOAP::SOAPInt"],
      ["guestIpAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostNatServicePortForwardSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostNatServicePortForwardSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNatServiceNameServiceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServiceNameServiceSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dnsAutoDetect", "SOAP::SOAPBoolean"],
      ["dnsPolicy", "SOAP::SOAPString"],
      ["dnsRetries", "SOAP::SOAPInt"],
      ["dnsTimeout", "SOAP::SOAPInt"],
      ["dnsNameServer", "SOAP::SOAPString[]", [0, nil]],
      ["nbdsTimeout", "SOAP::SOAPInt"],
      ["nbnsRetries", "SOAP::SOAPInt"],
      ["nbnsTimeout", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNatServiceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServiceSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["activeFtp", "SOAP::SOAPBoolean"],
      ["allowAnyOui", "SOAP::SOAPBoolean"],
      ["configPort", "SOAP::SOAPBoolean"],
      ["ipGatewayAddress", "SOAP::SOAPString"],
      ["udpTimeout", "SOAP::SOAPInt"],
      ["portForward", "VimWs25::HostNatServicePortForwardSpec[]", [0, nil]],
      ["nameService", "VimWs25::HostNatServiceNameServiceSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNatServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServiceConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostNatServiceSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostNatServiceConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostNatServiceConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNatService,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatService",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostNatServiceSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostNatService,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostNatService") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["canSetPhysicalNicLinkSpeed", "SOAP::SOAPBoolean"],
      ["supportsNicTeaming", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["supportsVlan", "SOAP::SOAPBoolean"],
      ["usesServiceConsoleNic", "SOAP::SOAPBoolean"],
      ["supportsNetworkHints", "SOAP::SOAPBoolean"],
      ["maxPortGroupsPerVswitch", "SOAP::SOAPInt", [0, 1]],
      ["vswitchConfigSupported", "SOAP::SOAPBoolean"],
      ["vnicConfigSupported", "SOAP::SOAPBoolean"],
      ["ipRouteConfigSupported", "SOAP::SOAPBoolean"],
      ["dnsConfigSupported", "SOAP::SOAPBoolean"],
      ["dhcpOnVnicSupported", "SOAP::SOAPBoolean"],
      ["ipV6Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetOffloadCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetOffloadCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["csumOffload", "SOAP::SOAPBoolean", [0, 1]],
      ["tcpSegmentation", "SOAP::SOAPBoolean", [0, 1]],
      ["zeroCopyXmit", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetworkConfigResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkConfigResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vnicDevice", "SOAP::SOAPString[]", [0, nil]],
      ["consoleVnicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetworkConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vswitch", "VimWs25::HostVirtualSwitchConfig[]", [0, nil]],
      ["proxySwitch", "VimWs25::HostProxySwitchConfig[]", [0, nil]],
      ["portgroup", "VimWs25::HostPortGroupConfig[]", [0, nil]],
      ["pnic", "VimWs25::PhysicalNicConfig[]", [0, nil]],
      ["vnic", "VimWs25::HostVirtualNicConfig[]", [0, nil]],
      ["consoleVnic", "VimWs25::HostVirtualNicConfig[]", [0, nil]],
      ["dnsConfig", "VimWs25::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["routeTableConfig", "VimWs25::HostIpRouteTableConfig", [0, 1]],
      ["dhcp", "VimWs25::HostDhcpServiceConfig[]", [0, nil]],
      ["nat", "VimWs25::HostNatServiceConfig[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vswitch", "VimWs25::HostVirtualSwitch[]", [0, nil]],
      ["proxySwitch", "VimWs25::HostProxySwitch[]", [0, nil]],
      ["portgroup", "VimWs25::HostPortGroup[]", [0, nil]],
      ["pnic", "VimWs25::PhysicalNic[]", [0, nil]],
      ["vnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["consoleVnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["dnsConfig", "VimWs25::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["routeTableInfo", "VimWs25::HostIpRouteTableInfo", [0, 1]],
      ["dhcp", "VimWs25::HostDhcpService[]", [0, nil]],
      ["nat", "VimWs25::HostNatService[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["atBootIpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetworkSecurityPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkSecurityPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["allowPromiscuous", "SOAP::SOAPBoolean", [0, 1]],
      ["macChanges", "SOAP::SOAPBoolean", [0, 1]],
      ["forgedTransmits", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetworkTrafficShapingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkTrafficShapingPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["averageBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["peakBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNicFailureCriteria,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNicFailureCriteria",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["checkSpeed", "SOAP::SOAPString", [0, 1]],
      ["speed", "SOAP::SOAPInt", [0, 1]],
      ["checkDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["checkErrorPercent", "SOAP::SOAPBoolean", [0, 1]],
      ["percentage", "SOAP::SOAPInt", [0, 1]],
      ["checkBeacon", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNicOrderPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNicOrderPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeNic", "SOAP::SOAPString[]", [0, nil]],
      ["standbyNic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNicTeamingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNicTeamingPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString", [0, 1]],
      ["reversePolicy", "SOAP::SOAPBoolean", [0, 1]],
      ["notifySwitches", "SOAP::SOAPBoolean", [0, 1]],
      ["rollingOrder", "SOAP::SOAPBoolean", [0, 1]],
      ["failureCriteria", "VimWs25::HostNicFailureCriteria", [0, 1]],
      ["nicOrder", "VimWs25::HostNicOrderPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNetworkPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["security", "VimWs25::HostNetworkSecurityPolicy", [0, 1]],
      ["nicTeaming", "VimWs25::HostNicTeamingPolicy", [0, 1]],
      ["offloadPolicy", "VimWs25::HostNetOffloadCapabilities", [0, 1]],
      ["shapingPolicy", "VimWs25::HostNetworkTrafficShapingPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNtpConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNtpConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["server", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNumericSensorInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumericSensorInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["healthState", "VimWs25::ElementDescription", [0, 1]],
      ["currentReading", "SOAP::SOAPLong"],
      ["unitModifier", "SOAP::SOAPInt"],
      ["baseUnits", "SOAP::SOAPString"],
      ["rateUnits", "SOAP::SOAPString", [0, 1]],
      ["sensorType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostNumericSensorInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostNumericSensorInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["status", "VimWs25::HostPatchManagerStatus[]", [0, nil]],
      ["xmlResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerStatusPrerequisitePatch,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerStatusPrerequisitePatch",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["installState", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPatchManagerStatusPrerequisitePatch,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPatchManagerStatusPrerequisitePatch") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerStatus",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["applicable", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString[]", [0, nil]],
      ["integrity", "SOAP::SOAPString", [0, 1]],
      ["installed", "SOAP::SOAPBoolean"],
      ["installState", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisitePatch", "VimWs25::HostPatchManagerStatusPrerequisitePatch[]", [0, nil]],
      ["restartRequired", "SOAP::SOAPBoolean"],
      ["reconnectRequired", "SOAP::SOAPBoolean"],
      ["vmOffRequired", "SOAP::SOAPBoolean"],
      ["supersededPatchIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPatchManagerStatus,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPatchManagerStatus") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerLocator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["proxy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerPatchManagerOperationSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerPatchManagerOperationSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["proxy", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["cmdOption", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPathSelectionPolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPathSelectionPolicyOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "VimWs25::ElementDescription"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPathSelectionPolicyOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPathSelectionPolicyOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPciDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPciDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["classId", "SOAP::SOAPShort"],
      ["bus", "SOAP::SOAPByte"],
      ["slot", "SOAP::SOAPByte"],
      ["function", "SOAP::SOAPByte"],
      ["vendorId", "SOAP::SOAPShort"],
      ["subVendorId", "SOAP::SOAPShort"],
      ["vendorName", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPShort"],
      ["subDeviceId", "SOAP::SOAPShort"],
      ["parentBridge", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPciDevice,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPciDevice") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPciPassthruConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPciPassthruConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPciPassthruConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPciPassthruConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPciPassthruInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPciPassthruInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["dependentDevice", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"],
      ["passthruCapable", "SOAP::SOAPBoolean"],
      ["passthruActive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPciPassthruInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPciPassthruInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::HostIpConfig", [0, 1]],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["spec", "VimWs25::PhysicalNicSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNicConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNicConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicLinkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicLinkInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["speedMb", "SOAP::SOAPInt"],
      ["duplex", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNicLinkInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNicLinkInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicHint,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicHint",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicIpHint,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicIpHint",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["ipSubnet", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNicIpHint,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNicIpHint") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicNameHint,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicNameHint",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNicNameHint,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNicNameHint") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicHintInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicHintInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["subnet", "VimWs25::PhysicalNicIpHint[]", [0, nil]],
      ["network", "VimWs25::PhysicalNicNameHint[]", [0, nil]],
      ["connectedSwitchPort", "VimWs25::PhysicalNicCdpInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNicHintInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNicHintInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicCdpDeviceCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicCdpDeviceCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["router", "SOAP::SOAPBoolean"],
      ["transparentBridge", "SOAP::SOAPBoolean"],
      ["sourceRouteBridge", "SOAP::SOAPBoolean"],
      ["networkSwitch", "SOAP::SOAPBoolean"],
      ["host", "SOAP::SOAPBoolean"],
      ["igmpEnabled", "SOAP::SOAPBoolean"],
      ["repeater", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicCdpInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicCdpInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cdpVersion", "SOAP::SOAPInt", [0, 1]],
      ["timeout", "SOAP::SOAPInt", [0, 1]],
      ["ttl", "SOAP::SOAPInt", [0, 1]],
      ["samples", "SOAP::SOAPInt", [0, 1]],
      ["devId", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["portId", "SOAP::SOAPString", [0, 1]],
      ["deviceCapability", "VimWs25::PhysicalNicCdpDeviceCapability", [0, 1]],
      ["softwareVersion", "SOAP::SOAPString", [0, 1]],
      ["hardwarePlatform", "SOAP::SOAPString", [0, 1]],
      ["ipPrefix", "SOAP::SOAPString", [0, 1]],
      ["ipPrefixLen", "SOAP::SOAPInt", [0, 1]],
      ["vlan", "SOAP::SOAPInt", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["systemName", "SOAP::SOAPString", [0, 1]],
      ["systemOID", "SOAP::SOAPString", [0, 1]],
      ["mgmtAddr", "SOAP::SOAPString", [0, 1]],
      ["location", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNic,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNic",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["pci", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]],
      ["validLinkSpecification", "VimWs25::PhysicalNicLinkInfo[]", [0, nil]],
      ["spec", "VimWs25::PhysicalNicSpec"],
      ["wakeOnLanSupported", "SOAP::SOAPBoolean"],
      ["mac", "SOAP::SOAPString"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2SupportedMode", "SOAP::SOAPString", [0, 1]],
      ["resourcePoolSchedulerAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["resourcePoolSchedulerDisallowedReason", "SOAP::SOAPString[]", [0, nil]],
      ["autoNegotiateSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNic,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNic") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyAdapter,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyAdapter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPlugStoreTopologyAdapter,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPlugStoreTopologyAdapter") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyPath,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyPath",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["channelNumber", "SOAP::SOAPInt", [0, 1]],
      ["targetNumber", "SOAP::SOAPInt", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]],
      ["adapter", "SOAP::SOAPString", [0, 1]],
      ["target", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPlugStoreTopologyPath,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPlugStoreTopologyPath") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPlugStoreTopologyDevice,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPlugStoreTopologyDevice") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyPlugin,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyPlugin",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString[]", [0, nil]],
      ["claimedPath", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPlugStoreTopologyPlugin,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPlugStoreTopologyPlugin") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyTarget",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["transport", "VimWs25::HostTargetTransport", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPlugStoreTopologyTarget,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPlugStoreTopologyTarget") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPlugStoreTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopology",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["adapter", "VimWs25::HostPlugStoreTopologyAdapter[]", [0, nil]],
      ["path", "VimWs25::HostPlugStoreTopologyPath[]", [0, nil]],
      ["target", "VimWs25::HostPlugStoreTopologyTarget[]", [0, nil]],
      ["device", "VimWs25::HostPlugStoreTopologyDevice[]", [0, nil]],
      ["plugin", "VimWs25::HostPlugStoreTopologyPlugin[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPortGroupSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vlanId", "SOAP::SOAPInt"],
      ["vswitchName", "SOAP::SOAPString"],
      ["policy", "VimWs25::HostNetworkPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPortGroupConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostPortGroupSpec", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPortGroupConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPortGroupConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPortGroupPort,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupPort",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["mac", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPortGroupPort,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPortGroupPort") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPortGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroup",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["port", "VimWs25::HostPortGroupPort[]", [0, nil]],
      ["vswitch", "SOAP::SOAPString", [0, 1]],
      ["computedPolicy", "VimWs25::HostNetworkPolicy"],
      ["spec", "VimWs25::HostPortGroupSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPortGroup,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPortGroup") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPowerPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPowerPolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["shortName", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPowerPolicy,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPowerPolicy") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerSystemCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerSystemCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["availablePolicy", "VimWs25::HostPowerPolicy[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PowerSystemInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerSystemInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "VimWs25::HostPowerPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostResignatureRescanResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostResignatureRescanResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rescan", "VimWs25::HostVmfsRescanResult[]", [0, nil]],
      ["result", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallRule,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRule",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["endPort", "SOAP::SOAPInt", [0, 1]],
      ["direction", "SOAP::SOAPString"],
      ["protocol", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostFirewallRule,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostFirewallRule") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallRuleset,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRuleset",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["rule", "VimWs25::HostFirewallRule[]", [1, nil]],
      ["service", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostFirewallRuleset,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostFirewallRuleset") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostRuntimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["connectionState", "SOAP::SOAPString"],
      ["powerState", "SOAP::SOAPString"],
      ["standbyMode", "SOAP::SOAPString", [0, 1]],
      ["inMaintenanceMode", "SOAP::SOAPBoolean"],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["healthSystemRuntime", "VimWs25::HealthSystemRuntime", [0, 1]],
      ["tpmPcrValues", "VimWs25::HostTpmDigestInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostScsiDiskPartition,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiDiskPartition",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["partition", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostScsiDiskPartition,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostScsiDiskPartition") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostScsiDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VimWs25::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VimWs25::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VimWs25::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VimWs25::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]],
      ["capacity", "VimWs25::HostDiskDimensionsLba"],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostScsiDisk,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostScsiDisk") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunCapabilities",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["updateDisplayNameSupported", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunDurableName,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunDurableName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["namespace", "SOAP::SOAPString"],
      ["namespaceId", "SOAP::SOAPByte"],
      ["data", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfScsiLunDurableName,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ScsiLunDurableName") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunDescriptor",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["quality", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfScsiLunDescriptor,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ScsiLunDescriptor") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLun,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLun",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VimWs25::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VimWs25::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VimWs25::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VimWs25::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfScsiLun,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ScsiLun") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostScsiTopologyInterface,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopologyInterface",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["target", "VimWs25::HostScsiTopologyTarget[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostScsiTopologyInterface,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostScsiTopologyInterface") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostScsiTopologyTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopologyTarget",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["target", "SOAP::SOAPInt"],
      ["lun", "VimWs25::HostScsiTopologyLun[]", [0, nil]],
      ["transport", "VimWs25::HostTargetTransport", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostScsiTopologyTarget,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostScsiTopologyTarget") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostScsiTopologyLun,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopologyLun",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPInt"],
      ["scsiLun", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostScsiTopologyLun,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostScsiTopologyLun") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostScsiTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopology",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["adapter", "VimWs25::HostScsiTopologyInterface[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSecuritySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSecuritySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["adminPassword", "SOAP::SOAPString", [0, 1]],
      ["removePermission", "VimWs25::Permission[]", [0, nil]],
      ["addPermission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostService,
    :schema_ns => "urn:vim25",
    :schema_type => "HostService",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["uninstallable", "SOAP::SOAPBoolean"],
      ["running", "SOAP::SOAPBoolean"],
      ["ruleset", "SOAP::SOAPString[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostService,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostService") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServiceConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceId", "SOAP::SOAPString"],
      ["startupPolicy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostServiceConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostServiceConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostServiceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServiceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["service", "VimWs25::HostService[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSnmpDestination,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpDestination",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["community", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostSnmpDestination,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostSnmpDestination") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSnmpConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["readOnlyCommunities", "SOAP::SOAPString[]", [0, nil]],
      ["trapTargets", "VimWs25::HostSnmpDestination[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSnmpSystemAgentLimits,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpSystemAgentLimits",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["maxReadOnlyCommunities", "SOAP::SOAPInt"],
      ["maxTrapDestinations", "SOAP::SOAPInt"],
      ["maxCommunityLength", "SOAP::SOAPInt"],
      ["maxBufferSize", "SOAP::SOAPInt"],
      ["capability", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSslThumbprintInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSslThumbprintInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["sslThumbprints", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostStorageArrayTypePolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageArrayTypePolicyOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "VimWs25::ElementDescription"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostStorageArrayTypePolicyOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostStorageArrayTypePolicyOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostStorageDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageDeviceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostBusAdapter", "VimWs25::HostHostBusAdapter[]", [0, nil]],
      ["scsiLun", "VimWs25::ScsiLun[]", [0, nil]],
      ["scsiTopology", "VimWs25::HostScsiTopology", [0, 1]],
      ["multipathInfo", "VimWs25::HostMultipathInfo", [0, 1]],
      ["plugStoreTopology", "VimWs25::HostPlugStoreTopology", [0, 1]],
      ["softwareInternetScsiEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHardwareSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VimWs25::HostSystemIdentificationInfo[]", [0, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["cpuModel", "SOAP::SOAPString"],
      ["cpuMhz", "SOAP::SOAPInt"],
      ["numCpuPkgs", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["numNics", "SOAP::SOAPInt"],
      ["numHBAs", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostListSummaryQuickStats,
    :schema_ns => "urn:vim25",
    :schema_type => "HostListSummaryQuickStats",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["distributedCpuFairness", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryFairness", "SOAP::SOAPInt", [0, 1]],
      ["uptime", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["product", "VimWs25::AboutInfo", [0, 1]],
      ["vmotionEnabled", "SOAP::SOAPBoolean"],
      ["faultToleranceEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["featureVersion", "VimWs25::HostFeatureVersionInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostListSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "HostListSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["hardware", "VimWs25::HostHardwareSummary", [0, 1]],
      ["runtime", "VimWs25::HostRuntimeInfo", [0, 1]],
      ["config", "VimWs25::HostConfigSummary"],
      ["quickStats", "VimWs25::HostListSummaryQuickStats"],
      ["overallStatus", "SOAP::SOAPString"],
      ["rebootRequired", "SOAP::SOAPBoolean"],
      ["customValue", "VimWs25::CustomFieldValue[]", [0, nil]],
      ["managementServerIp", "SOAP::SOAPString", [0, 1]],
      ["maxEVCModeKey", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemHealthInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemHealthInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numericSensorInfo", "VimWs25::HostNumericSensorInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemIdentificationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemIdentificationInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["identifierValue", "SOAP::SOAPString"],
      ["identifierType", "VimWs25::ElementDescription"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostSystemIdentificationInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostSystemIdentificationInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemResourceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemResourceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["child", "VimWs25::HostSystemResourceInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostSystemResourceInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostSystemResourceInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostTargetTransport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostParallelScsiTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostParallelScsiTargetTransport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostBlockAdapterTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBlockAdapterTargetTransport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFibreChannelTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFibreChannelTargetTransport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiTargetTransport",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDigestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDigestInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostTpmDigestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostTpmDigestInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["pcrNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostTpmDigestInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostTpmDigestInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsExtent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsExtent",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "VimWs25::HostScsiDiskPartition"],
      ["devicePath", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["isHeadExtent", "SOAP::SOAPBoolean"],
      ["ordinal", "SOAP::SOAPInt"],
      ["startBlock", "SOAP::SOAPInt"],
      ["endBlock", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostUnresolvedVmfsExtent,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostUnresolvedVmfsExtent") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResignatureSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResignatureSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResolutionResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResolutionResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["spec", "VimWs25::HostUnresolvedVmfsResolutionSpec"],
      ["vmfs", "VimWs25::HostVmfsVolume", [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostUnresolvedVmfsResolutionResult,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostUnresolvedVmfsResolutionResult") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResolutionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResolutionSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]],
      ["uuidResolution", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostUnresolvedVmfsResolutionSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostUnresolvedVmfsResolutionSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsVolumeResolveStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsVolumeResolveStatus",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["resolvable", "SOAP::SOAPBoolean"],
      ["incompleteExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["multipleCopies", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsVolume",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extent", "VimWs25::HostUnresolvedVmfsExtent[]", [1, nil]],
      ["vmfsLabel", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["totalBlocks", "SOAP::SOAPInt"],
      ["resolveStatus", "VimWs25::HostUnresolvedVmfsVolumeResolveStatus"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostUnresolvedVmfsVolume,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostUnresolvedVmfsVolume") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVMotionConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmotionNicKey", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVMotionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["netConfig", "VimWs25::HostVMotionNetConfig", [0, 1]],
      ["ipConfig", "VimWs25::HostIpConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVMotionNetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionNetConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["candidateVnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::HostIpConfig", [0, 1]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["distributedVirtualPort", "VimWs25::DistributedVirtualSwitchPortConnection", [0, 1]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["tsoEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNicConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualNicSpec", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVirtualNicConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVirtualNicConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNic,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNic",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualNicSpec"],
      ["port", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVirtualNic,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVirtualNic") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNicConnection,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicConnection",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["dvPort", "VimWs25::DistributedVirtualSwitchPortConnection", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNicManagerNicTypeSelection,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicManagerNicTypeSelection",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vnic", "VimWs25::HostVirtualNicConnection"],
      ["nicType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVirtualNicManagerNicTypeSelection,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVirtualNicManagerNicTypeSelection") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualNicManagerNetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualNicManagerNetConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nicType", "SOAP::SOAPString"],
      ["multiSelectAllowed", "SOAP::SOAPBoolean"],
      ["candidateVnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualNicManagerNetConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualNicManagerNetConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNicManagerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicManagerInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["netConfig", "VimWs25::VirtualNicManagerNetConfig[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchBridge",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchAutoBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchAutoBridge",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["excludedNicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchSimpleBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchSimpleBridge",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchBondBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchBondBridge",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString[]", [1, nil]],
      ["beacon", "VimWs25::HostVirtualSwitchBeaconConfig", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VimWs25::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchBeaconConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchBeaconConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numPorts", "SOAP::SOAPInt"],
      ["bridge", "VimWs25::HostVirtualSwitchBridge", [0, 1]],
      ["policy", "VimWs25::HostNetworkPolicy", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitchConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchConfig",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVirtualSwitchConfig,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVirtualSwitchConfig") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualSwitch,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitch",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["portgroup", "SOAP::SOAPString[]", [0, nil]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostVirtualSwitchSpec"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVirtualSwitch,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVirtualSwitch") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVmfsRescanResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVmfsRescanResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostVmfsRescanResult,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostVmfsRescanResult") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVmfsSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVmfsSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extent", "VimWs25::HostScsiDiskPartition"],
      ["blockSizeMb", "SOAP::SOAPInt", [0, 1]],
      ["majorVersion", "SOAP::SOAPInt"],
      ["volumeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVmfsVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVmfsVolume",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["blockSizeMb", "SOAP::SOAPInt"],
      ["maxBlocks", "SOAP::SOAPInt"],
      ["majorVersion", "SOAP::SOAPInt"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition[]", [1, nil]],
      ["vmfsUpgradable", "SOAP::SOAPBoolean"],
      ["forceMountedInfo", "VimWs25::HostForceMountedInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetDhcpConfigInfoDhcpOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigInfoDhcpOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean"],
      ["config", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetDhcpConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipv6", "VimWs25::NetDhcpConfigInfoDhcpOptions", [0, 1]],
      ["ipv4", "VimWs25::NetDhcpConfigInfoDhcpOptions", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetDhcpConfigSpecDhcpOptionsSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigSpecDhcpOptionsSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean", [0, 1]],
      ["config", "VimWs25::KeyValue[]", [1, nil]],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetDhcpConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipv6", "VimWs25::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]],
      ["ipv4", "VimWs25::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetDnsConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDnsConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetDnsConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDnsConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpConfigInfoIpAddress,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfoIpAddress",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNetIpConfigInfoIpAddress,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NetIpConfigInfoIpAddress") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VimWs25::NetIpConfigInfoIpAddress[]", [0, nil]],
      ["dhcp", "VimWs25::NetDhcpConfigInfo", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpConfigSpecIpAddressSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigSpecIpAddressSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNetIpConfigSpecIpAddressSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NetIpConfigSpecIpAddressSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VimWs25::NetIpConfigSpecIpAddressSpec[]", [0, nil]],
      ["dhcp", "VimWs25::NetDhcpConfigSpec", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpRouteConfigInfoGateway,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigInfoGateway",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpRouteConfigInfoIpRoute,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigInfoIpRoute",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VimWs25::NetIpRouteConfigInfoGateway"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNetIpRouteConfigInfoIpRoute,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NetIpRouteConfigInfoIpRoute") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpRouteConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::NetIpRouteConfigInfoIpRoute[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpRouteConfigSpecGatewaySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigSpecGatewaySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpRouteConfigSpecIpRouteSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigSpecIpRouteSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VimWs25::NetIpRouteConfigSpecGatewaySpec"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNetIpRouteConfigSpecIpRouteSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NetIpRouteConfigSpecIpRouteSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpRouteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::NetIpRouteConfigSpecIpRouteSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpStackInfoNetToMedia,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoNetToMedia",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["physicalAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNetIpStackInfoNetToMedia,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NetIpStackInfoNetToMedia") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpStackInfoDefaultRouter,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoDefaultRouter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["lifetime", "SOAP::SOAPDateTime"],
      ["preference", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNetIpStackInfoDefaultRouter,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NetIpStackInfoDefaultRouter") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpStackInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["neighbor", "VimWs25::NetIpStackInfoNetToMedia[]", [0, nil]],
      ["defaultRouter", "VimWs25::NetIpStackInfoDefaultRouter[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetBIOSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetBIOSConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WinNetBIOSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "WinNetBIOSConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"],
      ["primaryWINS", "SOAP::SOAPString"],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ArrayUpdateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayUpdateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::BoolOption,
    :schema_ns => "urn:vim25",
    :schema_type => "BoolOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["supported", "SOAP::SOAPBoolean"],
      ["defaultValue", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ChoiceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ChoiceOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["choiceInfo", "VimWs25::ElementDescription[]", [1, nil]],
      ["defaultIndex", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FloatOption,
    :schema_ns => "urn:vim25",
    :schema_type => "FloatOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPFloat"],
      ["max", "SOAP::SOAPFloat"],
      ["defaultValue", "SOAP::SOAPFloat"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IntOption,
    :schema_ns => "urn:vim25",
    :schema_type => "IntOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPInt"],
      ["max", "SOAP::SOAPInt"],
      ["defaultValue", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::LongOption,
    :schema_ns => "urn:vim25",
    :schema_type => "LongOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPLong"],
      ["max", "SOAP::SOAPLong"],
      ["defaultValue", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OptionDef,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionDef",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["optionType", "VimWs25::OptionType"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOptionDef,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OptionDef") }
  )

  EncodedRegistry.register(
    :class => VimWs25::OptionType,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionType",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OptionValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionValue",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOptionValue,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OptionValue") }
  )

  EncodedRegistry.register(
    :class => VimWs25::StringOption,
    :schema_ns => "urn:vim25",
    :schema_type => "StringOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString"],
      ["validCharacters", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ApplyProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplyProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComplianceLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceLocator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expressionName", "SOAP::SOAPString"],
      ["applyPath", "VimWs25::ProfilePropertyPath"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfComplianceLocator,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ComplianceLocator") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ComplianceProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expression", "VimWs25::ProfileExpression[]", [1, nil]],
      ["rootExpression", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ComplianceFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceFailure",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failureType", "SOAP::SOAPString"],
      ["message", "VimWs25::LocalizableMessage"],
      ["expressionName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfComplianceFailure,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ComplianceFailure") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ComplianceResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profile", "VimWs25::ManagedObjectReference", [0, 1]],
      ["complianceStatus", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["checkTime", "SOAP::SOAPDateTime", [0, 1]],
      ["failure", "VimWs25::ComplianceFailure[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfComplianceResult,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ComplianceResult") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileDeferredPolicyOptionParameter,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDeferredPolicyOptionParameter",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inputPath", "VimWs25::ProfilePropertyPath"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileDeferredPolicyOptionParameter,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileDeferredPolicyOptionParameter") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileExpression,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileExpression") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileSimpleExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileSimpleExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["expressionType", "SOAP::SOAPString"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileCompositeExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCompositeExpression",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["operator", "SOAP::SOAPString"],
      ["expressionName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileExpressionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExpressionMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expressionId", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileExpressionMetadata,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileExpressionMetadata") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileParameterMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileParameterMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["type", "SOAP::SOAPString"],
      ["optional", "SOAP::SOAPBoolean"],
      ["defaultValue", nil, [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileParameterMetadata,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileParameterMetadata") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfilePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePolicy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["policyOption", "VimWs25::PolicyOption"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfilePolicy,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfilePolicy") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfilePolicyOptionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePolicyOptionMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfilePolicyOptionMetadata,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfilePolicyOptionMetadata") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileCompositePolicyOptionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCompositePolicyOptionMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]],
      ["option", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserInputRequiredParameterMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "UserInputRequiredParameterMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]],
      ["userInputParameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfilePolicyMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePolicyMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["possibleOption", "VimWs25::ProfilePolicyOptionMetadata[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfilePolicyMetadata,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfilePolicyMetadata") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "PolicyOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPolicyOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PolicyOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::CompositePolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "CompositePolicyOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["option", "VimWs25::PolicyOption[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileSerializedCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileSerializedCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["profileConfigString", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileDescriptionSection,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDescriptionSection",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["description", "VimWs25::ExtendedElementDescription"],
      ["message", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileDescriptionSection,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileDescriptionSection") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["section", "VimWs25::ProfileDescriptionSection[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileMetadata",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "VimWs25::ExtendedDescription", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileMetadata,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileMetadata") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfilePropertyPath,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePropertyPath",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profilePath", "SOAP::SOAPString"],
      ["policyId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterProfileConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["complyProfile", "VimWs25::ComplianceProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterProfileCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterProfileConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterProfileCompleteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileCompleteConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["complyProfile", "VimWs25::ComplianceProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterProfileConfigServiceCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileConfigServiceCreateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["serviceType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileExecuteError,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExecuteError",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "VimWs25::ProfilePropertyPath", [0, 1]],
      ["message", "VimWs25::LocalizableMessage"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfProfileExecuteError,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ProfileExecuteError") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileExecuteResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExecuteResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["configSpec", "VimWs25::HostConfigSpec", [0, 1]],
      ["inapplicablePath", "SOAP::SOAPString[]", [0, nil]],
      ["requireInput", "VimWs25::ProfileDeferredPolicyOptionParameter[]", [0, nil]],
      ["error", "VimWs25::ProfileExecuteError[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostApplyProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "HostApplyProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["memory", "VimWs25::HostMemoryProfile", [0, 1]],
      ["storage", "VimWs25::StorageProfile", [0, 1]],
      ["network", "VimWs25::NetworkProfile", [0, 1]],
      ["datetime", "VimWs25::DateTimeProfile", [0, 1]],
      ["firewall", "VimWs25::FirewallProfile", [0, 1]],
      ["security", "VimWs25::SecurityProfile", [0, 1]],
      ["service", "VimWs25::ServiceProfile[]", [0, nil]],
      ["option", "VimWs25::OptionProfile[]", [0, nil]],
      ["userAccount", "VimWs25::UserProfile[]", [0, nil]],
      ["usergroupAccount", "VimWs25::UserGroupProfile[]", [0, nil]],
      ["authentication", "VimWs25::AuthenticationProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPhysicalNicProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PhysicalNicProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMemoryProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMemoryProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::UserProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "UserProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfUserProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "UserProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::UserGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "UserGroupProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfUserGroupProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "UserGroupProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::SecurityProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "SecurityProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["permission", "VimWs25::PermissionProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OptionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfOptionProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "OptionProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DateTimeProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DateTimeProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ServiceProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfServiceProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ServiceProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::FirewallProfileRulesetProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "FirewallProfileRulesetProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfFirewallProfileRulesetProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "FirewallProfileRulesetProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::FirewallProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "FirewallProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["ruleset", "VimWs25::FirewallProfileRulesetProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NasStorageProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NasStorageProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfNasStorageProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "NasStorageProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::StorageProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["nasStorage", "VimWs25::NasStorageProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkProfileDnsConfigProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkProfileDnsConfigProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["vswitch", "VimWs25::VirtualSwitchProfile[]", [0, nil]],
      ["vmPortGroup", "VimWs25::VmPortGroupProfile[]", [0, nil]],
      ["hostPortGroup", "VimWs25::HostPortGroupProfile[]", [0, nil]],
      ["serviceConsolePortGroup", "VimWs25::ServiceConsolePortGroupProfile[]", [0, nil]],
      ["dnsConfig", "VimWs25::NetworkProfileDnsConfigProfile", [0, 1]],
      ["ipRouteConfig", "VimWs25::IpRouteProfile", [0, 1]],
      ["consoleIpRouteConfig", "VimWs25::IpRouteProfile", [0, 1]],
      ["pnic", "VimWs25::PhysicalNicProfile[]", [0, nil]],
      ["dvswitch", "VimWs25::DvsProfile[]", [0, nil]],
      ["dvsServiceConsoleNic", "VimWs25::DvsServiceConsoleVNicProfile[]", [0, nil]],
      ["dvsHostNic", "VimWs25::DvsHostVNicProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsVNicProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsServiceConsoleVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsServiceConsoleVNicProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDvsServiceConsoleVNicProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DvsServiceConsoleVNicProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsHostVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostVNicProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDvsHostVNicProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DvsHostVNicProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DvsProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["uplink", "VimWs25::PnicUplinkProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfDvsProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "DvsProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::PnicUplinkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PnicUplinkProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPnicUplinkProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PnicUplinkProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::IpRouteProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "IpRouteProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["staticRoute", "VimWs25::StaticRouteProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::StaticRouteProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "StaticRouteProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfStaticRouteProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "StaticRouteProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::LinkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::NumPortsProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NumPortsProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSwitchProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSwitchProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["link", "VimWs25::LinkProfile"],
      ["numPorts", "VimWs25::NumPortsProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualSwitchProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualSwitchProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VlanProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VlanProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSwitchSelectionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSwitchSelectionProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PortGroupProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmPortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPortGroupProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVmPortGroupProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VmPortGroupProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostPortGroupProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostPortGroupProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ServiceConsolePortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceConsolePortGroupProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfServiceConsolePortGroupProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ServiceConsolePortGroupProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::NetworkPolicyProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkPolicyProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IpAddressProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "IpAddressProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AuthenticationProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthenticationProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["activeDirectory", "VimWs25::ActiveDirectoryProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ActiveDirectoryProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ActiveDirectoryProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::PermissionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionProfile",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfPermissionProfile,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "PermissionProfile") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProfileConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["applyProfile", "VimWs25::HostApplyProfile", [0, 1]],
      ["defaultComplyProfile", "VimWs25::ComplianceProfile", [0, 1]],
      ["defaultComplyLocator", "VimWs25::ComplianceLocator[]", [0, nil]],
      ["customComplyProfile", "VimWs25::ComplianceProfile", [0, 1]],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProfileConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProfileCompleteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileCompleteConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["applyProfile", "VimWs25::HostApplyProfile", [0, 1]],
      ["customComplyProfile", "VimWs25::ComplianceProfile", [0, 1]],
      ["disabledExpressionListChanged", "SOAP::SOAPBoolean"],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProfileHostBasedConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileHostBasedConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostProfileManagerConfigTaskList,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileManagerConfigTaskList",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configSpec", "VimWs25::HostConfigSpec", [0, 1]],
      ["taskDescription", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskDetail,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskDetail",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["frequency", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfScheduledTaskDetail,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "ScheduledTaskDetail") }
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskDescription",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::TypeDescription[]", [1, nil]],
      ["schedulerInfo", "VimWs25::ScheduledTaskDetail[]", [1, nil]],
      ["state", "VimWs25::ElementDescription[]", [1, nil]],
      ["dayOfWeek", "VimWs25::ElementDescription[]", [1, nil]],
      ["weekOfMonth", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VimWs25::TaskScheduler"],
      ["action", "VimWs25::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["nextRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["prevRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["state", "SOAP::SOAPString"],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["activeTask", "VimWs25::ManagedObjectReference", [0, 1]],
      ["taskObject", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::AfterStartupTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "AfterStartupTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::OnceTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "OnceTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["runAt", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::RecurrentTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "RecurrentTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HourlyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "HourlyTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::DailyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "DailyTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::WeeklyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "WeeklyTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["sunday", "SOAP::SOAPBoolean"],
      ["monday", "SOAP::SOAPBoolean"],
      ["tuesday", "SOAP::SOAPBoolean"],
      ["wednesday", "SOAP::SOAPBoolean"],
      ["thursday", "SOAP::SOAPBoolean"],
      ["friday", "SOAP::SOAPBoolean"],
      ["saturday", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MonthlyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "MonthlyTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MonthlyByDayTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "MonthlyByDayTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["day", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::MonthlyByWeekdayTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "MonthlyByWeekdayTaskScheduler",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["offset", "SOAP::SOAPString"],
      ["weekday", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ScheduledTaskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VimWs25::TaskScheduler"],
      ["action", "VimWs25::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppCloneSpecNetworkMappingPair,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpecNetworkMappingPair",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::ManagedObjectReference"],
      ["destination", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppCloneSpecNetworkMappingPair,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppCloneSpecNetworkMappingPair") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppCloneSpecResourceMap,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpecResourceMap",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::ManagedObjectReference"],
      ["parent", "VimWs25::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["location", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppCloneSpecResourceMap,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppCloneSpecResourceMap") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppCloneSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["location", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VimWs25::VAppCloneSpecNetworkMappingPair[]", [0, nil]],
      ["property", "VimWs25::KeyValue[]", [0, nil]],
      ["resourceMapping", "VimWs25::VAppCloneSpecResourceMap[]", [0, nil]],
      ["provisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppEntityConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppEntityConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference", [0, 1]],
      ["tag", "SOAP::SOAPString", [0, 1]],
      ["startOrder", "SOAP::SOAPInt", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitingForGuest", "SOAP::SOAPBoolean", [0, 1]],
      ["startAction", "SOAP::SOAPString", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppEntityConfigInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppEntityConfigInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["supportedAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["supportedIpProtocol", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IpPoolIpPoolConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "IpPoolIpPoolConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["subnetAddress", "SOAP::SOAPString", [0, 1]],
      ["netmask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString", [0, 1]],
      ["range", "SOAP::SOAPString", [0, 1]],
      ["dns", "SOAP::SOAPString[]", [0, nil]],
      ["dhcpServerAvailable", "SOAP::SOAPBoolean", [0, 1]],
      ["ipPoolEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::IpPoolAssociation,
    :schema_ns => "urn:vim25",
    :schema_type => "IpPoolAssociation",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfIpPoolAssociation,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "IpPoolAssociation") }
  )

  EncodedRegistry.register(
    :class => VimWs25::IpPool,
    :schema_ns => "urn:vim25",
    :schema_type => "IpPool",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["ipv4Config", "VimWs25::IpPoolIpPoolConfigInfo", [0, 1]],
      ["ipv6Config", "VimWs25::IpPoolIpPoolConfigInfo", [0, 1]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["dnsSearchPath", "SOAP::SOAPString", [0, 1]],
      ["hostPrefix", "SOAP::SOAPString", [0, 1]],
      ["httpProxy", "SOAP::SOAPString", [0, 1]],
      ["networkAssociation", "VimWs25::IpPoolAssociation[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfIpPool,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "IpPool") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppOvfSectionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppOvfSectionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["namespace", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["atEnvelopeLevel", "SOAP::SOAPBoolean", [0, 1]],
      ["contents", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppOvfSectionInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppOvfSectionInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppProductInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppProductInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["fullVersion", "SOAP::SOAPString", [0, 1]],
      ["vendorUrl", "SOAP::SOAPString", [0, 1]],
      ["productUrl", "SOAP::SOAPString", [0, 1]],
      ["appUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppProductInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppProductInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppPropertyInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppPropertyInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["id", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString", [0, 1]],
      ["label", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userConfigurable", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString", [0, 1]],
      ["value", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppPropertyInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppPropertyInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductInfo[]", [0, nil]],
      ["property", "VimWs25::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductSpec[]", [0, nil]],
      ["property", "VimWs25::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualAppImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppImportSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["vAppConfigSpec", "VimWs25::VAppConfigSpec"],
      ["resourcePoolSpec", "VimWs25::ResourceConfigSpec"],
      ["child", "VimWs25::ImportSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductInfo[]", [0, nil]],
      ["property", "VimWs25::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductSpec[]", [0, nil]],
      ["property", "VimWs25::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppProductSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::VAppProductInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppProductSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppProductSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppPropertySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppPropertySpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::VAppPropertyInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppPropertySpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppPropertySpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppOvfSectionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppOvfSectionSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::VAppOvfSectionInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVAppOvfSectionSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VAppOvfSectionSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineAffinityInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineAffinityInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["affinitySet", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineBootOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineBootOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["bootDelay", "SOAP::SOAPLong", [0, 1]],
      ["enterBIOSSetup", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryDelay", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCapability",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["snapshotOperationsSupported", "SOAP::SOAPBoolean"],
      ["multipleSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["snapshotConfigSupported", "SOAP::SOAPBoolean"],
      ["poweredOffSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["memorySnapshotsSupported", "SOAP::SOAPBoolean"],
      ["revertToSnapshotSupported", "SOAP::SOAPBoolean"],
      ["quiescedSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["disableSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["lockSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["consolePreferencesSupported", "SOAP::SOAPBoolean"],
      ["cpuFeatureMaskSupported", "SOAP::SOAPBoolean"],
      ["s1AcpiManagementSupported", "SOAP::SOAPBoolean"],
      ["settingScreenResolutionSupported", "SOAP::SOAPBoolean"],
      ["toolsAutoUpdateSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnSupported", "SOAP::SOAPBoolean"],
      ["npivWwnOnNonRdmVmSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnDisableSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmNpivWwnUpdateSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["swapPlacementSupported", "SOAP::SOAPBoolean"],
      ["toolsSyncTimeSupported", "SOAP::SOAPBoolean"],
      ["virtualMmuUsageSupported", "SOAP::SOAPBoolean"],
      ["diskSharesSupported", "SOAP::SOAPBoolean"],
      ["bootOptionsSupported", "SOAP::SOAPBoolean"],
      ["bootRetryOptionsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["settingVideoRamSizeSupported", "SOAP::SOAPBoolean"],
      ["settingDisplayTopologySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineCdromInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCdromInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineCdromInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineCdromInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineCloneSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCloneSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["location", "VimWs25::VirtualMachineRelocateSpec"],
      ["template", "SOAP::SOAPBoolean"],
      ["config", "VimWs25::VirtualMachineConfigSpec", [0, 1]],
      ["customization", "VimWs25::CustomizationSpec", [0, 1]],
      ["powerOn", "SOAP::SOAPBoolean"],
      ["snapshot", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfoDatastoreUrlPair,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfoDatastoreUrlPair",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineConfigInfoDatastoreUrlPair,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineConfigInfoDatastoreUrlPair") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString"],
      ["modified", "SOAP::SOAPDateTime"],
      ["name", "SOAP::SOAPString"],
      ["guestFullName", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"],
      ["alternateGuestName", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VimWs25::VirtualMachineFileInfo"],
      ["tools", "VimWs25::ToolsConfigInfo", [0, 1]],
      ["flags", "VimWs25::VirtualMachineFlagInfo"],
      ["consolePreferences", "VimWs25::VirtualMachineConsolePreferences", [0, 1]],
      ["defaultPowerOps", "VimWs25::VirtualMachineDefaultPowerOpInfo"],
      ["hardware", "VimWs25::VirtualHardware"],
      ["cpuAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["hotPlugMemoryLimit", "SOAP::SOAPLong", [0, 1]],
      ["hotPlugMemoryIncrementSize", "SOAP::SOAPLong", [0, 1]],
      ["cpuAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VimWs25::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["extraConfig", "VimWs25::OptionValue[]", [0, nil]],
      ["cpuFeatureMask", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["datastoreUrl", "VimWs25::VirtualMachineConfigInfoDatastoreUrlPair[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VimWs25::VirtualMachineBootOptions", [0, 1]],
      ["ftInfo", "VimWs25::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfig", "VimWs25::VmConfigInfo", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["guestOSDescriptor", "VimWs25::GuestOsDescriptor[]", [1, nil]],
      ["guestOSDefaultIndex", "SOAP::SOAPInt"],
      ["hardwareOptions", "VimWs25::VirtualHardwareOption"],
      ["capabilities", "VimWs25::VirtualMachineCapability"],
      ["datastore", "VimWs25::DatastoreOption"],
      ["defaultDevice", "VimWs25::VirtualDevice[]", [0, nil]],
      ["supportedMonitorType", "SOAP::SOAPString[]", [1, nil]],
      ["supportedOvfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["supportedOvfInstallTransport", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigOptionDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigOptionDescriptor",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["createSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultConfigOption", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineConfigOptionDescriptor,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineConfigOptionDescriptor") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineCpuIdInfoSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCpuIdInfoSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::HostCpuIdInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineCpuIdInfoSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineCpuIdInfoSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["npivWorldWideNameOp", "SOAP::SOAPString", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["alternateGuestName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VimWs25::VirtualMachineFileInfo", [0, 1]],
      ["tools", "VimWs25::ToolsConfigInfo", [0, 1]],
      ["flags", "VimWs25::VirtualMachineFlagInfo", [0, 1]],
      ["consolePreferences", "VimWs25::VirtualMachineConsolePreferences", [0, 1]],
      ["powerOpInfo", "VimWs25::VirtualMachineDefaultPowerOpInfo", [0, 1]],
      ["numCPUs", "SOAP::SOAPInt", [0, 1]],
      ["numCoresPerSocket", "SOAP::SOAPInt", [0, 1]],
      ["memoryMB", "SOAP::SOAPLong", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["deviceChange", "VimWs25::VirtualDeviceConfigSpec[]", [0, nil]],
      ["cpuAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["cpuAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VimWs25::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["cpuFeatureMask", "VimWs25::VirtualMachineCpuIdInfoSpec[]", [0, nil]],
      ["extraConfig", "VimWs25::OptionValue[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VimWs25::VirtualMachineBootOptions", [0, 1]],
      ["vAppConfig", "VimWs25::VmConfigSpec", [0, 1]],
      ["ftInfo", "VimWs25::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfigRemoved", "SOAP::SOAPBoolean", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ConfigTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigTarget",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numCpus", "SOAP::SOAPInt"],
      ["numCpuCores", "SOAP::SOAPInt"],
      ["numNumaNodes", "SOAP::SOAPInt"],
      ["datastore", "VimWs25::VirtualMachineDatastoreInfo[]", [0, nil]],
      ["network", "VimWs25::VirtualMachineNetworkInfo[]", [0, nil]],
      ["distributedVirtualPortgroup", "VimWs25::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VimWs25::DistributedVirtualSwitchInfo[]", [0, nil]],
      ["cdRom", "VimWs25::VirtualMachineCdromInfo[]", [0, nil]],
      ["serial", "VimWs25::VirtualMachineSerialInfo[]", [0, nil]],
      ["parallel", "VimWs25::VirtualMachineParallelInfo[]", [0, nil]],
      ["sound", "VimWs25::VirtualMachineSoundInfo[]", [0, nil]],
      ["usb", "VimWs25::VirtualMachineUsbInfo[]", [0, nil]],
      ["floppy", "VimWs25::VirtualMachineFloppyInfo[]", [0, nil]],
      ["legacyNetworkInfo", "VimWs25::VirtualMachineLegacyNetworkSwitchInfo[]", [0, nil]],
      ["scsiPassthrough", "VimWs25::VirtualMachineScsiPassthroughInfo[]", [0, nil]],
      ["scsiDisk", "VimWs25::VirtualMachineScsiDiskDeviceInfo[]", [0, nil]],
      ["ideDisk", "VimWs25::VirtualMachineIdeDiskDeviceInfo[]", [0, nil]],
      ["maxMemMBOptimalPerf", "SOAP::SOAPInt"],
      ["resourcePool", "VimWs25::ResourcePoolRuntimeInfo", [0, 1]],
      ["autoVmotion", "SOAP::SOAPBoolean", [0, 1]],
      ["pciPassthrough", "VimWs25::VirtualMachinePciPassthroughInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConsolePreferences,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConsolePreferences",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["powerOnWhenOpened", "SOAP::SOAPBoolean", [0, 1]],
      ["enterFullScreenOnPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["closeOnPowerOffOrSuspend", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDatastoreInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["datastore", "VimWs25::DatastoreSummary"],
      ["capability", "VimWs25::DatastoreCapability"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineDatastoreInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineDatastoreInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDatastoreVolumeOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDatastoreVolumeOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileSystemType", "SOAP::SOAPString"],
      ["majorVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineDatastoreVolumeOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineDatastoreVolumeOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreOption,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["unsupportedVolumes", "VimWs25::VirtualMachineDatastoreVolumeOption[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDefaultPowerOpInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDefaultPowerOpInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["powerOffType", "SOAP::SOAPString", [0, 1]],
      ["suspendType", "SOAP::SOAPString", [0, 1]],
      ["resetType", "SOAP::SOAPString", [0, 1]],
      ["defaultPowerOffType", "SOAP::SOAPString", [0, 1]],
      ["defaultSuspendType", "SOAP::SOAPString", [0, 1]],
      ["defaultResetType", "SOAP::SOAPString", [0, 1]],
      ["standbyAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2InactiveReasonVm", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["runtimeState", "VimWs25::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineDeviceRuntimeInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineDeviceRuntimeInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDiskDeviceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultTolerancePrimaryConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultTolerancePrimaryConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["secondaries", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceSecondaryConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceSecondaryConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["primaryVM", "VimWs25::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::FaultToleranceSecondaryOpResult,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceSecondaryOpResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["powerOnAttempted", "SOAP::SOAPBoolean"],
      ["powerOnResult", "VimWs25::ClusterPowerOnVmResult", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmPathName", "SOAP::SOAPString", [0, 1]],
      ["snapshotDirectory", "SOAP::SOAPString", [0, 1]],
      ["suspendDirectory", "SOAP::SOAPString", [0, 1]],
      ["logDirectory", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutDiskLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutDiskLayout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["diskFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFileLayoutDiskLayout,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutDiskLayout") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutSnapshotLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutSnapshotLayout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["snapshotFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFileLayoutSnapshotLayout,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutSnapshotLayout") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configFile", "SOAP::SOAPString[]", [0, nil]],
      ["logFile", "SOAP::SOAPString[]", [0, nil]],
      ["disk", "VimWs25::VirtualMachineFileLayoutDiskLayout[]", [0, nil]],
      ["snapshot", "VimWs25::VirtualMachineFileLayoutSnapshotLayout[]", [0, nil]],
      ["swapFile", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExFileInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFileLayoutExFileInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExFileInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExDiskUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExDiskUnit",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileKey", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFileLayoutExDiskUnit,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExDiskUnit") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExDiskLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExDiskLayout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chain", "VimWs25::VirtualMachineFileLayoutExDiskUnit[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFileLayoutExDiskLayout,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExDiskLayout") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExSnapshotLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExSnapshotLayout",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["dataKey", "SOAP::SOAPInt"],
      ["disk", "VimWs25::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFileLayoutExSnapshotLayout,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExSnapshotLayout") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutEx,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutEx",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["file", "VimWs25::VirtualMachineFileLayoutExFileInfo[]", [0, nil]],
      ["disk", "VimWs25::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]],
      ["snapshot", "VimWs25::VirtualMachineFileLayoutExSnapshotLayout[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["disableAcceleration", "SOAP::SOAPBoolean", [0, 1]],
      ["enableLogging", "SOAP::SOAPBoolean", [0, 1]],
      ["useToe", "SOAP::SOAPBoolean", [0, 1]],
      ["runWithDebugInfo", "SOAP::SOAPBoolean", [0, 1]],
      ["monitorType", "SOAP::SOAPString", [0, 1]],
      ["htSharing", "SOAP::SOAPString", [0, 1]],
      ["snapshotDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["snapshotLocked", "SOAP::SOAPBoolean", [0, 1]],
      ["diskUuidEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["virtualMmuUsage", "SOAP::SOAPString", [0, 1]],
      ["virtualExecUsage", "SOAP::SOAPString", [0, 1]],
      ["snapshotPowerOffBehavior", "SOAP::SOAPString", [0, 1]],
      ["recordReplayEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFloppyInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFloppyInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineFloppyInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineFloppyInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::GuestDiskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestDiskInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskPath", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["freeSpace", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfGuestDiskInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "GuestDiskInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::GuestNicInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestNicInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["deviceConfigId", "SOAP::SOAPInt"],
      ["dnsConfig", "VimWs25::NetDnsConfigInfo", [0, 1]],
      ["ipConfig", "VimWs25::NetIpConfigInfo", [0, 1]],
      ["netBIOSConfig", "VimWs25::NetBIOSConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfGuestNicInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "GuestNicInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::GuestStackInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestStackInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dnsConfig", "VimWs25::NetDnsConfigInfo", [0, 1]],
      ["ipRouteConfig", "VimWs25::NetIpRouteConfigInfo", [0, 1]],
      ["ipStackConfig", "VimWs25::KeyValue[]", [0, nil]],
      ["dhcpConfig", "VimWs25::NetDhcpConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfGuestStackInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "GuestStackInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::GuestScreenInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestScreenInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GuestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toolsStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersion", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFamily", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["net", "VimWs25::GuestNicInfo[]", [0, nil]],
      ["ipStack", "VimWs25::GuestStackInfo[]", [0, nil]],
      ["disk", "VimWs25::GuestDiskInfo[]", [0, nil]],
      ["screen", "VimWs25::GuestScreenInfo", [0, 1]],
      ["guestState", "SOAP::SOAPString"],
      ["appHeartbeatStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::GuestOsDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestOsDescriptor",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["supportedMaxCPUs", "SOAP::SOAPInt"],
      ["supportedMinMemMB", "SOAP::SOAPInt"],
      ["supportedMaxMemMB", "SOAP::SOAPInt"],
      ["recommendedMemMB", "SOAP::SOAPInt"],
      ["recommendedColorDepth", "SOAP::SOAPInt"],
      ["supportedDiskControllerList", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedSCSIController", "SOAP::SOAPString", [0, 1]],
      ["recommendedDiskController", "SOAP::SOAPString"],
      ["supportedNumDisks", "SOAP::SOAPInt"],
      ["recommendedDiskSizeMB", "SOAP::SOAPInt"],
      ["supportedEthernetCard", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedEthernetCard", "SOAP::SOAPString", [0, 1]],
      ["supportsSlaveDisk", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuFeatureMask", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["supportsWakeOnLan", "SOAP::SOAPBoolean"],
      ["supportsVMI", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMemoryHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotRemove", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfGuestOsDescriptor,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "GuestOsDescriptor") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineIdeDiskDevicePartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineIdeDiskDevicePartitionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineIdeDiskDevicePartitionInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineIdeDiskDevicePartitionInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineIdeDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineIdeDiskDeviceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["partitionTable", "VimWs25::VirtualMachineIdeDiskDevicePartitionInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineIdeDiskDeviceInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineIdeDiskDeviceInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineLegacyNetworkSwitchInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineLegacyNetworkSwitchInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineLegacyNetworkSwitchInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineLegacyNetworkSwitchInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineMessage,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMessage",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["argument", "[]", [0, nil]],
      ["text", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineMessage,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineMessage") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineNetworkInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VimWs25::NetworkSummary"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineNetworkInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineNetworkInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineNetworkShaperInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineNetworkShaperInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["peakBps", "SOAP::SOAPLong", [0, 1]],
      ["averageBps", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineParallelInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineParallelInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineParallelInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineParallelInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachinePciPassthroughInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePciPassthroughInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["pciDevice", "VimWs25::HostPciDevice"],
      ["systemId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachinePciPassthroughInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachinePciPassthroughInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineQuestionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineQuestionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["text", "SOAP::SOAPString"],
      ["choice", "VimWs25::ChoiceOption"],
      ["message", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineRelocateSpecDiskLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateSpecDiskLocator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskId", "SOAP::SOAPInt"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineRelocateSpecDiskLocator,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineRelocateSpecDiskLocator") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineRelocateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["disk", "VimWs25::VirtualMachineRelocateSpecDiskLocator[]", [0, nil]],
      ["transform", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRuntimeInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "VimWs25::VirtualMachineDeviceRuntimeInfo[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["connectionState", "SOAP::SOAPString"],
      ["powerState", "SOAP::SOAPString"],
      ["faultToleranceState", "SOAP::SOAPString", [0, 1]],
      ["toolsInstallerMounted", "SOAP::SOAPBoolean"],
      ["suspendTime", "SOAP::SOAPDateTime", [0, 1]],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["suspendInterval", "SOAP::SOAPLong", [0, 1]],
      ["question", "VimWs25::VirtualMachineQuestionInfo", [0, 1]],
      ["memoryOverhead", "SOAP::SOAPLong", [0, 1]],
      ["maxCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["maxMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["numMksConnections", "SOAP::SOAPInt"],
      ["recordReplayState", "SOAP::SOAPString", [0, 1]],
      ["cleanPowerOff", "SOAP::SOAPBoolean", [0, 1]],
      ["needSecondaryReason", "SOAP::SOAPString", [0, 1]],
      ["minRequiredEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineScsiDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineScsiDiskDeviceInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["disk", "VimWs25::HostScsiDisk", [0, 1]],
      ["transportHint", "SOAP::SOAPString", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineScsiDiskDeviceInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineScsiDiskDeviceInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineScsiPassthroughInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineScsiPassthroughInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["scsiClass", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["physicalUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineScsiPassthroughInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineScsiPassthroughInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineSerialInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSerialInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineSerialInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineSerialInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineSnapshotInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSnapshotInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentSnapshot", "VimWs25::ManagedObjectReference", [0, 1]],
      ["rootSnapshotList", "VimWs25::VirtualMachineSnapshotTree[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineSnapshotTree,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSnapshotTree",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["snapshot", "VimWs25::ManagedObjectReference"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["createTime", "SOAP::SOAPDateTime"],
      ["state", "SOAP::SOAPString"],
      ["quiesced", "SOAP::SOAPBoolean"],
      ["backupManifest", "SOAP::SOAPString", [0, 1]],
      ["childSnapshotList", "VimWs25::VirtualMachineSnapshotTree[]", [0, nil]],
      ["replaySupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineSnapshotTree,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineSnapshotTree") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineSoundInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSoundInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineSoundInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineSoundInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineUsageOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsageOnDatastore",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineUsageOnDatastore,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineUsageOnDatastore") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineStorageInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineStorageInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["perDatastoreUsage", "VimWs25::VirtualMachineUsageOnDatastore[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["template", "SOAP::SOAPBoolean"],
      ["vmPathName", "SOAP::SOAPString"],
      ["memorySizeMB", "SOAP::SOAPInt", [0, 1]],
      ["cpuReservation", "SOAP::SOAPInt", [0, 1]],
      ["memoryReservation", "SOAP::SOAPInt", [0, 1]],
      ["numCpu", "SOAP::SOAPInt", [0, 1]],
      ["numEthernetCards", "SOAP::SOAPInt", [0, 1]],
      ["numVirtualDisks", "SOAP::SOAPInt", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["product", "VimWs25::VAppProductInfo", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["ftInfo", "VimWs25::FaultToleranceConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineQuickStats,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineQuickStats",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPInt", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["guestHeartbeatStatus", "SOAP::SOAPString"],
      ["distributedCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPInt", [0, 1]],
      ["sharedMemory", "SOAP::SOAPInt", [0, 1]],
      ["swappedMemory", "SOAP::SOAPInt", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPInt", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPInt", [0, 1]],
      ["ftLogBandwidth", "SOAP::SOAPInt", [0, 1]],
      ["ftSecondaryLatency", "SOAP::SOAPInt", [0, 1]],
      ["ftLatencyStatus", "SOAP::SOAPString", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]],
      ["uptimeSeconds", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineGuestSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["toolsStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineStorageSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineStorageSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSummary",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["runtime", "VimWs25::VirtualMachineRuntimeInfo"],
      ["guest", "VimWs25::VirtualMachineGuestSummary", [0, 1]],
      ["config", "VimWs25::VirtualMachineConfigSummary"],
      ["storage", "VimWs25::VirtualMachineStorageSummary", [0, 1]],
      ["quickStats", "VimWs25::VirtualMachineQuickStats"],
      ["overallStatus", "SOAP::SOAPString"],
      ["customValue", "VimWs25::CustomFieldValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineSummary,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineSummary") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineTargetInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTargetInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ToolsConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsConfigInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toolsVersion", "SOAP::SOAPInt", [0, 1]],
      ["afterPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["afterResume", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestStandby", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestShutdown", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestReboot", "SOAP::SOAPBoolean", [0, 1]],
      ["toolsUpgradePolicy", "SOAP::SOAPString", [0, 1]],
      ["pendingCustomization", "SOAP::SOAPString", [0, 1]],
      ["syncTimeWithHost", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineUsbInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsbInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPInt"],
      ["product", "SOAP::SOAPInt"],
      ["physicalPath", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]],
      ["summary", "VimWs25::VirtualMachineSummary", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualMachineUsbInfo,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualMachineUsbInfo") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualHardware,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardware",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numCPU", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"],
      ["device", "VimWs25::VirtualDevice[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualHardwareOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardwareOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hwVersion", "SOAP::SOAPInt"],
      ["virtualDeviceOption", "VimWs25::VirtualDeviceOption[]", [1, nil]],
      ["deviceListReadonly", "SOAP::SOAPBoolean"],
      ["numCPU", "SOAP::SOAPInt[]", [1, nil]],
      ["numCpuReadonly", "SOAP::SOAPBoolean"],
      ["memoryMB", "VimWs25::LongOption"],
      ["numPCIControllers", "VimWs25::IntOption"],
      ["numIDEControllers", "VimWs25::IntOption"],
      ["numUSBControllers", "VimWs25::IntOption"],
      ["numSIOControllers", "VimWs25::IntOption"],
      ["numPS2Controllers", "VimWs25::IntOption"],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["numSupportedWwnPorts", "VimWs25::IntOption", [0, 1]],
      ["numSupportedWwnNodes", "VimWs25::IntOption", [0, 1]],
      ["resourceConfigOption", "VimWs25::ResourceConfigOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineImportSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo", [0, 1]],
      ["configSpec", "VimWs25::VirtualMachineConfigSpec"],
      ["resPoolEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckResult,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckResult",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfCheckResult,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "CheckResult") }
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["options", "VimWs25::CustomizationOptions", [0, 1]],
      ["identity", "VimWs25::CustomizationIdentitySettings"],
      ["globalIPSettings", "VimWs25::CustomizationGlobalIPSettings"],
      ["nicSettingMap", "VimWs25::CustomizationAdapterMapping[]", [0, nil]],
      ["encryptionKey", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationFixedName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFixedName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationPrefixName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationPrefixName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["base", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationVirtualMachineName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationVirtualMachineName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationUnknownName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationCustomName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationCustomName",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationPassword,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationPassword",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"],
      ["plainText", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationWinOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationWinOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeSID", "SOAP::SOAPBoolean"],
      ["deleteAccounts", "SOAP::SOAPBoolean"],
      ["reboot", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationLinuxOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLinuxOptions",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationGuiUnattended,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationGuiUnattended",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["password", "VimWs25::CustomizationPassword", [0, 1]],
      ["timeZone", "SOAP::SOAPInt"],
      ["autoLogon", "SOAP::SOAPBoolean"],
      ["autoLogonCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationUserData,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUserData",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fullName", "SOAP::SOAPString"],
      ["orgName", "SOAP::SOAPString"],
      ["computerName", "VimWs25::CustomizationName"],
      ["productId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationGuiRunOnce,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationGuiRunOnce",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["commandList", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationIdentification,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIdentification",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["joinWorkgroup", "SOAP::SOAPString", [0, 1]],
      ["joinDomain", "SOAP::SOAPString", [0, 1]],
      ["domainAdmin", "SOAP::SOAPString", [0, 1]],
      ["domainAdminPassword", "VimWs25::CustomizationPassword", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationLicenseFilePrintData,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLicenseFilePrintData",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["autoMode", "SOAP::SOAPString"],
      ["autoUsers", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationIdentitySettings,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIdentitySettings",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSysprepText,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprepText",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSysprep,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprep",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["guiUnattended", "VimWs25::CustomizationGuiUnattended"],
      ["userData", "VimWs25::CustomizationUserData"],
      ["guiRunOnce", "VimWs25::CustomizationGuiRunOnce", [0, 1]],
      ["identification", "VimWs25::CustomizationIdentification"],
      ["licenseFilePrintData", "VimWs25::CustomizationLicenseFilePrintData", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationLinuxPrep,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLinuxPrep",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostName", "VimWs25::CustomizationName"],
      ["domain", "SOAP::SOAPString"],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["hwClockUTC", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationGlobalIPSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationGlobalIPSettings",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dnsSuffixList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationIPSettingsIpV6AddressSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIPSettingsIpV6AddressSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::CustomizationIpV6Generator[]", [1, nil]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationIPSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIPSettings",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::CustomizationIpGenerator"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]],
      ["ipV6Spec", "VimWs25::CustomizationIPSettingsIpV6AddressSpec", [0, 1]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["primaryWINS", "SOAP::SOAPString", [0, 1]],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]],
      ["netBIOS", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIpGenerator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationDhcpIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationDhcpIpGenerator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationFixedIp,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFixedIp",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationUnknownIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownIpGenerator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationCustomIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationCustomIpGenerator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIpV6Generator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfCustomizationIpV6Generator,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "CustomizationIpV6Generator") }
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationDhcpIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationDhcpIpV6Generator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationStatelessIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationStatelessIpV6Generator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationFixedIpV6,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFixedIpV6",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["subnetMask", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationAutoIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationAutoIpV6Generator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationUnknownIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownIpV6Generator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationCustomIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationCustomIpV6Generator",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationAdapterMapping,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationAdapterMapping",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["adapter", "VimWs25::CustomizationIPSettings"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfCustomizationAdapterMapping,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "CustomizationAdapterMapping") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskMappingPartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingPartitionInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskMappingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VimWs25::HostDiskMappingPartitionInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["exclusive", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskMappingPartitionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingPartitionOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfHostDiskMappingPartitionOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "HostDiskMappingPartitionOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskMappingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VimWs25::HostDiskMappingPartitionOption[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ParaVirtualSCSIController,
    :schema_ns => "urn:vim25",
    :schema_type => "ParaVirtualSCSIController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ParaVirtualSCSIControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ParaVirtualSCSIControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualBusLogicController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualBusLogicController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualBusLogicControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualBusLogicControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromIsoBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromIsoBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromPassthroughBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromPassthroughBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromRemotePassthroughBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemotePassthroughBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromAtapiBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromAtapiBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromRemoteAtapiBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemoteAtapiBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdrom,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdrom",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromIsoBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromIsoBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromPassthroughBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromPassthroughBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["exclusive", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromRemotePassthroughBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemotePassthroughBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["exclusive", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromAtapiBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromAtapiBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromRemoteAtapiBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemoteAtapiBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualCdromOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceFileBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceFileBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceRemoteDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceRemoteDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDevicePipeBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDevicePipeBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceURIBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceURIBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConnectInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startConnected", "SOAP::SOAPBoolean"],
      ["allowGuestControl", "SOAP::SOAPBoolean"],
      ["connected", "SOAP::SOAPBoolean"],
      ["status", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualDevice,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualDevice") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualDeviceBackingOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualDeviceBackingOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceFileBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceFileBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceRemoteDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceRemoteDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDevicePipeBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDevicePipeBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceURIBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceURIBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VimWs25::ChoiceOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceConnectOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConnectOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startConnected", "VimWs25::BoolOption"],
      ["allowGuestControl", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualDeviceOption,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualDeviceOption") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConfigSpec",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString", [0, 1]],
      ["fileOperation", "SOAP::SOAPString", [0, 1]],
      ["device", "VimWs25::VirtualDevice"]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualDeviceConfigSpec,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualDeviceConfigSpec") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer1BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer1BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskSparseVer1BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer2BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskSparseVer2BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer1BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer1BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskFlatVer1BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer2BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["thinProvisioned", "SOAP::SOAPBoolean", [0, 1]],
      ["eagerlyScrub", "SOAP::SOAPBoolean", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskFlatVer2BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskVer2BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskPartitionedRawDiskVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskPartitionedRawDiskVer2BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["partition", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskMappingVer1BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskMappingVer1BackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["lunUuid", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString", [0, 1]],
      ["compatibilityMode", "SOAP::SOAPString", [0, 1]],
      ["diskMode", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskRawDiskMappingVer1BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDisk",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["capacityInKB", "SOAP::SOAPLong"],
      ["shares", "VimWs25::SharesInfo", [0, 1]],
      ["storageIOAllocation", "VimWs25::StorageIOAllocationInfo", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualDisk,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualDisk") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer1BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer1BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskModes", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer2BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer1BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer1BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer2BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"],
      ["thinProvisioned", "VimWs25::BoolOption", [0, 1]],
      ["eagerlyScrub", "VimWs25::BoolOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskVer2BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["descriptorFileNameExtensions", "VimWs25::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskPartitionedRawDiskVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskPartitionedRawDiskVer2BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["descriptorFileNameExtensions", "VimWs25::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskMappingVer1BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskMappingVer1BackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["descriptorFileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["compatibilityMode", "VimWs25::ChoiceOption"],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["capacityInKB", "VimWs25::LongOption"],
      ["ioAllocationOption", "VimWs25::StorageIOAllocationOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualE1000,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualE1000Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000Option",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  # VirtualE1000e added from VIM 5.5
  EncodedRegistry.register(
    :class => VimWs25::VirtualE1000e,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000e",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  # VirtualE1000e added from VIM 5.5
  EncodedRegistry.register(
    :class => VimWs25::VirtualE1000eOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000eOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEnsoniq1371,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEnsoniq1371",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEnsoniq1371Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEnsoniq1371Option",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardNetworkBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardNetworkBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VimWs25::ManagedObjectReference", [0, 1]],
      ["inPassthroughMode", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardLegacyNetworkBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardLegacyNetworkBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardDistributedVirtualPortBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardDistributedVirtualPortBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["port", "VimWs25::DistributedVirtualSwitchPortConnection"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCard",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardNetworkBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardNetworkBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardLegacyNetworkBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardLegacyNetworkBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardDVPortBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardDVPortBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyImageBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyImageBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyRemoteDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyRemoteDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppy,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppy",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyImageBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyImageBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyRemoteDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyRemoteDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualFloppyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualIDEController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualIDEController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualIDEControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualIDEControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numIDEDisks", "VimWs25::IntOption"],
      ["numIDECdroms", "VimWs25::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualKeyboard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualKeyboard",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualKeyboardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualKeyboardOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualLsiLogicController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualLsiLogicControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualLsiLogicSASController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicSASController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualLsiLogicSASControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicSASControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCIController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCIControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIControllers", "VimWs25::IntOption"],
      ["numEthernetCards", "VimWs25::IntOption"],
      ["numVideoCards", "VimWs25::IntOption"],
      ["numSoundCards", "VimWs25::IntOption"],
      ["numVmiRoms", "VimWs25::IntOption"],
      ["numVmciDevices", "VimWs25::IntOption", [0, 1]],
      ["numPCIPassthroughDevices", "VimWs25::IntOption", [0, 1]],
      ["numSasSCSIControllers", "VimWs25::IntOption", [0, 1]],
      ["numVmxnet3EthernetCards", "VimWs25::IntOption", [0, 1]],
      ["numParaVirtualSCSIControllers", "VimWs25::IntOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCIPassthroughDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthroughDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["id", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPString"],
      ["systemId", "SOAP::SOAPString"],
      ["vendorId", "SOAP::SOAPShort"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCIPassthrough,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthrough",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCIPassthroughDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthroughDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCIPassthroughOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthroughOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCNet32,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCNet32",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPCNet32Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCNet32Option",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMorphing", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPS2Controller,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPS2Controller",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPS2ControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPS2ControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numKeyboards", "VimWs25::IntOption"],
      ["numPointingDevices", "VimWs25::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualParallelPortFileBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortFileBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualParallelPortDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualParallelPort,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPort",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualParallelPortFileBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortFileBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualParallelPortDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualParallelPortOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPointingDeviceDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostPointingDevice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPointingDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPointingDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["hostPointingDevice", "VimWs25::ChoiceOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPointingDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.set(
    VimWs25::ArrayOfVirtualSCSISharing,
    ::SOAP::SOAPArray,
    ::SOAP::Mapping::EncodedRegistry::TypedArrayFactory,
    { :type => XSD::QName.new("urn:vim25", "VirtualSCSISharing") }
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSIController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSIControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSIPassthroughDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthroughDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSIPassthrough,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthrough",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSIPassthroughDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthroughDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSIPassthroughOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthroughOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSIOController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSIOController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSIOControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSIOControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numFloppyDrives", "VimWs25::IntOption"],
      ["numSerialPorts", "VimWs25::IntOption"],
      ["numParallelPorts", "VimWs25::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortFileBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortFileBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortPipeBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortPipeBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"],
      ["endpoint", "SOAP::SOAPString"],
      ["noRxLoss", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortURIBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortURIBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPort,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPort",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["yieldOnPoll", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortFileBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortFileBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortPipeBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortPipeBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["endpoint", "VimWs25::ChoiceOption"],
      ["noRxLoss", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortURIBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortURIBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VimWs25::ChoiceOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["yieldOnPoll", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSoundBlaster16,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundBlaster16",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSoundBlaster16Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundBlaster16Option",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSoundCardDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCardDeviceBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSoundCard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCard",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSoundCardDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCardDeviceBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSoundCardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCardOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBUSBBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBUSBBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBRemoteHostBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBRemoteHostBackingInfo",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSB,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSB",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["vendor", "SOAP::SOAPInt", [0, 1]],
      ["product", "SOAP::SOAPInt", [0, 1]],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBController",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["autoConnectDevices", "SOAP::SOAPBoolean", [0, 1]],
      ["ehciEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBControllerOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["autoConnectDevices", "VimWs25::BoolOption"],
      ["ehciSupported", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBUSBBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBUSBBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBRemoteHostBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBRemoteHostBackingOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualUSBOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineVMCIDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVMCIDevice",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["id", "SOAP::SOAPLong", [0, 1]],
      ["allowUnrestrictedCommunication", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineVMCIDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVMCIDeviceOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["allowUnrestrictedCommunication", "VimWs25::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineVMIROM,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVMIROM",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVMIROMOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVMIROMOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineVideoCard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVideoCard",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["videoRamSizeInKB", "SOAP::SOAPLong", [0, 1]],
      ["numDisplays", "SOAP::SOAPInt", [0, 1]],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["enable3DSupport", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVideoCardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVideoCardOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["videoRamSizeInKB", "VimWs25::LongOption", [0, 1]],
      ["numDisplays", "VimWs25::IntOption", [0, 1]],
      ["useAutoDetect", "VimWs25::BoolOption", [0, 1]],
      ["support3D", "VimWs25::BoolOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVmxnet,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVmxnet2,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet2",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVmxnet2Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet2Option",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVmxnet3,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet3",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVmxnet3Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet3Option",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualVmxnetOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnetOption",
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VimWs25::ObjectUpdateKind,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectUpdateKind"
  )

  EncodedRegistry.register(
    :class => VimWs25::PropertyChangeOp,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyChangeOp"
  )

  EncodedRegistry.register(
    :class => VimWs25::ConfigSpecOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigSpecOperation"
  )

  EncodedRegistry.register(
    :class => VimWs25::DatastoreAccessible,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreAccessible"
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticManagerLogCreator,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogCreator"
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticManagerLogFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogFormat"
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchProductSpecOperationType,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchProductSpecOperationType"
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchNicTeamingPolicyMode,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchNicTeamingPolicyMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemConnectionState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemConnectionState"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemPowerState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemPowerState"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostStandbyMode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStandbyMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::HttpNfcLeaseState,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseState"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseManagerState,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerState"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseManagerLicenseKey,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerLicenseKey"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseFeatureInfoUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfoUnit"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseFeatureInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfoState"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseFeatureInfoSourceRestriction,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfoSourceRestriction"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseReservationInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseReservationInfoState"
  )

  EncodedRegistry.register(
    :class => VimWs25::ManagedEntityStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedEntityStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::OvfCreateImportSpecParamsDiskProvisioningType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateImportSpecParamsDiskProvisioningType"
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfFormat"
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfSummaryType,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfSummaryType"
  )

  EncodedRegistry.register(
    :class => VimWs25::PerfStatsType,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfStatsType"
  )

  EncodedRegistry.register(
    :class => VimWs25::PerformanceManagerUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformanceManagerUnit"
  )

  EncodedRegistry.register(
    :class => VimWs25::ValidateMigrationTestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ValidateMigrationTestType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VMotionCompatibilityType,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionCompatibilityType"
  )

  EncodedRegistry.register(
    :class => VimWs25::SharesLevel,
    :schema_ns => "urn:vim25",
    :schema_type => "SharesLevel"
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskFilterSpecRecursionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecRecursionOption"
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskFilterSpecTimeOption,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecTimeOption"
  )

  EncodedRegistry.register(
    :class => VimWs25::TaskInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskInfoState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualAppVAppState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppVAppState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskAdapterType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskAdapterType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachinePowerState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePowerState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineAppHeartbeatStatusType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineAppHeartbeatStatusType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConnectionState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConnectionState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineMovePriority,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMovePriority"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFaultToleranceState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFaultToleranceState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineRecordReplayState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRecordReplayState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineNeedSecondaryReason,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineNeedSecondaryReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineTicketType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTicketType"
  )

  EncodedRegistry.register(
    :class => VimWs25::ActionParameter,
    :schema_ns => "urn:vim25",
    :schema_type => "ActionParameter"
  )

  EncodedRegistry.register(
    :class => VimWs25::StateAlarmOperator,
    :schema_ns => "urn:vim25",
    :schema_type => "StateAlarmOperator"
  )

  EncodedRegistry.register(
    :class => VimWs25::EventAlarmExpressionComparisonOperator,
    :schema_ns => "urn:vim25",
    :schema_type => "EventAlarmExpressionComparisonOperator"
  )

  EncodedRegistry.register(
    :class => VimWs25::MetricAlarmOperator,
    :schema_ns => "urn:vim25",
    :schema_type => "MetricAlarmOperator"
  )

  EncodedRegistry.register(
    :class => VimWs25::ActionType,
    :schema_ns => "urn:vim25",
    :schema_type => "ActionType"
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsBehavior,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsBehavior"
  )

  EncodedRegistry.register(
    :class => VimWs25::DpmBehavior,
    :schema_ns => "urn:vim25",
    :schema_type => "DpmBehavior"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasAamNodeStateDasState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAamNodeStateDasState"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasConfigInfoServiceState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasConfigInfoServiceState"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasConfigInfoVmMonitoringState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasConfigInfoVmMonitoringState"
  )

  EncodedRegistry.register(
    :class => VimWs25::DasVmPriority,
    :schema_ns => "urn:vim25",
    :schema_type => "DasVmPriority"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasVmSettingsRestartPriority,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmSettingsRestartPriority"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterDasVmSettingsIsolationResponse,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmSettingsIsolationResponse"
  )

  EncodedRegistry.register(
    :class => VimWs25::DrsRecommendationReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRecommendationReasonCode"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPowerOperationType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPowerOperationType"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterPowerOnVmOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterPowerOnVmOption"
  )

  EncodedRegistry.register(
    :class => VimWs25::RecommendationType,
    :schema_ns => "urn:vim25",
    :schema_type => "RecommendationType"
  )

  EncodedRegistry.register(
    :class => VimWs25::RecommendationReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "RecommendationReasonCode"
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortStatusVmDirectPathGen2InactiveReasonNetwork,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortStatusVmDirectPathGen2InactiveReasonNetwork"
  )

  EncodedRegistry.register(
    :class => VimWs25::DVPortStatusVmDirectPathGen2InactiveReasonOther,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortStatusVmDirectPathGen2InactiveReasonOther"
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualPortgroupPortgroupType,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPortgroupPortgroupType"
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualPortgroupMetaTagName,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPortgroupMetaTagName"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDistributedVirtualSwitchManagerNetworkResourcePoolKey,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDistributedVirtualSwitchManagerNetworkResourcePoolKey"
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberHostComponentState,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberHostComponentState"
  )

  EncodedRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortConnecteeConnecteeType,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortConnecteeConnecteeType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchPvlanPortType,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchPvlanPortType"
  )

  EncodedRegistry.register(
    :class => VimWs25::EventEventSeverity,
    :schema_ns => "urn:vim25",
    :schema_type => "EventEventSeverity"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDisconnectedEventReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDisconnectedEventReasonCode"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDasErrorEventHostDasErrorReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasErrorEventHostDasErrorReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::VmShutdownOnIsolationEventOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "VmShutdownOnIsolationEventOperation"
  )

  EncodedRegistry.register(
    :class => VimWs25::VmDasBeingResetEventReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasBeingResetEventReasonCode"
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFailedStartingSecondaryEventFailureReason,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedStartingSecondaryEventFailureReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::EventCategory,
    :schema_ns => "urn:vim25",
    :schema_type => "EventCategory"
  )

  EncodedRegistry.register(
    :class => VimWs25::EventFilterSpecRecursionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecRecursionOption"
  )

  EncodedRegistry.register(
    :class => VimWs25::AffinityType,
    :schema_ns => "urn:vim25",
    :schema_type => "AffinityType"
  )

  EncodedRegistry.register(
    :class => VimWs25::AgentInstallFailedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "AgentInstallFailedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::CannotMoveFaultToleranceVmMoveType,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotMoveFaultToleranceVmMoveType"
  )

  EncodedRegistry.register(
    :class => VimWs25::DasConfigFaultDasConfigFaultReason,
    :schema_ns => "urn:vim25",
    :schema_type => "DasConfigFaultDasConfigFaultReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::DeviceNotSupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceNotSupportedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::FtIssuesOnHostHostSelectionType,
    :schema_ns => "urn:vim25",
    :schema_type => "FtIssuesOnHostHostSelectionType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIncompatibleForFaultToleranceReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForFaultToleranceReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIncompatibleForRecordReplayReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForRecordReplayReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::LicenseAssignmentFailedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAssignmentFailedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::NotSupportedDeviceForFTDeviceType,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedDeviceForFTDeviceType"
  )

  EncodedRegistry.register(
    :class => VimWs25::NumVirtualCpusIncompatibleReason,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusIncompatibleReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssueReasonForIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceConfigIssueReasonForIssue"
  )

  EncodedRegistry.register(
    :class => VimWs25::VmFaultToleranceInvalidFileBackingDeviceType,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceInvalidFileBackingDeviceType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostActiveDirectoryInfoDomainMembershipStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectoryInfoDomainMembershipStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::AutoStartAction,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartAction"
  )

  EncodedRegistry.register(
    :class => VimWs25::AutoStartWaitHeartbeatSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartWaitHeartbeatSetting"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostReplayUnsupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostReplayUnsupportedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCapabilityFtUnsupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCapabilityFtUnsupportedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCapabilityVmDirectPathGen2UnsupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCapabilityVmDirectPathGen2UnsupportedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigChangeMode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigChangeMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostConfigChangeOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigChangeOperation"
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticPartitionStorageType,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticPartitionStorageType"
  )

  EncodedRegistry.register(
    :class => VimWs25::DiagnosticPartitionType,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticPartitionType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDiskPartitionInfoType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionInfoType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFeatureVersionKey,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFeatureVersionKey"
  )

  EncodedRegistry.register(
    :class => VimWs25::FileSystemMountInfoVStorageSupportStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "FileSystemMountInfoVStorageSupportStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCpuPowerManagementInfoPolicyType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPowerManagementInfoPolicyType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostCpuPackageVendor,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPackageVendor"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostHardwareElementStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareElementStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::FibreChannelPortType,
    :schema_ns => "urn:vim25",
    :schema_type => "FibreChannelPortType"
  )

  EncodedRegistry.register(
    :class => VimWs25::InternetScsiSnsDiscoveryMethod,
    :schema_ns => "urn:vim25",
    :schema_type => "InternetScsiSnsDiscoveryMethod"
  )

  EncodedRegistry.register(
    :class => VimWs25::SlpDiscoveryMethod,
    :schema_ns => "urn:vim25",
    :schema_type => "SlpDiscoveryMethod"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaChapAuthenticationType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaChapAuthenticationType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDigestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDigestType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpConfigIpV6AddressConfigType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6AddressConfigType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostIpConfigIpV6AddressStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6AddressStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::LinkDiscoveryProtocolConfigProtocolType,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkDiscoveryProtocolConfigProtocolType"
  )

  EncodedRegistry.register(
    :class => VimWs25::LinkDiscoveryProtocolConfigOperationType,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkDiscoveryProtocolConfigOperationType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostLowLevelProvisioningManagerReloadTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLowLevelProvisioningManagerReloadTarget"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineMemoryAllocationPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMemoryAllocationPolicy"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostMountMode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMountMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::MultipathState,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipathState"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNumericSensorHealthState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumericSensorHealthState"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostNumericSensorType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumericSensorType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerIntegrityStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerIntegrityStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostPatchManagerInstallState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerInstallState"
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicVmDirectPathGen2SupportedMode,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicVmDirectPathGen2SupportedMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::PhysicalNicResourcePoolSchedulerDisallowedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicResourcePoolSchedulerDisallowedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::PortGroupConnecteeType,
    :schema_ns => "urn:vim25",
    :schema_type => "PortGroupConnecteeType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallRuleDirection,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRuleDirection"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostFirewallRuleProtocol,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRuleProtocol"
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunType,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunType"
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunState,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunState"
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunDescriptorQuality,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunDescriptorQuality"
  )

  EncodedRegistry.register(
    :class => VimWs25::ScsiLunVStorageSupportStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunVStorageSupportStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostServicePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServicePolicy"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSnmpAgentCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpAgentCapability"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostSystemIdentificationInfoIdentifier,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemIdentificationInfoIdentifier"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostDigestInfoDigestMethodType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDigestInfoDigestMethodType"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsExtentUnresolvedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsExtentUnresolvedReason"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResolutionSpecVmfsUuidResolution,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResolutionSpecVmfsUuidResolution"
  )

  EncodedRegistry.register(
    :class => VimWs25::HostVirtualNicManagerNicType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicManagerNicType"
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpConfigInfoIpAddressOrigin,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfoIpAddressOrigin"
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpConfigInfoIpAddressStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfoIpAddressStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpStackInfoEntryType,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoEntryType"
  )

  EncodedRegistry.register(
    :class => VimWs25::NetIpStackInfoPreference,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoPreference"
  )

  EncodedRegistry.register(
    :class => VimWs25::NetBIOSConfigInfoMode,
    :schema_ns => "urn:vim25",
    :schema_type => "NetBIOSConfigInfoMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::ArrayUpdateOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayUpdateOperation"
  )

  EncodedRegistry.register(
    :class => VimWs25::ComplianceResultStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceResultStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileNumericComparator,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileNumericComparator"
  )

  EncodedRegistry.register(
    :class => VimWs25::ClusterProfileServiceType,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileServiceType"
  )

  EncodedRegistry.register(
    :class => VimWs25::ProfileExecuteResultStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExecuteResultStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::DayOfWeek,
    :schema_ns => "urn:vim25",
    :schema_type => "DayOfWeek"
  )

  EncodedRegistry.register(
    :class => VimWs25::WeekOfMonth,
    :schema_ns => "urn:vim25",
    :schema_type => "WeekOfMonth"
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppCloneSpecProvisioningType,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpecProvisioningType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppAutoStartAction,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppAutoStartAction"
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfoIpAllocationPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfoIpAllocationPolicy"
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfoAllocationSchemes,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfoAllocationSchemes"
  )

  EncodedRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfoProtocols,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfoProtocols"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfoNpivWwnType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfoNpivWwnType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfoSwapPlacementType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfoSwapPlacementType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineConfigSpecNpivWwnOp,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigSpecNpivWwnOp"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachinePowerOpType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePowerOpType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineStandbyActionType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineStandbyActionType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExFileType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExFileType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineHtSharing,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineHtSharing"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachinePowerOffBehavior,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePowerOffBehavior"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfoMonitorType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfoMonitorType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfoVirtualMmuUsage,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfoVirtualMmuUsage"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfoVirtualExecUsage,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfoVirtualExecUsage"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineToolsStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineToolsStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineToolsVersionStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineToolsVersionStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineToolsRunningStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineToolsRunningStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineGuestState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestState"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineGuestOsFamily,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestOsFamily"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineGuestOsIdentifier,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestOsIdentifier"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineRelocateTransformation,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateTransformation"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineRelocateDiskMoveOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateDiskMoveOptions"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineScsiPassthroughType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineScsiPassthroughType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineTargetInfoConfigurationTag,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTargetInfoConfigurationTag"
  )

  EncodedRegistry.register(
    :class => VimWs25::UpgradePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradePolicy"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineUsbInfoSpeed,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsbInfoSpeed"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualMachineUsbInfoFamily,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsbInfoFamily"
  )

  EncodedRegistry.register(
    :class => VimWs25::CheckTestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckTestType"
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationSysprepRebootOption,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprepRebootOption"
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationLicenseDataMode,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLicenseDataMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::CustomizationNetBIOSMode,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationNetBIOSMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceConnectInfoStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConnectInfoStatus"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceFileExtension,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceFileExtension"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceURIBackingOptionDirection,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceURIBackingOptionDirection"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceConfigSpecOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConfigSpecOperation"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDeviceConfigSpecFileOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConfigSpecFileOperation"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskMode,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualDiskCompatibilityMode,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskCompatibilityMode"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardLegacyNetworkDeviceName,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardLegacyNetworkDeviceName"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualEthernetCardMacType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardMacType"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualPointingDeviceHostChoice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceHostChoice"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSCSISharing,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSISharing"
  )

  EncodedRegistry.register(
    :class => VimWs25::VirtualSerialPortEndPoint,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortEndPoint"
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyPropertyFilterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyPropertyFilterRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateFilterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateFilterRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::PropertyFilterSpec"],
      ["partialUpdates", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrievePropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrievePropertiesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specSet", "VimWs25::PropertyFilterSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckForUpdatesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "WaitForUpdatesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelWaitForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelWaitForUpdatesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitForUpdatesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "WaitForUpdatesExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["options", "VimWs25::WaitOptions", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrievePropertiesExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specSet", "VimWs25::PropertyFilterSpec[]", [1, nil]],
      ["options", "VimWs25::RetrieveOptions"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ContinueRetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ContinueRetrievePropertiesExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelRetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelRetrievePropertiesExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreatePropertyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreatePropertyCollectorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyPropertyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyPropertyCollectorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DynamicArray,
    :schema_ns => "urn:vim25",
    :schema_type => "DynamicArray",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["val", "[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DynamicData,
    :schema_ns => "urn:vim25",
    :schema_type => "DynamicData",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DynamicProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "DynamicProperty",
    :schema_qualified => false,
    :schema_element => [
      ["name", "SOAP::SOAPString"],
      ["val", nil]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDynamicProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDynamicProperty",
    :schema_element => [
      ["DynamicProperty", ["VimWs25::DynamicProperty[]", XSD::QName.new("urn:vim25", "DynamicProperty")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::KeyAnyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "KeyAnyValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfKeyAnyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfKeyAnyValue",
    :schema_element => [
      ["KeyAnyValue", ["VimWs25::KeyAnyValue[]", XSD::QName.new("urn:vim25", "KeyAnyValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalizableMessage,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalizableMessage",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["arg", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["message", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLocalizableMessage,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLocalizableMessage",
    :schema_element => [
      ["LocalizableMessage", ["VimWs25::LocalizableMessage[]", XSD::QName.new("urn:vim25", "LocalizableMessage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCommunication,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCommunication",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNotConnected,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNotConnected",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNotReachable,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNotReachable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidRequest,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidRequest",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidType,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ManagedObjectNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedObjectNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["receiver", "VimWs25::ManagedObjectReference"],
      ["method", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughLicenses,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughLicenses",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotImplemented,
    :schema_ns => "urn:vim25",
    :schema_type => "NotImplemented",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RequestCanceled,
    :schema_ns => "urn:vim25",
    :schema_type => "RequestCanceled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::C_SecurityError,
    :schema_ns => "urn:vim25",
    :schema_type => "SecurityError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SystemError,
    :schema_ns => "urn:vim25",
    :schema_type => "SystemError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnexpectedFault,
    :schema_ns => "urn:vim25",
    :schema_type => "UnexpectedFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["faultName", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalizedMethodFault,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalizedMethodFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fault", "VimWs25::MethodFault"],
      ["localizedMessage", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfMethodFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfMethodFault",
    :schema_element => [
      ["MethodFault", ["VimWs25::MethodFault[]", XSD::QName.new("urn:vim25", "MethodFault")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RuntimeFault,
    :schema_ns => "urn:vim25",
    :schema_type => "RuntimeFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ManagedObjectReference,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedObjectReference",
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfString,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfString",
    :schema_element => [
      ["string", ["SOAP::SOAPString[]", XSD::QName.new("urn:vim25", "string")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAnyType,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAnyType",
    :schema_element => [
      ["anyType", [nil, XSD::QName.new("urn:vim25", "anyType")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfManagedObjectReference,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfManagedObjectReference",
    :schema_element => [
      ["ManagedObjectReference", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "ManagedObjectReference")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfByte,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfByte",
    :schema_element => [
      ["byte", ["SOAP::SOAPByte[]", XSD::QName.new("urn:vim25", "byte")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfInt,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfInt",
    :schema_element => [
      ["int", ["SOAP::SOAPInt[]", XSD::QName.new("urn:vim25", "int")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLong,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLong",
    :schema_element => [
      ["long", ["SOAP::SOAPLong[]", XSD::QName.new("urn:vim25", "long")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfShort,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfShort",
    :schema_element => [
      ["short", ["SOAP::SOAPShort[]", XSD::QName.new("urn:vim25", "short")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidCollectorVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidCollectorVersion",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidProperty",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PropertyFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyFilterSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["propSet", "VimWs25::PropertySpec[]", [1, nil]],
      ["objectSet", "VimWs25::ObjectSpec[]", [1, nil]],
      ["reportMissingObjectsInResults", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPropertyFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPropertyFilterSpec",
    :schema_element => [
      ["PropertyFilterSpec", ["VimWs25::PropertyFilterSpec[]", XSD::QName.new("urn:vim25", "PropertyFilterSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PropertySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["all", "SOAP::SOAPBoolean", [0, 1]],
      ["pathSet", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPropertySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPropertySpec",
    :schema_element => [
      ["PropertySpec", ["VimWs25::PropertySpec[]", XSD::QName.new("urn:vim25", "PropertySpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ObjectSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VimWs25::SelectionSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfObjectSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfObjectSpec",
    :schema_element => [
      ["ObjectSpec", ["VimWs25::ObjectSpec[]", XSD::QName.new("urn:vim25", "ObjectSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectionSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfSelectionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfSelectionSpec",
    :schema_element => [
      ["SelectionSpec", ["VimWs25::SelectionSpec[]", XSD::QName.new("urn:vim25", "SelectionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TraversalSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "TraversalSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VimWs25::SelectionSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ObjectContent,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectContent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["propSet", "VimWs25::DynamicProperty[]", [0, nil]],
      ["missingSet", "VimWs25::MissingProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfObjectContent,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfObjectContent",
    :schema_element => [
      ["ObjectContent", ["VimWs25::ObjectContent[]", XSD::QName.new("urn:vim25", "ObjectContent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSet,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateSet",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["filterSet", "VimWs25::PropertyFilterUpdate[]", [0, nil]],
      ["truncated", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PropertyFilterUpdate,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyFilterUpdate",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::ManagedObjectReference"],
      ["objectSet", "VimWs25::ObjectUpdate[]", [0, nil]],
      ["missingSet", "VimWs25::MissingObject[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPropertyFilterUpdate,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPropertyFilterUpdate",
    :schema_element => [
      ["PropertyFilterUpdate", ["VimWs25::PropertyFilterUpdate[]", XSD::QName.new("urn:vim25", "PropertyFilterUpdate")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ObjectUpdate,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectUpdate",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["kind", "SOAP::SOAPString"],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["changeSet", "VimWs25::PropertyChange[]", [0, nil]],
      ["missingSet", "VimWs25::MissingProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfObjectUpdate,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfObjectUpdate",
    :schema_element => [
      ["ObjectUpdate", ["VimWs25::ObjectUpdate[]", XSD::QName.new("urn:vim25", "ObjectUpdate")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PropertyChange,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyChange",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["op", "SOAP::SOAPString"],
      ["val", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPropertyChange,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPropertyChange",
    :schema_element => [
      ["PropertyChange", ["VimWs25::PropertyChange[]", XSD::QName.new("urn:vim25", "PropertyChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingProperty",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfMissingProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfMissingProperty",
    :schema_element => [
      ["MissingProperty", ["VimWs25::MissingProperty[]", XSD::QName.new("urn:vim25", "MissingProperty")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingObject,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingObject",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfMissingObject,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfMissingObject",
    :schema_element => [
      ["MissingObject", ["VimWs25::MissingObject[]", XSD::QName.new("urn:vim25", "MissingObject")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "WaitOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["maxWaitSeconds", "SOAP::SOAPInt", [0, 1]],
      ["maxObjectUpdates", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["maxObjects", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveResult,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["token", "SOAP::SOAPString", [0, 1]],
      ["objects", "VimWs25::ObjectContent[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddAuthorizationRoleRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAuthorizationRoleRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["failIfUsed", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateAuthorizationRoleRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["newName", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MergePermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MergePermissionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["srcRoleId", "SOAP::SOAPInt"],
      ["dstRoleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveRolePermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveRolePermissionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveEntityPermissionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveAllPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveAllPermissionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetEntityPermissionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["permission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetEntityPermissionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["permission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveEntityPermissionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveEntityPermissionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["user", "SOAP::SOAPString"],
      ["isGroup", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureClusterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureClusterRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ClusterConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplyRecommendationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelRecommendationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RecommendHostsForVmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RecommendHostsForVmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostConnectSpec"],
      ["asConnected", "SOAP::SOAPBoolean"],
      ["resourcePool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveIntoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveHostIntoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveHostIntoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["resourcePool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshRecommendationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveDasAdvancedRuntimeInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveDasAdvancedRuntimeInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureComputeResourceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureComputeResourceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ComputeResourceConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddCustomFieldDefRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["moType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPolicy", "VimWs25::PrivilegePolicyDef", [0, 1]],
      ["fieldPolicy", "VimWs25::PrivilegePolicyDef", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveCustomFieldDefRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameCustomFieldDefRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetFieldRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetFieldRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DoesCustomizationSpecExistRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DoesCustomizationSpecExistRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OverwriteCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "OverwriteCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DuplicateCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DuplicateCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSpecItemToXmlRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpecItemToXmlRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::XmlToCustomizationSpecItemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "XmlToCustomizationSpecItemRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specItemXml", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCustomizationResourcesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckCustomizationResourcesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["guestOs", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConnectionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConnectionInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hostname", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["username", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnMultiVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnMultiVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDatastoreStorageInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDatastoreStorageInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualMachineFilesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["mountPathDatastoreMapping", "VimWs25::DatastoreMountPathDatastorePair[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDescriptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDescriptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BrowseDiagnosticLogRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "BrowseDiagnosticLogRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["start", "SOAP::SOAPInt", [0, 1]],
      ["lines", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenerateLogBundlesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GenerateLogBundlesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["includeDefault", "SOAP::SOAPBoolean"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FetchDVPortKeysRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FetchDVPortKeysRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["criteria", "VimWs25::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FetchDVPortsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FetchDVPortsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["criteria", "VimWs25::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUsedVlanIdInDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUsedVlanIdInDvsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureDvsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVSConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerformDvsProductSpecOperationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformDvsProductSpecOperationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["operation", "SOAP::SOAPString"],
      ["productSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MergeDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MergeDvsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddDVPortgroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddDVPortgroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVPortgroupConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveDVPortRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveDVPortRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]],
      ["destinationPortgroupKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDvsCapabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDvsCapabilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["capability", "VimWs25::DVSCapability"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDVPortRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureDVPortRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["port", "VimWs25::DVPortConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDVPortStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDVPortStateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portKeys", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RectifyDvsHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RectifyDvsHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hosts", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateNetworkResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateNetworkResourcePoolRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configSpec", "VimWs25::DVSNetworkResourcePoolConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableNetworkResourceManagementRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableNetworkResourceManagementRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["enable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigOptionDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfigOptionDescriptorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfigOptionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigTargetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfigTargetRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryTargetCapabilitiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryTargetCapabilitiesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetCustomValueRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "setCustomValueRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnregisterExtensionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindExtensionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RegisterExtensionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extension", "VimWs25::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateExtensionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extension", "VimWs25::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetPublicKeyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetPublicKeyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetPublicKeyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetPublicKeyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["publicKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetExtensionCertificateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetExtensionCertificateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["certificatePem", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveDatastoreFileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CopyDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CopyDatastoreFileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteDatastoreFileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MakeDirectoryRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MakeDirectoryRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["createParentDirectories", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ChangeOwnerRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ChangeOwnerRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["owner", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateFolderRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveIntoFolderRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["list", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::VirtualMachineConfigSpec"],
      ["pool", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RegisterVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["asTemplate", "SOAP::SOAPBoolean"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateClusterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateClusterRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ClusterConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateClusterExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateClusterExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ClusterConfigSpecEx"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddStandaloneHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddStandaloneHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostConnectSpec"],
      ["compResSpec", "VimWs25::ComputeResourceConfigSpec", [0, 1]],
      ["addConnected", "SOAP::SOAPBoolean"],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDatacenterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDatacenterRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterAndDestroyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnregisterAndDestroyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDVSRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDVSRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVSCreateSpec"]
    ]
  )

  # StoragePod added from VIM 5.5
  LiteralRegistry.register(
    :class => VimWs25::CreateStoragePodRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateStoragePodRequestType",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetCollectorPageSizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetCollectorPageSizeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RewindCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RewindCollectorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetCollectorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyCollectorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostConnectionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryHostConnectionInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSystemResourcesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateSystemResourcesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resourceInfo", "VimWs25::HostSystemResourceInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconnectHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconnectHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cnxSpec", "VimWs25::HostConnectSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisconnectHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisconnectHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnterMaintenanceModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnterMaintenanceModeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeout", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitMaintenanceModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitMaintenanceModeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RebootHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShutdownHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ShutdownHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerDownHostToStandByRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerDownHostToStandByRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerUpHostFromStandByRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerUpHostFromStandByRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryMemoryOverheadRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryMemoryOverheadRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["memorySize", "SOAP::SOAPLong"],
      ["videoRamSize", "SOAP::SOAPInt", [0, 1]],
      ["numVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryMemoryOverheadExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryMemoryOverheadExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmConfigInfo", "VimWs25::VirtualMachineConfigInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureHostForDASRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureHostForDASRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateFlagsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateFlagsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["flagInfo", "VimWs25::HostFlagInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnterLockdownModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnterLockdownModeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitLockdownModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitLockdownModeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireCimServicesTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireCimServicesTicketRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpmiRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpmiRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ipmiInfo", "VimWs25::HostIpmiInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveHardwareUptimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveHardwareUptimeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseGetManifestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseGetManifestRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseCompleteRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseCompleteRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseAbortRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseAbortRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseProgressRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseProgressRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["percent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryIpPoolsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryIpPoolsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateIpPoolRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpPoolRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyIpPoolRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["id", "SOAP::SOAPInt"],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateAssignedLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateAssignedLicenseRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "SOAP::SOAPString"],
      ["licenseKey", "SOAP::SOAPString"],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAssignedLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAssignedLicenseRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAssignedLicensesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAssignedLicensesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entityId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QuerySupportedFeaturesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QuerySupportedFeaturesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryLicenseSourceAvailabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryLicenseSourceAvailabilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryLicenseUsageRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryLicenseUsageRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetLicenseEditionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetLicenseEditionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckLicenseFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckLicenseFeatureRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableFeatureRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableFeatureRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureLicenseSourceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigureLicenseSourceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseSource", "VimWs25::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLicenseRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddLicenseRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveLicenseRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DecodeLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DecodeLicenseRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLicenseLabelRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLicenseLabelRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"],
      ["labelValue", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveLicenseLabelRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveLicenseLabelRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReloadRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReloadRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyNetworkRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyNetworkRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ValidateHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["vhp", "VimWs25::OvfValidateHostParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ParseDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ParseDescriptorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["pdp", "VimWs25::OvfParseDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateImportSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateImportSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["resourcePool", "VimWs25::ManagedObjectReference"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["cisp", "VimWs25::OvfCreateImportSpecParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDescriptorRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["cdp", "VimWs25::OvfCreateDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfProviderSummaryRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfProviderSummaryRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailablePerfMetricRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailablePerfMetricRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCounterRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfCounterRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["counterId", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCounterByLevelRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfCounterByLevelRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["level", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["querySpec", "VimWs25::PerfQuerySpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCompositeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPerfCompositeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["querySpec", "VimWs25::PerfQuerySpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreatePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreatePerfIntervalRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["intervalId", "VimWs25::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemovePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemovePerfIntervalRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["samplePeriod", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePerfIntervalRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["interval", "VimWs25::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EstimateDatabaseSizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EstimateDatabaseSizeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dbSizeParam", "VimWs25::DatabaseSizeParam"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["config", "VimWs25::ResourceConfigSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveIntoResourcePoolRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["list", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateChildResourceConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateChildResourceConfigurationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ResourceConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateResourcePoolRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ResourceConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyChildrenRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyChildrenRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["resSpec", "VimWs25::ResourceConfigSpec"],
      ["configSpec", "VimWs25::VAppConfigSpec"],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateChildVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateChildVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::VirtualMachineConfigSpec"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterChildVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RegisterChildVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImportVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ImportVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ImportSpec"],
      ["folder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryResourceConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryResourceConfigOptionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRuntimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshRuntimeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByUuidRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByDatastorePathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByDatastorePathRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByDnsNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByDnsNameRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByIpRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByIpRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByInventoryPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindByInventoryPathRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["inventoryPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindChildRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindChildRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAllByUuidRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByDnsNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAllByDnsNameRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByIpRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAllByIpRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CurrentTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CurrentTimeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveServiceContentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveServiceContentRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateMigrationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ValidateMigrationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVMotionCompatibilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveProductComponentsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveProductComponentsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServiceMessageRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateServiceMessageRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginBySSPIRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginBySSPIRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["base64Token", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogoutRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LogoutRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireLocalTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireLocalTicketRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TerminateSessionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "TerminateSessionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sessionId", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetLocaleRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetLocaleRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["locale", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginExtensionBySubjectNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginExtensionBySubjectNameRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginExtensionByCertificateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LoginExtensionByCertificateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImpersonateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ImpersonateUserRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SessionIsActiveRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionIsActiveRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sessionID", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireCloneTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireCloneTicketRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneSessionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneSessionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cloneTicket", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureDatastoreIORMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigureDatastoreIORMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::StorageIORMConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryIORMConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryIORMConfigOptionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CancelTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateProgressRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateProgressRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["percentDone", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetTaskStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetTaskStateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["state", "SOAP::SOAPString"],
      ["result", nil, [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetTaskDescriptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetTaskDescriptionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["description", "VimWs25::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadNextTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadNextTasksRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadPreviousTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadPreviousTasksRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCollectorForTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateCollectorForTasksRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::TaskFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["taskTypeId", "SOAP::SOAPString"],
      ["initiatedBy", "SOAP::SOAPString", [0, 1]],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveUserGroupsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveUserGroupsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["domain", "SOAP::SOAPString", [0, 1]],
      ["searchStr", "SOAP::SOAPString"],
      ["belongsToGroup", "SOAP::SOAPString", [0, 1]],
      ["belongsToUser", "SOAP::SOAPString", [0, 1]],
      ["exactMatch", "SOAP::SOAPBoolean"],
      ["findUsers", "SOAP::SOAPBoolean"],
      ["findGroups", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVAppConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVAppConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VAppConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLinkedChildrenRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLinkedChildrenRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["addChangeSet", "VimWs25::VirtualAppLinkInfo[]", [0, nil]],
      ["removeSet", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VAppCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExportVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOffVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOffVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SuspendVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "unregisterVAppRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["spec", "VimWs25::VirtualDiskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MoveVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CopyVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CopyVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destSpec", "VimWs25::VirtualDiskSpec", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["newCapacityKb", "SOAP::SOAPLong"],
      ["eagerZero", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskFragmentationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVirtualDiskFragmentationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DefragmentVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DefragmentVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShrinkVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ShrinkVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["copy", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InflateVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "InflateVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EagerZeroVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EagerZeroVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ZeroFillVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ZeroFillVirtualDiskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetVirtualDiskUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetVirtualDiskUuidRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVirtualDiskUuidRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskGeometryRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVirtualDiskGeometryRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshStorageInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshStorageInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateSnapshotRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["memory", "SOAP::SOAPBoolean"],
      ["quiesce", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RevertToCurrentSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RevertToCurrentSnapshotRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAllSnapshotsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAllSnapshotsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtractOvfEnvironmentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtractOvfEnvironmentRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOffVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOffVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SuspendVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShutdownGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ShutdownGuestRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RebootGuestRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StandbyGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StandbyGuestRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AnswerVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AnswerVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["questionId", "SOAP::SOAPString"],
      ["answerChoice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizeVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizeVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckCustomizationSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrateVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["priority", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RelocateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RelocateVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineRelocateSpec"],
      ["priority", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["folder", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::VirtualMachineCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportVmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExportVmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MarkAsTemplateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MarkAsTemplateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MarkAsVirtualMachineRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MarkAsVirtualMachineRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pool", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnregisterVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetGuestInformationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetGuestInformationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MountToolsInstallerRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MountToolsInstallerRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnmountToolsInstallerRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnmountToolsInstallerRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeToolsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeToolsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["installerOptions", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireMksTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireMksTicketRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcquireTicketRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetScreenResolutionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetScreenResolutionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DefragmentAllDisksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DefragmentAllDisksRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateSecondaryVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TurnOffFaultToleranceForVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "TurnOffFaultToleranceForVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MakePrimaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "MakePrimaryVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TerminateFaultTolerantVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "TerminateFaultTolerantVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableSecondaryVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableSecondaryVMRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetDisplayTopologyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetDisplayTopologyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["displays", "VimWs25::VirtualMachineDisplayTopology[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartRecordingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StartRecordingRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopRecordingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StopRecordingRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartReplayingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StartReplayingRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["replaySnapshot", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopReplayingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StopReplayingRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PromoteDisksRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PromoteDisksRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["unlink", "SOAP::SOAPBoolean"],
      ["disks", "VimWs25::VirtualDisk[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateScreenshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateScreenshotRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryChangedDiskAreasRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryChangedDiskAreasRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["snapshot", "VimWs25::ManagedObjectReference", [0, 1]],
      ["deviceKey", "SOAP::SOAPInt"],
      ["startOffset", "SOAP::SOAPLong"],
      ["changeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnownedFilesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUnownedFilesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReloadVirtualMachineFromPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "reloadVirtualMachineFromPathRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configurationPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryFaultToleranceCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryFaultToleranceCompatibilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveAlarmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureAlarmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateAlarmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetAlarmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AreAlarmActionsEnabledRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AreAlarmActionsEnabledRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableAlarmActionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableAlarmActionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetAlarmStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GetAlarmStateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcknowledgeAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AcknowledgeAlarmRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDVPortgroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureDVPortgroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVPortgroupConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableDvsSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailableDvsSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryCompatibleHostForNewDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryCompatibleHostForNewDvsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryCompatibleHostForExistingDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryCompatibleHostForExistingDvsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsCompatibleHostSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsCompatibleHostSpecRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsFeatureCapabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsFeatureCapabilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsByUuidRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsConfigTargetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsConfigTargetRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dvs", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsCheckCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDvsCheckCompatibilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hostContainer", "VimWs25::DistributedVirtualSwitchManagerHostContainer"],
      ["dvsProductSpec", "VimWs25::DistributedVirtualSwitchManagerDvsProductSpec", [0, 1]],
      ["hostFilterSpec", "VimWs25::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadNextEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadNextEventsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadPreviousEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadPreviousEventsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveArgumentDescriptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveArgumentDescriptionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["eventTypeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCollectorForEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateCollectorForEventsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogUserEventRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LogUserEventRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["msg", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryEventsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PostEventRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "PostEventRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["eventToPost", "VimWs25::Event"],
      ["taskInfo", "VimWs25::TaskInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::JoinDomainRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "JoinDomainRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["domainName", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LeaveCurrentDomainRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "LeaveCurrentDomainRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureAutostartRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureAutostartRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostAutoStartManagerConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerOnRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartPowerOnRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerOffRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartPowerOffRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryBootDevicesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryBootDevicesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateBootDeviceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateBootDeviceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableHyperThreadingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableHyperThreadingRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableHyperThreadingRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableHyperThreadingRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SearchDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SearchDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VimWs25::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SearchDatastoreSubFoldersRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SearchDatastoreSubFoldersRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VimWs25::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeleteFileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLocalSwapDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateLocalSwapDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableDisksForVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailableDisksForVmfsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreCreateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVmfsDatastoreCreateOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateVmfsDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VmfsDatastoreCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExtendOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVmfsDatastoreExtendOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["devicePath", "SOAP::SOAPString"],
      ["suppressExpandCandidates", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExpandOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVmfsDatastoreExpandOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendVmfsDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VmfsDatastoreExtendSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpandVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpandVmfsDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VmfsDatastoreExpandSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateNasDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateNasDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostNasVolumeSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateLocalDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateLocalDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveDatastoreRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureDatastorePrincipalRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigureDatastorePrincipalRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUnresolvedVmfsVolumesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResignatureUnresolvedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResignatureUnresolvedVmfsVolumeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resolutionSpec", "VimWs25::HostUnresolvedVmfsResignatureSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDateTimeConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDateTimeConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostDateTimeConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableTimeZonesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailableTimeZonesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDateTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryDateTimeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDateTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDateTimeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dateTime", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDateTimeSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshDateTimeSystemRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailablePartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryAvailablePartitionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectActivePartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectActivePartitionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["partition", "VimWs25::HostScsiDiskPartition", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPartitionCreateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPartitionCreateOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPartitionCreateDescRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPartitionCreateDescRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["diskUuid", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDiagnosticPartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDiagnosticPartitionRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDefaultPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDefaultPolicyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["defaultPolicy", "VimWs25::HostFirewallDefaultPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableRulesetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableRulesetRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableRulesetRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableRulesetRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshFirewallRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshFirewallRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetFirmwareToFactoryDefaultsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetFirmwareToFactoryDefaultsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BackupFirmwareConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "BackupFirmwareConfigurationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryFirmwareConfigUploadURLRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryFirmwareConfigUploadURLRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestoreFirmwareConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RestoreFirmwareConfigurationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshHealthStatusSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshHealthStatusSystemRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetSystemHealthInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetSystemHealthInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryModulesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryModulesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateModuleOptionStringRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateModuleOptionStringRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["options", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfiguredModuleOptionStringRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryConfiguredModuleOptionStringRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateUserRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "VimWs25::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateUserRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "VimWs25::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["group", "VimWs25::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveUserRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["groupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AssignUserToGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AssignUserToGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnassignUserFromGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnassignUserFromGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureServiceConsoleReservationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureServiceConsoleReservationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cfgBytes", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureVirtualMachineReservationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureVirtualMachineReservationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineMemoryReservationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateNetworkConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateNetworkConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostNetworkConfig"],
      ["changeMode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDnsConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDnsConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostDnsConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpRouteConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpRouteConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateConsoleIpRouteConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateConsoleIpRouteConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpRouteTableConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpRouteTableConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteTableConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddVirtualSwitchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveVirtualSwitchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualSwitchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddPortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddPortGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgrp", "VimWs25::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemovePortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemovePortGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pgName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePortGroupRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pgName", "SOAP::SOAPString"],
      ["portgrp", "VimWs25::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePhysicalNicLinkSpeedRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePhysicalNicLinkSpeedRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryNetworkHintRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryNetworkHintRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddServiceConsoleVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveServiceConsoleVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateServiceConsoleVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestartServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RestartServiceConsoleVirtualNicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshNetworkSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshNetworkSystemRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckHostPatchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScanHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ScanHostPatchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["repository", "VimWs25::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScanHostPatchV2RequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ScanHostPatchV2RequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StageHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StageHostPatchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InstallHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "InstallHostPatchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["repository", "VimWs25::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString"],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InstallHostPatchV2RequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "InstallHostPatchV2RequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UninstallHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UninstallHostPatchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["bulletinIds", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryHostPatchRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePassthruConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatePassthruConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostPciPassthruConfig[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigurePowerPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigurePowerPolicyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServicePolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateServicePolicyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StartServiceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "StopServiceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestartServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RestartServiceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UninstallServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UninstallServiceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshServicesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshServicesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureSnmpAgentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureSnmpAgentRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostSnmpConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SendTestNotificationRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SendTestNotificationRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveDiskPartitionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveDiskPartitionInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeDiskPartitionInfoRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoForResizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeDiskPartitionInfoForResizeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["partition", "VimWs25::HostScsiDiskPartition"],
      ["blockRange", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDiskPartitionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateDiskPartitionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiskPartitionSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FormatVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FormatVmfsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["createSpec", "VimWs25::HostVmfsSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RescanVmfsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AttachVmfsExtentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AttachVmfsExtentRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpandVmfsExtentRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpandVmfsExtentRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeVmfsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVmLayoutRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeVmLayoutRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryUnresolvedVmfsVolumeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResolveMultipleUnresolvedVmfsVolumesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResolveMultipleUnresolvedVmfsVolumesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resolutionSpec", "VimWs25::HostUnresolvedVmfsResolutionSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnmountForceMountedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UnmountForceMountedVmfsVolumeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanHbaRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RescanHbaRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hbaDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanAllHbaRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RescanAllHbaRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSoftwareInternetScsiEnabledRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateSoftwareInternetScsiEnabledRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiDiscoveryPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiDiscoveryPropertiesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["discoveryProperties", "VimWs25::HostInternetScsiHbaDiscoveryProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAuthenticationPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiAuthenticationPropertiesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiDigestPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiDigestPropertiesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAdvancedOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiAdvancedOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]],
      ["options", "VimWs25::HostInternetScsiHbaParamValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiIPPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiIPPropertiesRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["ipProperties", "VimWs25::HostInternetScsiHbaIPProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiNameRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAliasRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateInternetScsiAliasRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddInternetScsiSendTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddInternetScsiSendTargetsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveInternetScsiSendTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveInternetScsiSendTargetsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddInternetScsiStaticTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AddInternetScsiStaticTargetsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveInternetScsiStaticTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveInternetScsiStaticTargetsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableMultipathPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "EnableMultipathPathRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableMultipathPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableMultipathPathRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetMultipathLunPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SetMultipathLunPolicyRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["lunId", "SOAP::SOAPString"],
      ["policy", "VimWs25::HostMultipathInfoLogicalUnitPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPathSelectionPolicyOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPathSelectionPolicyOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryStorageArrayTypePolicyOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryStorageArrayTypePolicyOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateScsiLunDisplayNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateScsiLunDisplayNameRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["lunUuid", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshStorageSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RefreshStorageSystemRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateIpConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ipConfig", "VimWs25::HostIpConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectVnicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectVnicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeselectVnicRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeselectVnicRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryNetConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryNetConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectVnicForNicTypeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "SelectVnicForNicTypeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeselectVnicForNicTypeRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DeselectVnicForNicTypeRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateOptionsRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["changedValue", "VimWs25::OptionValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckComplianceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckComplianceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryComplianceStatusRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryComplianceStatusRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClearComplianceStatusRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ClearComplianceStatusRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryExpressionMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryExpressionMetadataRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["expressionName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AssociateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "AssociateProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DissociateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DissociateProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckProfileComplianceRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckProfileComplianceRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExportProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["createSpec", "VimWs25::ProfileCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPolicyMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryPolicyMetadataRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["policyName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAssociatedProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "FindAssociatedProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateClusterProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateClusterProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::ClusterProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateReferenceHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateReferenceHostRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateHostProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateHostProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExecuteHostProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ExecuteHostProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["deferredParam", "VimWs25::ProfileDeferredPolicyOptionParameter[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyHostConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplyHostConfigRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["configSpec", "VimWs25::HostConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenerateConfigTaskListRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "GenerateConfigTaskListRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configSpec", "VimWs25::HostConfigSpec"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostProfileMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryHostProfileMetadataRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profileName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDefaultProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateDefaultProfileRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profileType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ReconfigureScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RunScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RunScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveEntityScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveEntityScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateObjectScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateObjectScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveObjectScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RetrieveObjectScheduledTaskRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OpenInventoryViewFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "OpenInventoryViewFolderRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloseInventoryViewFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CloseInventoryViewFolderRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ModifyListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ModifyListViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["add", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["remove", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetListViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetListViewFromViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ResetListViewFromViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["view", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "DestroyViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateInventoryViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateInventoryViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateContainerViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateContainerViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateListViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateListViewFromViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateListViewFromViewRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["view", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RevertToSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RevertToSnapshotRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveSnapshotRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["removeChildren", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "RenameSnapshotRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckCompatibilityRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityExRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "QueryVMotionCompatibilityExRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckMigrateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckMigrateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckRelocateRequestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckRelocateRequestType",
    :schema_qualified => false,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VirtualMachineRelocateSpec"],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AboutInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "AboutInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["build", "SOAP::SOAPString"],
      ["localeVersion", "SOAP::SOAPString", [0, 1]],
      ["localeBuild", "SOAP::SOAPString", [0, 1]],
      ["osType", "SOAP::SOAPString"],
      ["productLineId", "SOAP::SOAPString"],
      ["apiType", "SOAP::SOAPString"],
      ["apiVersion", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["licenseProductName", "SOAP::SOAPString", [0, 1]],
      ["licenseProductVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthorizationDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["privilege", "VimWs25::ElementDescription[]", [1, nil]],
      ["privilegeGroup", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Permission,
    :schema_ns => "urn:vim25",
    :schema_type => "Permission",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["roleId", "SOAP::SOAPInt"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPermission,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPermission",
    :schema_element => [
      ["Permission", ["VimWs25::Permission[]", XSD::QName.new("urn:vim25", "Permission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthorizationRole,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationRole",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["system", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["info", "VimWs25::Description"],
      ["privilege", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAuthorizationRole,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAuthorizationRole",
    :schema_element => [
      ["AuthorizationRole", ["VimWs25::AuthorizationRole[]", XSD::QName.new("urn:vim25", "AuthorizationRole")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthorizationPrivilege,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationPrivilege",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["privId", "SOAP::SOAPString"],
      ["onParent", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAuthorizationPrivilege,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAuthorizationPrivilege",
    :schema_element => [
      ["AuthorizationPrivilege", ["VimWs25::AuthorizationPrivilege[]", XSD::QName.new("urn:vim25", "AuthorizationPrivilege")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BoolPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "BoolPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Capability,
    :schema_ns => "urn:vim25",
    :schema_type => "Capability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["provisioningSupported", "SOAP::SOAPBoolean"],
      ["multiHostSupported", "SOAP::SOAPBoolean"],
      ["userShellAccessSupported", "SOAP::SOAPBoolean"],
      ["supportedEVCMode", "VimWs25::EVCMode[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterComputeResourceSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterComputeResourceSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "SOAP::SOAPString"],
      ["currentFailoverLevel", "SOAP::SOAPInt"],
      ["admissionControlInfo", "VimWs25::ClusterDasAdmissionControlInfo", [0, 1]],
      ["numVmotions", "SOAP::SOAPInt"],
      ["targetBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeResourceSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeResourceConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeResourceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldDef,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDef",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["managedObjectType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPrivileges", "VimWs25::PrivilegePolicyDef", [0, 1]],
      ["fieldInstancePrivileges", "VimWs25::PrivilegePolicyDef", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfCustomFieldDef,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfCustomFieldDef",
    :schema_element => [
      ["CustomFieldDef", ["VimWs25::CustomFieldDef[]", XSD::QName.new("urn:vim25", "CustomFieldDef")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldValue,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfCustomFieldValue,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfCustomFieldValue",
    :schema_element => [
      ["CustomFieldValue", ["VimWs25::CustomFieldValue[]", XSD::QName.new("urn:vim25", "CustomFieldValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldStringValue,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldStringValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSpecInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpecInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastUpdateTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfCustomizationSpecInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfCustomizationSpecInfo",
    :schema_element => [
      ["CustomizationSpecInfo", ["VimWs25::CustomizationSpecInfo[]", XSD::QName.new("urn:vim25", "CustomizationSpecInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSpecItem,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpecItem",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["info", "VimWs25::CustomizationSpecInfo"],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong", [0, 1]],
      ["accessible", "SOAP::SOAPBoolean"],
      ["multipleHostAccess", "SOAP::SOAPBoolean", [0, 1]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["directoryHierarchySupported", "SOAP::SOAPBoolean"],
      ["rawDiskMappingsSupported", "SOAP::SOAPBoolean"],
      ["perFileThinProvisioningSupported", "SOAP::SOAPBoolean"],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreHostMount,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreHostMount",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["mountInfo", "VimWs25::HostMountInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDatastoreHostMount,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDatastoreHostMount",
    :schema_element => [
      ["DatastoreHostMount", ["VimWs25::DatastoreHostMount[]", XSD::QName.new("urn:vim25", "DatastoreHostMount")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreMountPathDatastorePair,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreMountPathDatastorePair",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["oldMountPath", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDatastoreMountPathDatastorePair,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDatastoreMountPathDatastorePair",
    :schema_element => [
      ["DatastoreMountPathDatastorePair", ["VimWs25::DatastoreMountPathDatastorePair[]", XSD::QName.new("urn:vim25", "DatastoreMountPathDatastorePair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Description,
    :schema_ns => "urn:vim25",
    :schema_type => "Description",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticManagerLogDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogDescriptor",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["fileName", "SOAP::SOAPString"],
      ["creator", "SOAP::SOAPString"],
      ["format", "SOAP::SOAPString"],
      ["mimeType", "SOAP::SOAPString"],
      ["info", "VimWs25::Description"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDiagnosticManagerLogDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDiagnosticManagerLogDescriptor",
    :schema_element => [
      ["DiagnosticManagerLogDescriptor", ["VimWs25::DiagnosticManagerLogDescriptor[]", XSD::QName.new("urn:vim25", "DiagnosticManagerLogDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticManagerLogHeader,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogHeader",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["lineStart", "SOAP::SOAPInt"],
      ["lineEnd", "SOAP::SOAPInt"],
      ["lineText", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticManagerBundleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerBundleInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["system", "VimWs25::ManagedObjectReference", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDiagnosticManagerBundleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDiagnosticManagerBundleInfo",
    :schema_element => [
      ["DiagnosticManagerBundleInfo", ["VimWs25::DiagnosticManagerBundleInfo[]", XSD::QName.new("urn:vim25", "DiagnosticManagerBundleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSContactInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSContactInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["contact", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSFeatureCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSFeatureCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dvsOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortGroupOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["compatibleHostComponentProductInfo", "VimWs25::DistributedVirtualSwitchHostProductSpec[]", [0, nil]],
      ["featuresSupported", "VimWs25::DVSFeatureCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["hostMember", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["portgroupName", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["contact", "VimWs25::DVSContactInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["autoPreInstallAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["autoUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["partialUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSUplinkPortPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSUplinkPortPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSNameArrayUplinkPortPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNameArrayUplinkPortPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["uplinkPortName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["host", "VimWs25::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VimWs25::DVSContactInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configSpec", "VimWs25::DVSConfigSpec"],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["capability", "VimWs25::DVSCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting"],
      ["host", "VimWs25::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VimWs25::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCMode",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["guaranteedCPUFeatures", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["track", "SOAP::SOAPString[]", [0, nil]],
      ["vendorTier", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfEVCMode,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfEVCMode",
    :schema_element => [
      ["EVCMode", ["VimWs25::EVCMode[]", XSD::QName.new("urn:vim25", "EVCMode")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ElementDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ElementDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfElementDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfElementDescription",
    :schema_element => [
      ["ElementDescription", ["VimWs25::ElementDescription[]", XSD::QName.new("urn:vim25", "ElementDescription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnumDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "EnumDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["tags", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfEnumDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfEnumDescription",
    :schema_element => [
      ["EnumDescription", ["VimWs25::EnumDescription[]", XSD::QName.new("urn:vim25", "EnumDescription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendedDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendedElementDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedElementDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionServerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionServerInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["description", "VimWs25::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["adminEmail", "SOAP::SOAPString[]", [1, nil]],
      ["serverThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionServerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionServerInfo",
    :schema_element => [
      ["ExtensionServerInfo", ["VimWs25::ExtensionServerInfo[]", XSD::QName.new("urn:vim25", "ExtensionServerInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionClientInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionClientInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "VimWs25::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionClientInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionClientInfo",
    :schema_element => [
      ["ExtensionClientInfo", ["VimWs25::ExtensionClientInfo[]", XSD::QName.new("urn:vim25", "ExtensionClientInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionTaskTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionTaskTypeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["taskID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionTaskTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionTaskTypeInfo",
    :schema_element => [
      ["ExtensionTaskTypeInfo", ["VimWs25::ExtensionTaskTypeInfo[]", XSD::QName.new("urn:vim25", "ExtensionTaskTypeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionEventTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionEventTypeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["eventID", "SOAP::SOAPString"],
      ["eventTypeSchema", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionEventTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionEventTypeInfo",
    :schema_element => [
      ["ExtensionEventTypeInfo", ["VimWs25::ExtensionEventTypeInfo[]", XSD::QName.new("urn:vim25", "ExtensionEventTypeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionFaultTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionFaultTypeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionFaultTypeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionFaultTypeInfo",
    :schema_element => [
      ["ExtensionFaultTypeInfo", ["VimWs25::ExtensionFaultTypeInfo[]", XSD::QName.new("urn:vim25", "ExtensionFaultTypeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionPrivilegeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionPrivilegeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["privID", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionPrivilegeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionPrivilegeInfo",
    :schema_element => [
      ["ExtensionPrivilegeInfo", ["VimWs25::ExtensionPrivilegeInfo[]", XSD::QName.new("urn:vim25", "ExtensionPrivilegeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionResourceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionResourceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["v_module", ["SOAP::SOAPString", XSD::QName.new("urn:vim25", "module")]],
      ["data", "VimWs25::KeyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtensionResourceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtensionResourceInfo",
    :schema_element => [
      ["ExtensionResourceInfo", ["VimWs25::ExtensionResourceInfo[]", XSD::QName.new("urn:vim25", "ExtensionResourceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtensionHealthInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtensionHealthInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Extension,
    :schema_ns => "urn:vim25",
    :schema_type => "Extension",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["description", "VimWs25::Description"],
      ["key", "SOAP::SOAPString"],
      ["company", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString"],
      ["subjectName", "SOAP::SOAPString", [0, 1]],
      ["server", "VimWs25::ExtensionServerInfo[]", [0, nil]],
      ["client", "VimWs25::ExtensionClientInfo[]", [0, nil]],
      ["taskList", "VimWs25::ExtensionTaskTypeInfo[]", [0, nil]],
      ["eventList", "VimWs25::ExtensionEventTypeInfo[]", [0, nil]],
      ["faultList", "VimWs25::ExtensionFaultTypeInfo[]", [0, nil]],
      ["privilegeList", "VimWs25::ExtensionPrivilegeInfo[]", [0, nil]],
      ["resourceList", "VimWs25::ExtensionResourceInfo[]", [0, nil]],
      ["lastHeartbeatTime", "SOAP::SOAPDateTime"],
      ["healthInfo", "VimWs25::ExtensionHealthInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtension,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtension",
    :schema_element => [
      ["Extension", ["VimWs25::Extension[]", XSD::QName.new("urn:vim25", "Extension")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostServiceTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServiceTicket",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["service", "SOAP::SOAPString"],
      ["serviceVersion", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseDatastoreLeaseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseDatastoreLeaseInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastoreKey", "SOAP::SOAPString"],
      ["hosts", "VimWs25::HttpNfcLeaseHostInfo[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHttpNfcLeaseDatastoreLeaseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHttpNfcLeaseDatastoreLeaseInfo",
    :schema_element => [
      ["HttpNfcLeaseDatastoreLeaseInfo", ["VimWs25::HttpNfcLeaseDatastoreLeaseInfo[]", XSD::QName.new("urn:vim25", "HttpNfcLeaseDatastoreLeaseInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseHostInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHttpNfcLeaseHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHttpNfcLeaseHostInfo",
    :schema_element => [
      ["HttpNfcLeaseHostInfo", ["VimWs25::HttpNfcLeaseHostInfo[]", XSD::QName.new("urn:vim25", "HttpNfcLeaseHostInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["lease", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["deviceUrl", "VimWs25::HttpNfcLeaseDeviceUrl[]", [0, nil]],
      ["totalDiskCapacityInKB", "SOAP::SOAPLong"],
      ["leaseTimeout", "SOAP::SOAPInt"],
      ["hostMap", "VimWs25::HttpNfcLeaseDatastoreLeaseInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseDeviceUrl,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseDeviceUrl",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["importKey", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"],
      ["disk", "SOAP::SOAPBoolean", [0, 1]],
      ["targetId", "SOAP::SOAPString", [0, 1]],
      ["datastoreKey", "SOAP::SOAPString", [0, 1]],
      ["fileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHttpNfcLeaseDeviceUrl,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHttpNfcLeaseDeviceUrl",
    :schema_element => [
      ["HttpNfcLeaseDeviceUrl", ["VimWs25::HttpNfcLeaseDeviceUrl[]", XSD::QName.new("urn:vim25", "HttpNfcLeaseDeviceUrl")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseManifestEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseManifestEntry",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["sha1", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"],
      ["disk", "SOAP::SOAPBoolean"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHttpNfcLeaseManifestEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHttpNfcLeaseManifestEntry",
    :schema_element => [
      ["HttpNfcLeaseManifestEntry", ["VimWs25::HttpNfcLeaseManifestEntry[]", XSD::QName.new("urn:vim25", "HttpNfcLeaseManifestEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ImportSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfImportSpec",
    :schema_element => [
      ["ImportSpec", ["VimWs25::ImportSpec[]", XSD::QName.new("urn:vim25", "ImportSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InheritablePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "InheritablePolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IntPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "IntPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::KeyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "KeyValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfKeyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfKeyValue",
    :schema_element => [
      ["KeyValue", ["VimWs25::KeyValue[]", XSD::QName.new("urn:vim25", "KeyValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseAssignmentManagerLicenseAssignment,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAssignmentManagerLicenseAssignment",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"],
      ["scope", "SOAP::SOAPString", [0, 1]],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]],
      ["assignedLicense", "VimWs25::LicenseManagerLicenseInfo"],
      ["properties", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLicenseAssignmentManagerLicenseAssignment,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLicenseAssignmentManagerLicenseAssignment",
    :schema_element => [
      ["LicenseAssignmentManagerLicenseAssignment", ["VimWs25::LicenseAssignmentManagerLicenseAssignment[]", XSD::QName.new("urn:vim25", "LicenseAssignmentManagerLicenseAssignment")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseSource,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseSource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseServerSource,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerSource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalLicenseSource,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalLicenseSource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["licenseKeys", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EvaluationLicenseSource,
    :schema_ns => "urn:vim25",
    :schema_type => "EvaluationLicenseSource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["remainingHours", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseFeatureInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["featureName", "SOAP::SOAPString"],
      ["featureDescription", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["sourceRestriction", "SOAP::SOAPString", [0, 1]],
      ["dependentKey", "SOAP::SOAPString[]", [0, nil]],
      ["edition", "SOAP::SOAPBoolean", [0, 1]],
      ["expiresOn", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLicenseFeatureInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLicenseFeatureInfo",
    :schema_element => [
      ["LicenseFeatureInfo", ["VimWs25::LicenseFeatureInfo[]", XSD::QName.new("urn:vim25", "LicenseFeatureInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseReservationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLicenseReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLicenseReservationInfo",
    :schema_element => [
      ["LicenseReservationInfo", ["VimWs25::LicenseReservationInfo[]", XSD::QName.new("urn:vim25", "LicenseReservationInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseAvailabilityInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAvailabilityInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["feature", "VimWs25::LicenseFeatureInfo"],
      ["total", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLicenseAvailabilityInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLicenseAvailabilityInfo",
    :schema_element => [
      ["LicenseAvailabilityInfo", ["VimWs25::LicenseAvailabilityInfo[]", XSD::QName.new("urn:vim25", "LicenseAvailabilityInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseDiagnostics,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseDiagnostics",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["sourceLastChanged", "SOAP::SOAPDateTime"],
      ["sourceLost", "SOAP::SOAPString"],
      ["sourceLatency", "SOAP::SOAPFloat"],
      ["licenseRequests", "SOAP::SOAPString"],
      ["licenseRequestFailures", "SOAP::SOAPString"],
      ["licenseFeatureUnknowns", "SOAP::SOAPString"],
      ["opState", "SOAP::SOAPString"],
      ["lastStatusUpdate", "SOAP::SOAPDateTime"],
      ["opFailureMessage", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseUsageInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseUsageInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::LicenseSource"],
      ["sourceAvailable", "SOAP::SOAPBoolean"],
      ["reservationInfo", "VimWs25::LicenseReservationInfo[]", [0, nil]],
      ["featureInfo", "VimWs25::LicenseFeatureInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseManagerEvaluationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerEvaluationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["properties", "VimWs25::KeyAnyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseManagerLicenseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerLicenseInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"],
      ["editionKey", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["total", "SOAP::SOAPInt"],
      ["used", "SOAP::SOAPInt", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["properties", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLicenseManagerLicenseInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLicenseManagerLicenseInfo",
    :schema_element => [
      ["LicenseManagerLicenseInfo", ["VimWs25::LicenseManagerLicenseInfo[]", XSD::QName.new("urn:vim25", "LicenseManagerLicenseInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalizationManagerMessageCatalog,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalizationManagerMessageCatalog",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["moduleName", "SOAP::SOAPString"],
      ["catalogName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["catalogUri", "SOAP::SOAPString"],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["md5sum", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfLocalizationManagerMessageCatalog,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfLocalizationManagerMessageCatalog",
    :schema_element => [
      ["LocalizationManagerMessageCatalog", ["VimWs25::LocalizationManagerMessageCatalog[]", XSD::QName.new("urn:vim25", "LocalizationManagerMessageCatalog")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LongPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "LongPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean"],
      ["ipPoolName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumericRange,
    :schema_ns => "urn:vim25",
    :schema_type => "NumericRange",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPInt"],
      ["v_end", ["SOAP::SOAPInt", XSD::QName.new("urn:vim25", "end")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNumericRange,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNumericRange",
    :schema_element => [
      ["NumericRange", ["VimWs25::NumericRange[]", XSD::QName.new("urn:vim25", "NumericRange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDeploymentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDeploymentOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOvfDeploymentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOvfDeploymentOption",
    :schema_element => [
      ["OvfDeploymentOption", ["VimWs25::OvfDeploymentOption[]", XSD::QName.new("urn:vim25", "OvfDeploymentOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfManagerCommonParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfManagerCommonParams",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfValidateHostParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfValidateHostParams",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfValidateHostResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfValidateHostResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["downloadSize", "SOAP::SOAPLong", [0, 1]],
      ["flatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["sparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["supportedDiskProvisioning", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfParseDescriptorParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfParseDescriptorParams",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfParseDescriptorResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfParseDescriptorResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VimWs25::OvfNetworkInfo[]", [0, nil]],
      ["ipAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocols", "SOAP::SOAPString[]", [0, nil]],
      ["property", "VimWs25::VAppPropertyInfo[]", [0, nil]],
      ["productInfo", "VimWs25::VAppProductInfo", [0, 1]],
      ["annotation", "SOAP::SOAPString"],
      ["approximateDownloadSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateFlatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateSparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["defaultEntityName", "SOAP::SOAPString"],
      ["virtualApp", "SOAP::SOAPBoolean"],
      ["deploymentOption", "VimWs25::OvfDeploymentOption[]", [0, nil]],
      ["defaultDeploymentOption", "SOAP::SOAPString"],
      ["entityName", "VimWs25::KeyValue[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNetworkInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOvfNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOvfNetworkInfo",
    :schema_element => [
      ["OvfNetworkInfo", ["VimWs25::OvfNetworkInfo[]", XSD::QName.new("urn:vim25", "OvfNetworkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfCreateImportSpecParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateImportSpecParams",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VimWs25::KeyValue[]", [0, nil]],
      ["entityName", "SOAP::SOAPString"],
      ["hostSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VimWs25::OvfNetworkMapping[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]],
      ["propertyMapping", "VimWs25::KeyValue[]", [0, nil]],
      ["resourceMapping", "VimWs25::OvfResourceMap[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfResourceMap,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfResourceMap",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "SOAP::SOAPString"],
      ["parent", "VimWs25::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOvfResourceMap,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOvfResourceMap",
    :schema_element => [
      ["OvfResourceMap", ["VimWs25::OvfResourceMap[]", XSD::QName.new("urn:vim25", "OvfResourceMap")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfNetworkMapping,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNetworkMapping",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOvfNetworkMapping,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOvfNetworkMapping",
    :schema_element => [
      ["OvfNetworkMapping", ["VimWs25::OvfNetworkMapping[]", XSD::QName.new("urn:vim25", "OvfNetworkMapping")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfCreateImportSpecResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateImportSpecResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["importSpec", "VimWs25::ImportSpec", [0, 1]],
      ["fileItem", "VimWs25::OvfFileItem[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfFileItem,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfFileItem",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong", [0, 1]],
      ["cimType", "SOAP::SOAPInt"],
      ["create", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOvfFileItem,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOvfFileItem",
    :schema_element => [
      ["OvfFileItem", ["VimWs25::OvfFileItem[]", XSD::QName.new("urn:vim25", "OvfFileItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfCreateDescriptorParams,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateDescriptorParams",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ovfFiles", "VimWs25::OvfFile[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfCreateDescriptorResult,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateDescriptorResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfFile,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfFile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOvfFile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOvfFile",
    :schema_element => [
      ["OvfFile", ["VimWs25::OvfFile[]", XSD::QName.new("urn:vim25", "OvfFile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PasswordField,
    :schema_ns => "urn:vim25",
    :schema_type => "PasswordField",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerformanceDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformanceDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["counterType", "VimWs25::ElementDescription[]", [1, nil]],
      ["statsType", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfProviderSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfProviderSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["currentSupported", "SOAP::SOAPBoolean"],
      ["summarySupported", "SOAP::SOAPBoolean"],
      ["refreshRate", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfCounterInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfCounterInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["nameInfo", "VimWs25::ElementDescription"],
      ["groupInfo", "VimWs25::ElementDescription"],
      ["unitInfo", "VimWs25::ElementDescription"],
      ["rollupType", "SOAP::SOAPString"],
      ["statsType", "SOAP::SOAPString"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["perDeviceLevel", "SOAP::SOAPInt", [0, 1]],
      ["associatedCounterId", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfCounterInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfCounterInfo",
    :schema_element => [
      ["PerfCounterInfo", ["VimWs25::PerfCounterInfo[]", XSD::QName.new("urn:vim25", "PerfCounterInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfMetricId,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricId",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["counterId", "SOAP::SOAPInt"],
      ["instance", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfMetricId,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfMetricId",
    :schema_element => [
      ["PerfMetricId", ["VimWs25::PerfMetricId[]", XSD::QName.new("urn:vim25", "PerfMetricId")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfQuerySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfQuerySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["maxSample", "SOAP::SOAPInt", [0, 1]],
      ["metricId", "VimWs25::PerfMetricId[]", [0, nil]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]],
      ["format", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfQuerySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfQuerySpec",
    :schema_element => [
      ["PerfQuerySpec", ["VimWs25::PerfQuerySpec[]", XSD::QName.new("urn:vim25", "PerfQuerySpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfSampleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfSampleInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfSampleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfSampleInfo",
    :schema_element => [
      ["PerfSampleInfo", ["VimWs25::PerfSampleInfo[]", XSD::QName.new("urn:vim25", "PerfSampleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfMetricSeries,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricSeries",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::PerfMetricId"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfMetricSeries,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfMetricSeries",
    :schema_element => [
      ["PerfMetricSeries", ["VimWs25::PerfMetricSeries[]", XSD::QName.new("urn:vim25", "PerfMetricSeries")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfMetricIntSeries,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricIntSeries",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::PerfMetricId"],
      ["value", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfMetricSeriesCSV,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfMetricSeriesCSV",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::PerfMetricId"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfMetricSeriesCSV,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfMetricSeriesCSV",
    :schema_element => [
      ["PerfMetricSeriesCSV", ["VimWs25::PerfMetricSeriesCSV[]", XSD::QName.new("urn:vim25", "PerfMetricSeriesCSV")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfEntityMetricBase,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfEntityMetricBase",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfEntityMetricBase,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfEntityMetricBase",
    :schema_element => [
      ["PerfEntityMetricBase", ["VimWs25::PerfEntityMetricBase[]", XSD::QName.new("urn:vim25", "PerfEntityMetricBase")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfEntityMetric,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfEntityMetric",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["sampleInfo", "VimWs25::PerfSampleInfo[]", [0, nil]],
      ["value", "VimWs25::PerfMetricSeries[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfEntityMetricCSV,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfEntityMetricCSV",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["sampleInfoCSV", "SOAP::SOAPString"],
      ["value", "VimWs25::PerfMetricSeriesCSV[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfCompositeMetric,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfCompositeMetric",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::PerfEntityMetricBase", [0, 1]],
      ["childEntity", "VimWs25::PerfEntityMetricBase[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfInterval,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfInterval",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["samplingPeriod", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["length", "SOAP::SOAPInt"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPerfInterval,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPerfInterval",
    :schema_element => [
      ["PerfInterval", ["VimWs25::PerfInterval[]", XSD::QName.new("urn:vim25", "PerfInterval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PosixUserSearchResult,
    :schema_ns => "urn:vim25",
    :schema_type => "PosixUserSearchResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"],
      ["id", "SOAP::SOAPInt"],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PrivilegePolicyDef,
    :schema_ns => "urn:vim25",
    :schema_type => "PrivilegePolicyDef",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["createPrivilege", "SOAP::SOAPString"],
      ["readPrivilege", "SOAP::SOAPString"],
      ["updatePrivilege", "SOAP::SOAPString"],
      ["deletePrivilege", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceAllocationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceAllocationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["reservation", "SOAP::SOAPLong", [0, 1]],
      ["expandableReservation", "SOAP::SOAPBoolean", [0, 1]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VimWs25::SharesInfo", [0, 1]],
      ["overheadLimit", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceAllocationOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceAllocationOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VimWs25::SharesOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceConfigOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceConfigOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cpuAllocationOption", "VimWs25::ResourceAllocationOption"],
      ["memoryAllocationOption", "VimWs25::ResourceAllocationOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["cpuAllocation", "VimWs25::ResourceAllocationInfo"],
      ["memoryAllocation", "VimWs25::ResourceAllocationInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfResourceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfResourceConfigSpec",
    :schema_element => [
      ["ResourceConfigSpec", ["VimWs25::ResourceConfigSpec[]", XSD::QName.new("urn:vim25", "ResourceConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatabaseSizeParam,
    :schema_ns => "urn:vim25",
    :schema_type => "DatabaseSizeParam",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inventoryDesc", "VimWs25::InventoryDescription"],
      ["perfStatsDesc", "VimWs25::PerformanceStatisticsDescription", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InventoryDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "InventoryDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numHosts", "SOAP::SOAPInt"],
      ["numVirtualMachines", "SOAP::SOAPInt"],
      ["numResourcePools", "SOAP::SOAPInt", [0, 1]],
      ["numClusters", "SOAP::SOAPInt", [0, 1]],
      ["numCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numDiskDev", "SOAP::SOAPInt", [0, 1]],
      ["numvCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numvNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numvDiskDev", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerformanceStatisticsDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformanceStatisticsDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["intervals", "VimWs25::PerfInterval[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatabaseSizeEstimate,
    :schema_ns => "urn:vim25",
    :schema_type => "DatabaseSizeEstimate",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolResourceUsage,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolResourceUsage",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["reservationUsed", "SOAP::SOAPLong"],
      ["reservationUsedForVm", "SOAP::SOAPLong"],
      ["unreservedForPool", "SOAP::SOAPLong"],
      ["unreservedForVm", "SOAP::SOAPLong"],
      ["overallUsage", "SOAP::SOAPLong"],
      ["maxUsage", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolRuntimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["memory", "VimWs25::ResourcePoolResourceUsage"],
      ["cpu", "VimWs25::ResourcePoolResourceUsage"],
      ["overallStatus", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolQuickStats,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolQuickStats",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPLong", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPLong", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["distributedCpuEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPLong", [0, 1]],
      ["sharedMemory", "SOAP::SOAPLong", [0, 1]],
      ["swappedMemory", "SOAP::SOAPLong", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPLong", [0, 1]],
      ["overheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VimWs25::ResourceConfigSpec"],
      ["runtime", "VimWs25::ResourcePoolRuntimeInfo"],
      ["quickStats", "VimWs25::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVMotionCompatibility,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionCompatibility",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVMotionCompatibility,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVMotionCompatibility",
    :schema_element => [
      ["HostVMotionCompatibility", ["VimWs25::HostVMotionCompatibility[]", XSD::QName.new("urn:vim25", "HostVMotionCompatibility")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProductComponentInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ProductComponentInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["release", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProductComponentInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProductComponentInfo",
    :schema_element => [
      ["ProductComponentInfo", ["VimWs25::ProductComponentInfo[]", XSD::QName.new("urn:vim25", "ProductComponentInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ServiceContent,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceContent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rootFolder", "VimWs25::ManagedObjectReference"],
      ["propertyCollector", "VimWs25::ManagedObjectReference"],
      ["viewManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["about", "VimWs25::AboutInfo"],
      ["setting", "VimWs25::ManagedObjectReference", [0, 1]],
      ["userDirectory", "VimWs25::ManagedObjectReference", [0, 1]],
      ["sessionManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["authorizationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["perfManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["scheduledTaskManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["alarmManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["eventManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["taskManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["extensionManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["customizationSpecManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["customFieldsManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["accountManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diagnosticManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["searchIndex", "VimWs25::ManagedObjectReference", [0, 1]],
      ["fileManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["virtualDiskManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["virtualizationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["vmProvisioningChecker", "VimWs25::ManagedObjectReference", [0, 1]],
      ["vmCompatibilityChecker", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ovfManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ipPoolManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dvSwitchManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["hostProfileManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["clusterProfileManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["complianceManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["localizationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["storageResourceManager", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SessionManagerLocalTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionManagerLocalTicket",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"],
      ["passwordFilePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserSession,
    :schema_ns => "urn:vim25",
    :schema_type => "UserSession",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["loginTime", "SOAP::SOAPDateTime"],
      ["lastActiveTime", "SOAP::SOAPDateTime"],
      ["locale", "SOAP::SOAPString"],
      ["messageLocale", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfUserSession,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfUserSession",
    :schema_element => [
      ["UserSession", ["VimWs25::UserSession[]", XSD::QName.new("urn:vim25", "UserSession")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SharesInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "SharesInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["shares", "SOAP::SOAPInt"],
      ["level", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SharesOption,
    :schema_ns => "urn:vim25",
    :schema_type => "SharesOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VimWs25::IntOption"],
      ["defaultLevel", "SOAP::SOAPString"]
    ]
  )

  # StoragePod added from VIM 5.5
  LiteralRegistry.register(
    :class => VimWs25::StoragePodSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "StoragePodSummary",
    :schema_basetype => XSD::QName.new("urn:vim25", "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["freeSpace", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageIOAllocationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIOAllocationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VimWs25::SharesInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageIOAllocationOption,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIOAllocationOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["limitOption", "VimWs25::LongOption"],
      ["sharesOption", "VimWs25::SharesOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageIORMInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIORMInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["congestionThreshold", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageIORMConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIORMConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["congestionThreshold", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageIORMConfigOption,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageIORMConfigOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabledOption", "VimWs25::BoolOption"],
      ["congestionThresholdOption", "VimWs25::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StringPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "StringPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Tag,
    :schema_ns => "urn:vim25",
    :schema_type => "Tag",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfTag,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfTag",
    :schema_element => [
      ["Tag", ["VimWs25::Tag[]", XSD::QName.new("urn:vim25", "Tag")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["methodInfo", "VimWs25::ElementDescription[]", [1, nil]],
      ["state", "VimWs25::ElementDescription[]", [1, nil]],
      ["reason", "VimWs25::TypeDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskFilterSpecByEntity,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecByEntity",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["recursion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskFilterSpecByTime,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecByTime",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timeType", "SOAP::SOAPString"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskFilterSpecByUsername,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecByUsername",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::TaskFilterSpecByEntity", [0, 1]],
      ["time", "VimWs25::TaskFilterSpecByTime", [0, 1]],
      ["userName", "VimWs25::TaskFilterSpecByUsername", [0, 1]],
      ["state", "SOAP::SOAPString[]", [0, nil]],
      ["alarm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VimWs25::ManagedObjectReference", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["parentTaskKey", "SOAP::SOAPString[]", [0, nil]],
      ["rootTaskKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfTaskInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfTaskInfoState",
    :schema_element => [
      ["TaskInfoState", ["SOAP::SOAPString[]", XSD::QName.new("urn:vim25", "TaskInfoState")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["task", "VimWs25::ManagedObjectReference"],
      ["description", "VimWs25::LocalizableMessage", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["descriptionId", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["locked", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["state", "SOAP::SOAPString"],
      ["cancelled", "SOAP::SOAPBoolean"],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["reason", "VimWs25::TaskReason"],
      ["queueTime", "SOAP::SOAPDateTime"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["completeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt"],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]],
      ["rootTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfTaskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfTaskInfo",
    :schema_element => [
      ["TaskInfo", ["VimWs25::TaskInfo[]", XSD::QName.new("urn:vim25", "TaskInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskReason,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReason",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskReasonSystem,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonSystem",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskReasonUser,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonUser",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskReasonAlarm,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonAlarm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["alarmName", "SOAP::SOAPString"],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entityName", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskReasonSchedule,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskReasonSchedule",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TypeDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "TypeDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfTypeDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfTypeDescription",
    :schema_element => [
      ["TypeDescription", ["VimWs25::TypeDescription[]", XSD::QName.new("urn:vim25", "TypeDescription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualMachineFilesResultFailedVmFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmFile", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo",
    :schema_element => [
      ["UpdateVirtualMachineFilesResultFailedVmFileInfo", ["VimWs25::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", XSD::QName.new("urn:vim25", "UpdateVirtualMachineFilesResultFailedVmFileInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesResult,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdateVirtualMachineFilesResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failedVmFile", "VimWs25::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserSearchResult,
    :schema_ns => "urn:vim25",
    :schema_type => "UserSearchResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfUserSearchResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfUserSearchResult",
    :schema_element => [
      ["UserSearchResult", ["VimWs25::UserSearchResult[]", XSD::QName.new("urn:vim25", "UserSearchResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualAppSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VimWs25::ResourceConfigSpec"],
      ["runtime", "VimWs25::ResourcePoolRuntimeInfo"],
      ["quickStats", "VimWs25::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]],
      ["product", "VimWs25::VAppProductInfo", [0, 1]],
      ["vAppState", "SOAP::SOAPString", [0, 1]],
      ["suspended", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualAppLinkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppLinkInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualAppLinkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualAppLinkInfo",
    :schema_element => [
      ["VirtualAppLinkInfo", ["VimWs25::VirtualAppLinkInfo[]", XSD::QName.new("urn:vim25", "VirtualAppLinkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileBackedVirtualDiskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "FileBackedVirtualDiskSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["capacityKb", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceBackedVirtualDiskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceBackedVirtualDiskSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTicket",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineMksTicket,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMksTicket",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDisplayTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDisplayTopology",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["x", "SOAP::SOAPInt"],
      ["y", "SOAP::SOAPInt"],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineDisplayTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineDisplayTopology",
    :schema_element => [
      ["VirtualMachineDisplayTopology", ["VimWs25::VirtualMachineDisplayTopology[]", XSD::QName.new("urn:vim25", "VirtualMachineDisplayTopology")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiskChangeExtent,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskChangeExtent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDiskChangeExtent,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDiskChangeExtent",
    :schema_element => [
      ["DiskChangeExtent", ["VimWs25::DiskChangeExtent[]", XSD::QName.new("urn:vim25", "DiskChangeExtent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiskChangeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskChangeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startOffset", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"],
      ["changedArea", "VimWs25::DiskChangeExtent[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Action,
    :schema_ns => "urn:vim25",
    :schema_type => "Action",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodActionArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodActionArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfMethodActionArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfMethodActionArgument",
    :schema_element => [
      ["MethodActionArgument", ["VimWs25::MethodActionArgument[]", XSD::QName.new("urn:vim25", "MethodActionArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodAction,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["argument", "VimWs25::MethodActionArgument[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SendEmailAction,
    :schema_ns => "urn:vim25",
    :schema_type => "SendEmailAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toList", "SOAP::SOAPString"],
      ["ccList", "SOAP::SOAPString"],
      ["subject", "SOAP::SOAPString"],
      ["body", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SendSNMPAction,
    :schema_ns => "urn:vim25",
    :schema_type => "SendSNMPAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RunScriptAction,
    :schema_ns => "urn:vim25",
    :schema_type => "RunScriptAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["script", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateTaskAction,
    :schema_ns => "urn:vim25",
    :schema_type => "CreateTaskAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["taskTypeId", "SOAP::SOAPString"],
      ["cancelable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmAction,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAlarmAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAlarmAction",
    :schema_element => [
      ["AlarmAction", ["VimWs25::AlarmAction[]", XSD::QName.new("urn:vim25", "AlarmAction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmTriggeringActionTransitionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmTriggeringActionTransitionSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startState", "SOAP::SOAPString"],
      ["finalState", "SOAP::SOAPString"],
      ["repeats", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAlarmTriggeringActionTransitionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAlarmTriggeringActionTransitionSpec",
    :schema_element => [
      ["AlarmTriggeringActionTransitionSpec", ["VimWs25::AlarmTriggeringActionTransitionSpec[]", XSD::QName.new("urn:vim25", "AlarmTriggeringActionTransitionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmTriggeringAction,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmTriggeringAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::Action"],
      ["transitionSpecs", "VimWs25::AlarmTriggeringActionTransitionSpec[]", [0, nil]],
      ["green2yellow", "SOAP::SOAPBoolean"],
      ["yellow2red", "SOAP::SOAPBoolean"],
      ["red2yellow", "SOAP::SOAPBoolean"],
      ["yellow2green", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GroupAlarmAction,
    :schema_ns => "urn:vim25",
    :schema_type => "GroupAlarmAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::AlarmAction[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expr", "VimWs25::TypeDescription[]", [1, nil]],
      ["stateOperator", "VimWs25::ElementDescription[]", [1, nil]],
      ["metricOperator", "VimWs25::ElementDescription[]", [1, nil]],
      ["hostSystemConnectionState", "VimWs25::ElementDescription[]", [1, nil]],
      ["virtualMachinePowerState", "VimWs25::ElementDescription[]", [1, nil]],
      ["datastoreConnectionState", "VimWs25::ElementDescription[]", [0, nil]],
      ["hostSystemPowerState", "VimWs25::ElementDescription[]", [0, nil]],
      ["virtualMachineGuestHeartbeatStatus", "VimWs25::ElementDescription[]", [0, nil]],
      ["entityStatus", "VimWs25::ElementDescription[]", [1, nil]],
      ["action", "VimWs25::TypeDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAlarmExpression",
    :schema_element => [
      ["AlarmExpression", ["VimWs25::AlarmExpression[]", XSD::QName.new("urn:vim25", "AlarmExpression")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AndAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "AndAlarmExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expression", "VimWs25::AlarmExpression[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OrAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "OrAlarmExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expression", "VimWs25::AlarmExpression[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StateAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "StateAlarmExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operator", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["statePath", "SOAP::SOAPString"],
      ["yellow", "SOAP::SOAPString", [0, 1]],
      ["red", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventAlarmExpressionComparison,
    :schema_ns => "urn:vim25",
    :schema_type => "EventAlarmExpressionComparison",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["attributeName", "SOAP::SOAPString"],
      ["operator", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfEventAlarmExpressionComparison,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfEventAlarmExpressionComparison",
    :schema_element => [
      ["EventAlarmExpressionComparison", ["VimWs25::EventAlarmExpressionComparison[]", XSD::QName.new("urn:vim25", "EventAlarmExpressionComparison")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "EventAlarmExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["comparisons", "VimWs25::EventAlarmExpressionComparison[]", [0, nil]],
      ["eventType", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MetricAlarmExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "MetricAlarmExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operator", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["metric", "VimWs25::PerfMetricId"],
      ["yellow", "SOAP::SOAPInt", [0, 1]],
      ["yellowInterval", "SOAP::SOAPInt", [0, 1]],
      ["red", "SOAP::SOAPInt", [0, 1]],
      ["redInterval", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VimWs25::AlarmExpression"],
      ["action", "VimWs25::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VimWs25::AlarmSetting", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["creationEventId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSetting",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toleranceRange", "SOAP::SOAPInt"],
      ["reportingFrequency", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VimWs25::AlarmExpression"],
      ["action", "VimWs25::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VimWs25::AlarmSetting", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmState,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["overallStatus", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["acknowledged", "SOAP::SOAPBoolean", [0, 1]],
      ["acknowledgedByUser", "SOAP::SOAPString", [0, 1]],
      ["acknowledgedTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAlarmState,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAlarmState",
    :schema_element => [
      ["AlarmState", ["VimWs25::AlarmState[]", XSD::QName.new("urn:vim25", "AlarmState")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterAction",
    :schema_element => [
      ["ClusterAction", ["VimWs25::ClusterAction[]", XSD::QName.new("urn:vim25", "ClusterAction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterActionHistory,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterActionHistory",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::ClusterAction"],
      ["time", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterActionHistory,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterActionHistory",
    :schema_element => [
      ["ClusterActionHistory", ["VimWs25::ClusterActionHistory[]", XSD::QName.new("urn:vim25", "ClusterActionHistory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterAffinityRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAffinityRuleSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterAntiAffinityRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAntiAffinityRuleSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterAttemptedVmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterAttemptedVmInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["task", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterAttemptedVmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterAttemptedVmInfo",
    :schema_element => [
      ["ClusterAttemptedVmInfo", ["VimWs25::ClusterAttemptedVmInfo[]", XSD::QName.new("urn:vim25", "ClusterAttemptedVmInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo"],
      ["dasVmConfig", "VimWs25::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VimWs25::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VimWs25::ClusterRuleInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["enableVmBehaviorOverrides", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmBehavior", "SOAP::SOAPString", [0, 1]],
      ["vmotionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsVmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsVmConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDrsVmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDrsVmConfigInfo",
    :schema_element => [
      ["ClusterDrsVmConfigInfo", ["VimWs25::ClusterDrsVmConfigInfo[]", XSD::QName.new("urn:vim25", "ClusterDrsVmConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterConfigInfoEx,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigInfoEx",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo"],
      ["dasVmConfig", "VimWs25::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VimWs25::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VimWs25::ClusterRuleInfo[]", [0, nil]],
      ["dpmConfigInfo", "VimWs25::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfig", "VimWs25::ClusterDpmHostConfigInfo[]", [0, nil]],
      ["group", "VimWs25::ClusterGroupInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDpmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDpmConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultDpmBehavior", "SOAP::SOAPString", [0, 1]],
      ["hostPowerActionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDpmHostConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDpmHostConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDpmHostConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDpmHostConfigInfo",
    :schema_element => [
      ["ClusterDpmHostConfigInfo", ["VimWs25::ClusterDpmHostConfigInfo[]", XSD::QName.new("urn:vim25", "ClusterDpmHostConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VimWs25::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VimWs25::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VimWs25::ClusterRuleSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasVmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterDasVmConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDasVmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDasVmConfigSpec",
    :schema_element => [
      ["ClusterDasVmConfigSpec", ["VimWs25::ClusterDasVmConfigSpec[]", XSD::QName.new("urn:vim25", "ClusterDasVmConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsVmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsVmConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterDrsVmConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDrsVmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDrsVmConfigSpec",
    :schema_element => [
      ["ClusterDrsVmConfigSpec", ["VimWs25::ClusterDrsVmConfigSpec[]", XSD::QName.new("urn:vim25", "ClusterDrsVmConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterRuleSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterRuleInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterRuleSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterRuleSpec",
    :schema_element => [
      ["ClusterRuleSpec", ["VimWs25::ClusterRuleSpec[]", XSD::QName.new("urn:vim25", "ClusterRuleSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterConfigSpecEx,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterConfigSpecEx",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]],
      ["dasConfig", "VimWs25::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VimWs25::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VimWs25::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VimWs25::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VimWs25::ClusterRuleSpec[]", [0, nil]],
      ["dpmConfig", "VimWs25::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfigSpec", "VimWs25::ClusterDpmHostConfigSpec[]", [0, nil]],
      ["groupSpec", "VimWs25::ClusterGroupSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDpmHostConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDpmHostConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterDpmHostConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDpmHostConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDpmHostConfigSpec",
    :schema_element => [
      ["ClusterDpmHostConfigSpec", ["VimWs25::ClusterDpmHostConfigSpec[]", XSD::QName.new("urn:vim25", "ClusterDpmHostConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterGroupSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterGroupSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::ClusterGroupInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterGroupSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterGroupSpec",
    :schema_element => [
      ["ClusterGroupSpec", ["VimWs25::ClusterGroupSpec[]", XSD::QName.new("urn:vim25", "ClusterGroupSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasAamHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAamHostInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostDasState", "VimWs25::ClusterDasAamNodeState[]", [0, nil]],
      ["primaryHosts", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasAamNodeState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAamNodeState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["configState", "SOAP::SOAPString"],
      ["runtimeState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDasAamNodeState,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDasAamNodeState",
    :schema_element => [
      ["ClusterDasAamNodeState", ["VimWs25::ClusterDasAamNodeState[]", XSD::QName.new("urn:vim25", "ClusterDasAamNodeState")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAdmissionControlInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAdmissionControlPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasAdvancedRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAdvancedRuntimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VimWs25::ClusterDasHostInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["hostMonitoring", "SOAP::SOAPString", [0, 1]],
      ["failoverLevel", "SOAP::SOAPInt", [0, 1]],
      ["admissionControlPolicy", "VimWs25::ClusterDasAdmissionControlPolicy", [0, 1]],
      ["admissionControlEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmSettings", "VimWs25::ClusterDasVmSettings", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numVcpus", "SOAP::SOAPInt"],
      ["cpuMHz", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["slots", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots",
    :schema_element => [
      ["ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots", ["VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", XSD::QName.new("urn:vim25", "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasFailoverLevelAdvancedRuntimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VimWs25::ClusterDasHostInfo", [0, 1]],
      ["slotInfo", "VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"],
      ["totalSlots", "SOAP::SOAPInt"],
      ["usedSlots", "SOAP::SOAPInt"],
      ["unreservedSlots", "SOAP::SOAPInt"],
      ["totalVms", "SOAP::SOAPInt"],
      ["totalHosts", "SOAP::SOAPInt"],
      ["totalGoodHosts", "SOAP::SOAPInt"],
      ["hostSlots", "VimWs25::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasHostInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasHostInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasHostRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasHostRecommendation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["drsRating", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasVmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["restartPriority", "SOAP::SOAPString", [0, 1]],
      ["powerOffOnIsolation", "SOAP::SOAPBoolean", [0, 1]],
      ["dasSettings", "VimWs25::ClusterDasVmSettings", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDasVmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDasVmConfigInfo",
    :schema_element => [
      ["ClusterDasVmConfigInfo", ["VimWs25::ClusterDasVmConfigInfo[]", XSD::QName.new("urn:vim25", "ClusterDasVmConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasVmSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmSettings",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["restartPriority", "SOAP::SOAPString", [0, 1]],
      ["isolationResponse", "SOAP::SOAPString", [0, 1]],
      ["vmToolsMonitoringSettings", "VimWs25::ClusterVmToolsMonitoringSettings", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsFaultsFaultsByVm,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsFaultsFaultsByVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDrsFaultsFaultsByVm,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDrsFaultsFaultsByVm",
    :schema_element => [
      ["ClusterDrsFaultsFaultsByVm", ["VimWs25::ClusterDrsFaultsFaultsByVm[]", XSD::QName.new("urn:vim25", "ClusterDrsFaultsFaultsByVm")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsFaults,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsFaults",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["faultsByVm", "VimWs25::ClusterDrsFaultsFaultsByVm[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDrsFaults,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDrsFaults",
    :schema_element => [
      ["ClusterDrsFaults", ["VimWs25::ClusterDrsFaults[]", XSD::QName.new("urn:vim25", "ClusterDrsFaults")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsMigration,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsMigration",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["cpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["memoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["source", "VimWs25::ManagedObjectReference"],
      ["sourceCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["sourceMemoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["destination", "VimWs25::ManagedObjectReference"],
      ["destinationCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["destinationMemoryLoad", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDrsMigration,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDrsMigration",
    :schema_element => [
      ["ClusterDrsMigration", ["VimWs25::ClusterDrsMigration[]", XSD::QName.new("urn:vim25", "ClusterDrsMigration")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDrsRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDrsRecommendation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["migrationList", "VimWs25::ClusterDrsMigration[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterDrsRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterDrsRecommendation",
    :schema_element => [
      ["ClusterDrsRecommendation", ["VimWs25::ClusterDrsRecommendation[]", XSD::QName.new("urn:vim25", "ClusterDrsRecommendation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverHostAdmissionControlInfoHostStatus",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["status", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus",
    :schema_element => [
      ["ClusterFailoverHostAdmissionControlInfoHostStatus", ["VimWs25::ClusterFailoverHostAdmissionControlInfoHostStatus[]", XSD::QName.new("urn:vim25", "ClusterFailoverHostAdmissionControlInfoHostStatus")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverHostAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverHostAdmissionControlInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostStatus", "VimWs25::ClusterFailoverHostAdmissionControlInfoHostStatus[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverHostAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverHostAdmissionControlPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failoverHosts", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverLevelAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverLevelAdmissionControlInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentFailoverLevel", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverLevelAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverLevelAdmissionControlPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failoverLevel", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverResourcesAdmissionControlInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverResourcesAdmissionControlInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentCpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["currentMemoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterFailoverResourcesAdmissionControlPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterFailoverResourcesAdmissionControlPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["memoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterGroupInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterGroupInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterGroupInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterGroupInfo",
    :schema_element => [
      ["ClusterGroupInfo", ["VimWs25::ClusterGroupInfo[]", XSD::QName.new("urn:vim25", "ClusterGroupInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterHostGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterHostGroup",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterHostPowerAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterHostPowerAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]],
      ["operationType", "SOAP::SOAPString"],
      ["powerConsumptionWatt", "SOAP::SOAPInt", [0, 1]],
      ["cpuCapacityMHz", "SOAP::SOAPInt", [0, 1]],
      ["memCapacityMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterHostRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterHostRecommendation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["rating", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterHostRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterHostRecommendation",
    :schema_element => [
      ["ClusterHostRecommendation", ["VimWs25::ClusterHostRecommendation[]", XSD::QName.new("urn:vim25", "ClusterHostRecommendation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterInitialPlacementAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterInitialPlacementAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]],
      ["targetHost", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterMigrationAction,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterMigrationAction",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]],
      ["drsMigration", "VimWs25::ClusterDrsMigration", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterNotAttemptedVmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterNotAttemptedVmInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterNotAttemptedVmInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterNotAttemptedVmInfo",
    :schema_element => [
      ["ClusterNotAttemptedVmInfo", ["VimWs25::ClusterNotAttemptedVmInfo[]", XSD::QName.new("urn:vim25", "ClusterNotAttemptedVmInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterPowerOnVmResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterPowerOnVmResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["attempted", "VimWs25::ClusterAttemptedVmInfo[]", [0, nil]],
      ["notAttempted", "VimWs25::ClusterNotAttemptedVmInfo[]", [0, nil]],
      ["recommendations", "VimWs25::ClusterRecommendation[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterRecommendation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["prerequisite", "SOAP::SOAPString[]", [0, nil]],
      ["action", "VimWs25::ClusterAction[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterRecommendation,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterRecommendation",
    :schema_element => [
      ["ClusterRecommendation", ["VimWs25::ClusterRecommendation[]", XSD::QName.new("urn:vim25", "ClusterRecommendation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterRuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterRuleInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfClusterRuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfClusterRuleInfo",
    :schema_element => [
      ["ClusterRuleInfo", ["VimWs25::ClusterRuleInfo[]", XSD::QName.new("urn:vim25", "ClusterRuleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterVmGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterVmGroup",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterVmHostRuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterVmHostRuleInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vmGroupName", "SOAP::SOAPString", [0, 1]],
      ["affineHostGroupName", "SOAP::SOAPString", [0, 1]],
      ["antiAffineHostGroupName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterVmToolsMonitoringSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterVmToolsMonitoringSettings",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["clusterSettings", "SOAP::SOAPBoolean", [0, 1]],
      ["failureInterval", "SOAP::SOAPInt", [0, 1]],
      ["minUpTime", "SOAP::SOAPInt", [0, 1]],
      ["maxFailures", "SOAP::SOAPInt", [0, 1]],
      ["maxFailureWindow", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VimWs25::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDVPortConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDVPortConfigSpec",
    :schema_element => [
      ["DVPortConfigSpec", ["VimWs25::DVPortConfigSpec[]", XSD::QName.new("urn:vim25", "DVPortConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VimWs25::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSTrafficShapingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSTrafficShapingPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["enabled", "VimWs25::BoolPolicy", [0, 1]],
      ["averageBandwidth", "VimWs25::LongPolicy", [0, 1]],
      ["peakBandwidth", "VimWs25::LongPolicy", [0, 1]],
      ["burstSize", "VimWs25::LongPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSVendorSpecificConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSVendorSpecificConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["keyValue", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortSetting",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blocked", "VimWs25::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VimWs25::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DVSVendorSpecificConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortStatus",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["linkUp", "SOAP::SOAPBoolean"],
      ["blocked", "SOAP::SOAPBoolean"],
      ["vlanIds", "VimWs25::NumericRange[]", [0, nil]],
      ["trunkingMode", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["linkPeer", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["statusDetail", "SOAP::SOAPString", [0, 1]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2InactiveReasonNetwork", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortState,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["runtimeInfo", "VimWs25::DVPortStatus", [0, 1]],
      ["stats", "VimWs25::DistributedVirtualSwitchPortStatistics"],
      ["vendorSpecificState", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualPort,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPort",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VimWs25::DVPortConfigInfo"],
      ["dvsUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["proxyHost", "VimWs25::ManagedObjectReference", [0, 1]],
      ["connectee", "VimWs25::DistributedVirtualSwitchPortConnectee", [0, 1]],
      ["conflict", "SOAP::SOAPBoolean"],
      ["conflictPortKey", "SOAP::SOAPString", [0, 1]],
      ["state", "VimWs25::DVPortState", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]],
      ["lastStatusChange", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualPort,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualPort",
    :schema_element => [
      ["DistributedVirtualPort", ["VimWs25::DistributedVirtualPort[]", XSD::QName.new("urn:vim25", "DistributedVirtualPort")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numPorts", "SOAP::SOAPInt", [0, 1]],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["policy", "VimWs25::DVPortgroupPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDVPortgroupConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDVPortgroupConfigSpec",
    :schema_element => [
      ["DVPortgroupConfigSpec", ["VimWs25::DVPortgroupConfigSpec[]", XSD::QName.new("urn:vim25", "DVPortgroupConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference", [0, 1]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["policy", "VimWs25::DVPortgroupPolicy"],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualPortgroupInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPortgroupInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupType", "SOAP::SOAPString"],
      ["uplinkPortgroup", "SOAP::SOAPBoolean"],
      ["portgroup", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualPortgroupInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualPortgroupInfo",
    :schema_element => [
      ["DistributedVirtualPortgroupInfo", ["VimWs25::DistributedVirtualPortgroupInfo[]", XSD::QName.new("urn:vim25", "DistributedVirtualPortgroupInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchInfo",
    :schema_element => [
      ["DistributedVirtualSwitchInfo", ["VimWs25::DistributedVirtualSwitchInfo[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSManagerDvsConfigTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSManagerDvsConfigTarget",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["distributedVirtualPortgroup", "VimWs25::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VimWs25::DistributedVirtualSwitchInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerCompatibilityResult,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerCompatibilityResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchManagerCompatibilityResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchManagerCompatibilityResult",
    :schema_element => [
      ["DistributedVirtualSwitchManagerCompatibilityResult", ["VimWs25::DistributedVirtualSwitchManagerCompatibilityResult[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchManagerCompatibilityResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostContainer,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostContainer",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostDvsFilterSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec",
    :schema_element => [
      ["DistributedVirtualSwitchManagerHostDvsFilterSpec", ["VimWs25::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchManagerHostDvsFilterSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostArrayFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostArrayFilter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostContainerFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostContainerFilter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["hostContainer", "VimWs25::DistributedVirtualSwitchManagerHostContainer"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerHostDvsMembershipFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerHostDvsMembershipFilter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchManagerDvsProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchManagerDvsProductSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["newSwitchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["distributedVirtualSwitch", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["backing", "VimWs25::DistributedVirtualSwitchHostMemberBacking", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchHostMemberConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchHostMemberConfigSpec",
    :schema_element => [
      ["DistributedVirtualSwitchHostMemberConfigSpec", ["VimWs25::DistributedVirtualSwitchHostMemberConfigSpec[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostMemberConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberPnicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberPnicSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pnicDevice", "SOAP::SOAPString"],
      ["uplinkPortKey", "SOAP::SOAPString", [0, 1]],
      ["uplinkPortgroupKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchHostMemberPnicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchHostMemberPnicSpec",
    :schema_element => [
      ["DistributedVirtualSwitchHostMemberPnicSpec", ["VimWs25::DistributedVirtualSwitchHostMemberPnicSpec[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostMemberPnicSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberBacking",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberPnicBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberPnicBacking",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pnicSpec", "VimWs25::DistributedVirtualSwitchHostMemberPnicSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt"],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["backing", "VimWs25::DistributedVirtualSwitchHostMemberBacking"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMember,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMember",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["config", "VimWs25::DistributedVirtualSwitchHostMemberConfigInfo"],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["uplinkPortKey", "SOAP::SOAPString[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchHostMember,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchHostMember",
    :schema_element => [
      ["DistributedVirtualSwitchHostMember", ["VimWs25::DistributedVirtualSwitchHostMember[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostMember")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostProductSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["productLineId", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchHostProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchHostProductSpec",
    :schema_element => [
      ["DistributedVirtualSwitchHostProductSpec", ["VimWs25::DistributedVirtualSwitchHostProductSpec[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchHostProductSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchKeyedOpaqueBlob",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["opaqueData", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob",
    :schema_element => [
      ["DistributedVirtualSwitchKeyedOpaqueBlob", ["VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchKeyedOpaqueBlob")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSNetworkResourcePoolAllocationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNetworkResourcePoolAllocationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VimWs25::SharesInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSNetworkResourcePoolConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNetworkResourcePoolConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["allocationInfo", "VimWs25::DVSNetworkResourcePoolAllocationInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDVSNetworkResourcePoolConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDVSNetworkResourcePoolConfigSpec",
    :schema_element => [
      ["DVSNetworkResourcePoolConfigSpec", ["VimWs25::DVSNetworkResourcePoolConfigSpec[]", XSD::QName.new("urn:vim25", "DVSNetworkResourcePoolConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSNetworkResourcePool,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSNetworkResourcePool",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["allocationInfo", "VimWs25::DVSNetworkResourcePoolAllocationInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDVSNetworkResourcePool,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDVSNetworkResourcePool",
    :schema_element => [
      ["DVSNetworkResourcePool", ["VimWs25::DVSNetworkResourcePool[]", XSD::QName.new("urn:vim25", "DVSNetworkResourcePool")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortConnectee,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortConnectee",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["connectedEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["nicKey", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["addressHint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortConnection,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortConnection",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortCriteria,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortCriteria",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["connected", "SOAP::SOAPBoolean", [0, 1]],
      ["active", "SOAP::SOAPBoolean", [0, 1]],
      ["uplinkPort", "SOAP::SOAPBoolean", [0, 1]],
      ["scope", "VimWs25::ManagedObjectReference", [0, 1]],
      ["portgroupKey", "SOAP::SOAPString[]", [0, nil]],
      ["inside", "SOAP::SOAPBoolean", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortStatistics,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortStatistics",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["packetsInMulticast", "SOAP::SOAPLong"],
      ["packetsOutMulticast", "SOAP::SOAPLong"],
      ["bytesInMulticast", "SOAP::SOAPLong"],
      ["bytesOutMulticast", "SOAP::SOAPLong"],
      ["packetsInUnicast", "SOAP::SOAPLong"],
      ["packetsOutUnicast", "SOAP::SOAPLong"],
      ["bytesInUnicast", "SOAP::SOAPLong"],
      ["bytesOutUnicast", "SOAP::SOAPLong"],
      ["packetsInBroadcast", "SOAP::SOAPLong"],
      ["packetsOutBroadcast", "SOAP::SOAPLong"],
      ["bytesInBroadcast", "SOAP::SOAPLong"],
      ["bytesOutBroadcast", "SOAP::SOAPLong"],
      ["packetsInDropped", "SOAP::SOAPLong"],
      ["packetsOutDropped", "SOAP::SOAPLong"],
      ["packetsInException", "SOAP::SOAPLong"],
      ["packetsOutException", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchProductSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["build", "SOAP::SOAPString", [0, 1]],
      ["forwardingClass", "SOAP::SOAPString", [0, 1]],
      ["bundleId", "SOAP::SOAPString", [0, 1]],
      ["bundleUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDistributedVirtualSwitchProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDistributedVirtualSwitchProductSpec",
    :schema_element => [
      ["DistributedVirtualSwitchProductSpec", ["VimWs25::DistributedVirtualSwitchProductSpec[]", XSD::QName.new("urn:vim25", "DistributedVirtualSwitchProductSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSFeatureCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSFeatureCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting"],
      ["host", "VimWs25::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VimWs25::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["pvlanConfig", "VimWs25::VMwareDVSPvlanMapEntry[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt"],
      ["linkDiscoveryProtocolConfig", "VimWs25::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VimWs25::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VimWs25::DVPortSetting", [0, 1]],
      ["host", "VimWs25::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VimWs25::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VimWs25::DVSContactInfo", [0, 1]],
      ["pvlanConfigSpec", "VimWs25::VMwareDVSPvlanConfigSpec[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VimWs25::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareUplinkPortOrderPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareUplinkPortOrderPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["activeUplinkPort", "SOAP::SOAPString[]", [0, nil]],
      ["standbyUplinkPort", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSFailureCriteria,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSFailureCriteria",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["checkSpeed", "VimWs25::StringPolicy", [0, 1]],
      ["speed", "VimWs25::IntPolicy", [0, 1]],
      ["checkDuplex", "VimWs25::BoolPolicy", [0, 1]],
      ["fullDuplex", "VimWs25::BoolPolicy", [0, 1]],
      ["checkErrorPercent", "VimWs25::BoolPolicy", [0, 1]],
      ["percentage", "VimWs25::IntPolicy", [0, 1]],
      ["checkBeacon", "VimWs25::BoolPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmwareUplinkPortTeamingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareUplinkPortTeamingPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::StringPolicy", [0, 1]],
      ["reversePolicy", "VimWs25::BoolPolicy", [0, 1]],
      ["notifySwitches", "VimWs25::BoolPolicy", [0, 1]],
      ["rollingOrder", "VimWs25::BoolPolicy", [0, 1]],
      ["failureCriteria", "VimWs25::DVSFailureCriteria", [0, 1]],
      ["uplinkPortOrder", "VimWs25::VMwareUplinkPortOrderPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchVlanSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchVlanSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchPvlanSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchPvlanSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["pvlanId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchVlanIdSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchVlanIdSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchTrunkVlanSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchTrunkVlanSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "VimWs25::NumericRange[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVSSecurityPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "DVSSecurityPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["allowPromiscuous", "VimWs25::BoolPolicy", [0, 1]],
      ["macChanges", "VimWs25::BoolPolicy", [0, 1]],
      ["forgedTransmits", "VimWs25::BoolPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSPortSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPortSetting",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blocked", "VimWs25::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VimWs25::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VimWs25::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VimWs25::DVSVendorSpecificConfig", [0, 1]],
      ["vlan", "VimWs25::VmwareDistributedVirtualSwitchVlanSpec", [0, 1]],
      ["qosTag", "VimWs25::IntPolicy", [0, 1]],
      ["uplinkTeamingPolicy", "VimWs25::VmwareUplinkPortTeamingPolicy", [0, 1]],
      ["securityPolicy", "VimWs25::DVSSecurityPolicy", [0, 1]],
      ["txUplink", "VimWs25::BoolPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSPortgroupPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPortgroupPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"],
      ["vlanOverrideAllowed", "SOAP::SOAPBoolean"],
      ["uplinkTeamingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["securityPolicyOverrideAllowed", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSPvlanConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPvlanConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pvlanEntry", "VimWs25::VMwareDVSPvlanMapEntry"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVMwareDVSPvlanConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVMwareDVSPvlanConfigSpec",
    :schema_element => [
      ["VMwareDVSPvlanConfigSpec", ["VimWs25::VMwareDVSPvlanConfigSpec[]", XSD::QName.new("urn:vim25", "VMwareDVSPvlanConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMwareDVSPvlanMapEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "VMwareDVSPvlanMapEntry",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["primaryVlanId", "SOAP::SOAPInt"],
      ["secondaryVlanId", "SOAP::SOAPInt"],
      ["pvlanType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVMwareDVSPvlanMapEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVMwareDVSPvlanMapEntry",
    :schema_element => [
      ["VMwareDVSPvlanMapEntry", ["VimWs25::VMwareDVSPvlanMapEntry[]", XSD::QName.new("urn:vim25", "VMwareDVSPvlanMapEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Event,
    :schema_ns => "urn:vim25",
    :schema_type => "Event",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfEvent",
    :schema_element => [
      ["Event", ["VimWs25::Event[]", XSD::QName.new("urn:vim25", "Event")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventEx,
    :schema_ns => "urn:vim25",
    :schema_type => "EventEx",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["eventTypeId", "SOAP::SOAPString"],
      ["severity", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["arguments", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["objectId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralHostInfoEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralHostInfoEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralHostWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralHostWarningEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralHostErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralHostErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralVmInfoEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralVmInfoEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralVmWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralVmWarningEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralVmErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralVmErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GeneralUserEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GeneralUserEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedEntityEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendedEventPair,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedEventPair",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfExtendedEventPair,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfExtendedEventPair",
    :schema_element => [
      ["ExtendedEventPair", ["VimWs25::ExtendedEventPair[]", XSD::QName.new("urn:vim25", "ExtendedEventPair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString"],
      ["managedObject", "VimWs25::ManagedObjectReference"],
      ["data", "VimWs25::ExtendedEventPair[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HealthStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HealthStatusChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["componentId", "SOAP::SOAPString"],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"],
      ["componentName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInventoryUnreadableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInventoryUnreadableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::FolderEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterRenamedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ServerStartedSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ServerStartedSessionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserLoginSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UserLoginSessionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserLogoutSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UserLogoutSessionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BadUsernameSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "BadUsernameSessionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyAuthenticatedSessionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyAuthenticatedSessionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoAccessUserEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NoAccessUserEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SessionTerminatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "SessionTerminatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sessionId", "SOAP::SOAPString"],
      ["terminatedUsername", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GlobalMessageChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GlobalMessageChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InfoUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InfoUpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WarningUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "WarningUpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ErrorUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ErrorUpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UserUpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDisconnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSyncFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSyncFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectionLostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectionLostEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostReconnectionFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostReconnectionFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedNoConnectionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNoConnectionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedBadUsernameEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedBadUsernameEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedBadVersionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedBadVersionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedAlreadyManagedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedAlreadyManagedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["serverName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedNoLicenseEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNoLicenseEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedNetworkErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNetworkErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedCcagentUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedCcagentUpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedBadCcagentEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedBadCcagentEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedAccountFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedAccountFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedNoAccessEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNoAccessEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostShutdownEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostShutdownEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedNotFoundEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedNotFoundEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCnxFailedTimeoutEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCnxFailedTimeoutEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUpgradeFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnteringMaintenanceModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteringMaintenanceModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnteredMaintenanceModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteredMaintenanceModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitMaintenanceModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitMaintenanceModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CanceledHostOperationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CanceledHostOperationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TimedOutHostOperationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TimedOutHostOperationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasDisabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasEnablingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasEnablingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasDisablingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasDisablingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasOkEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasOkEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VcAgentUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUpgradedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VcAgentUninstalledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUninstalledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VcAgentUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUpgradeFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VcAgentUninstallFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VcAgentUninstallFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAddedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAddFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAddFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldIP", "SOAP::SOAPString"],
      ["newIP", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnteringStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteringStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsEnteringStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsEnteringStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnteredStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "EnteredStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsEnteredStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsEnteredStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitingStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitingStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsExitingStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsExitingStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitedStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitedStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsExitedStandbyModeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsExitedStandbyModeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitStandbyModeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ExitStandbyModeFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsExitStandbyModeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsExitStandbyModeFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatedAgentBeingRestartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UpdatedAgentBeingRestartedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AccountCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AccountCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AccountRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AccountRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["account", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserPasswordChanged,
    :schema_ns => "urn:vim25",
    :schema_type => "UserPasswordChanged",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AccountUpdatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AccountUpdatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserAssignedToGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "UserAssignedToGroup",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserUnassignedFromGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "UserUnassignedFromGroup",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastorePrincipalConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastorePrincipalConfigured",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipal", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMFSDatastoreCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMFSDatastoreCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NASDatastoreCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NASDatastoreCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalDatastoreCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalDatastoreCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMFSDatastoreExtendedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMFSDatastoreExtendedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMFSDatastoreExpandedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMFSDatastoreExpandedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreRemovedOnHostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreRemovedOnHostEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreRenamedOnHostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreRenamedOnHostEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DuplicateIpDetectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DuplicateIpDetectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["duplicateIP", "SOAP::SOAPString"],
      ["macAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreDiscoveredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreDiscoveredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsResourceConfigureFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsResourceConfigureFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsResourceConfigureSyncedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsResourceConfigureSyncedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostGetShortNameFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostGetShortNameFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostShortNameToIpFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostShortNameToIpFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpToShortNameFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpToShortNameFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPrimaryAgentNotShortNameEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPrimaryAgentNotShortNameEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["primaryAgent", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNotInClusterEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNotInClusterEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIsolationIpPingFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIsolationIpPingFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolationIp", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpInconsistentEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpInconsistentEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["ipAddress2", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUserWorldSwapNotEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUserWorldSwapNotEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNonCompliantEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNonCompliantEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCompliantEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCompliantEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostComplianceCheckedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostComplianceCheckedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterComplianceCheckedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterComplianceCheckedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileAssociatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileAssociatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileDissociatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDissociatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigAppliedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigAppliedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileReferenceHostChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileReferenceHostChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"],
      ["referenceHost", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProfileAppliedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileAppliedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VimWs25::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostShortNameInconsistentEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostShortNameInconsistentEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"],
      ["shortName2", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNoRedundantManagementNetworkEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNoRedundantManagementNetworkEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNoAvailableNetworksEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNoAvailableNetworksEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostExtraNetworksEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostExtraNetworksEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNoHAEnabledPortGroupsEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNoHAEnabledPortGroupsEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMissingNetworksEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMissingNetworksEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VnicPortArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "VnicPortArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vnic", "SOAP::SOAPString"],
      ["port", "VimWs25::DistributedVirtualSwitchPortConnection"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVnicPortArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVnicPortArgument",
    :schema_element => [
      ["VnicPortArgument", ["VimWs25::VnicPortArgument[]", XSD::QName.new("urn:vim25", "VnicPortArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVnicConnectedToCustomizedDVPortEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVnicConnectedToCustomizedDVPortEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["vnic", "VimWs25::VnicPortArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GhostDvsProxySwitchDetectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GhostDvsProxySwitchDetectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GhostDvsProxySwitchRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "GhostDvsProxySwitchRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPoweredOffEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPoweredOffEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPoweredOnEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPoweredOnEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSuspendedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSuspendedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmStartingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmStoppingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStoppingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSuspendingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSuspendingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmResumingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResumingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDisconnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRemoteConsoleConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRemoteConsoleConnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRemoteConsoleDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRemoteConsoleDisconnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDiscoveredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiscoveredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmOrphanedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmOrphanedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VimWs25::VirtualMachineConfigSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmStartRecordingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartRecordingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmEndRecordingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEndRecordingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmStartReplayingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartReplayingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmEndReplayingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEndReplayingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRegisteredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRegisteredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmAutoRenameEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAutoRenameEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingHotMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingHotMigratedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmResettingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResettingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmStaticMacConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStaticMacConflictEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMacConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMacConflictEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingDeployedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingDeployedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VimWs25::VmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDeployFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDeployFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destDatastore", "VimWs25::EntityEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDeployedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDeployedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VimWs25::VmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMacChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMacChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["oldMac", "SOAP::SOAPString"],
      ["newMac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMacAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMacAssignedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUuidConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUuidConflictEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmInstanceUuidConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmInstanceUuidConflictEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VimWs25::VmEventArgument"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingMigratedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedMigrateEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedMigrateEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMigratedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUnsupportedStartingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUnsupportedStartingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsVmMigratedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsVmMigratedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsVmPoweredOnEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsVmPoweredOnEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsRuleViolationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRuleViolationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsRuleComplianceEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRuleComplianceEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRelocateSpecEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelocateSpecEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingRelocatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingRelocatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRelocatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelocatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRelocateFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelocateFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmEmigratingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEmigratingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmCloneEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmCloneEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingClonedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingClonedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VimWs25::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmBeingClonedNoFolderEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmBeingClonedNoFolderEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmCloneFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmCloneFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VimWs25::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VimWs25::HostEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmClonedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmClonedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceVm", "VimWs25::VmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmResourceReallocatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResourceReallocatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRenamedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDateRolledBackEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDateRolledBackEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmNoNetworkAccessEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNoNetworkAccessEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDiskFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["disk", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToPowerOnEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToPowerOnEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToPowerOffEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToPowerOffEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToSuspendEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToSuspendEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToResetEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToResetEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToShutdownGuestEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToShutdownGuestEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToRebootGuestEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToRebootGuestEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedToStandbyGuestEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedToStandbyGuestEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmGuestShutdownEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmGuestShutdownEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmGuestRebootEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmGuestRebootEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmGuestStandbyEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmGuestStandbyEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUpgradingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUpgradingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUpgradeCompleteEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUpgradeCompleteEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUpgradeFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRestartedOnAlternateHostEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRestartedOnAlternateHostEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VimWs25::VirtualMachineConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMessageEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMessageEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMessageWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMessageWarningEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMessageErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMessageErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigMissingEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigMissingEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPowerOffOnIsolationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPowerOffOnIsolationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmShutdownOnIsolationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmShutdownOnIsolationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VimWs25::HostEventArgument"],
      ["shutdownResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailoverFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailoverFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDasBeingResetEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasBeingResetEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDasResetFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasResetFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMaxRestartCountReached,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMaxRestartCountReached",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMaxFTRestartCountReached,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMaxFTRestartCountReached",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDasBeingResetWithScreenshotEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasBeingResetWithScreenshotEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["screenshotFilePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughResourcesToStartVmEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughResourcesToStartVmEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUuidAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUuidAssignedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmInstanceUuidAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmInstanceUuidAssignedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmUuidChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmUuidChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldUuid", "SOAP::SOAPString"],
      ["newUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmInstanceUuidChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmInstanceUuidChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldInstanceUuid", "SOAP::SOAPString"],
      ["newInstanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmWwnConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnConflictEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVms", "VimWs25::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VimWs25::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmAcquiredMksTicketEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAcquiredMksTicketEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmAcquiredTicketEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAcquiredTicketEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostWwnConflictEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostWwnConflictEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["conflictedVms", "VimWs25::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VimWs25::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmWwnAssignedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnAssignedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["nodeWwns", "SOAP::SOAPLong[]", [1, nil]],
      ["portWwns", "SOAP::SOAPLong[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmWwnChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSecondaryAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryAddedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceTurnedOffEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceTurnedOffEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceStateChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceStateChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldState", "SOAP::SOAPString"],
      ["newState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSecondaryDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryDisabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSecondaryDisabledBySystemEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryDisabledBySystemEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSecondaryEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmStartingSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmStartingSecondaryEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSecondaryStartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSecondaryStartedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedUpdatingSecondaryConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedUpdatingSecondaryConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedStartingSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedStartingSecondaryEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmTimedoutStartingSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmTimedoutStartingSecondaryEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["timeout", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmNoCompatibleHostForSecondaryEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNoCompatibleHostForSecondaryEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPrimaryFailoverEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPrimaryFailoverEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceVmTerminatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceVmTerminatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostWwnChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostWwnChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAdminDisableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAdminDisableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAdminEnableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAdminEnableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostEnableAdminFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostEnableAdminFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["permissions", "VimWs25::Permission[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedRelayoutOnVmfs2DatastoreEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedRelayoutOnVmfs2DatastoreEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedRelayoutEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedRelayoutEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRelayoutSuccessfulEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelayoutSuccessfulEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmRelayoutUpToDateEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmRelayoutUpToDateEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPoweringOnWithCustomizedDVPortEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPoweringOnWithCustomizedDVPortEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["vnic", "VimWs25::VnicPortArgument[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDasUpdateErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasUpdateErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoMaintenanceModeDrsRecommendationForVM,
    :schema_ns => "urn:vim25",
    :schema_type => "NoMaintenanceModeDrsRecommendationForVM",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDasUpdateOkEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasUpdateOkEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskStartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskStartedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskCompletedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskEmailCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEmailCompletedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskEmailFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEmailFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ScheduledTaskEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmStatusChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["source", "VimWs25::ManagedEntityEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["from", "SOAP::SOAPString"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmActionTriggeredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmActionTriggeredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["source", "VimWs25::ManagedEntityEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmEmailCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEmailCompletedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmEmailFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEmailFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmSnmpCompletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSnmpCompletedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmSnmpFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmSnmpFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmScriptCompleteEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmScriptCompleteEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmScriptFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmScriptFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VimWs25::AlarmEventArgument"],
      ["entity", "VimWs25::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldDefEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldDefAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefAddedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldDefRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldDefRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldDefRenamedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomFieldValueChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomFieldValueChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthorizationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthorizationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PermissionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PermissionAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionAddedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VimWs25::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PermissionUpdatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionUpdatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VimWs25::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PermissionRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RoleEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RoleAddedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleAddedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RoleUpdatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleUpdatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RoleRemovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleRemovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VimWs25::RoleEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreDestroyedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreRenamedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreCapacityIncreasedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreCapacityIncreasedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["oldCapacity", "SOAP::SOAPLong"],
      ["newCapacity", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreDuplicatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreDuplicatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreFileEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreFileCopiedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileCopiedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VimWs25::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreFileMovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileMovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VimWs25::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreFileDeletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreFileDeletedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonVIWorkloadDetectedOnDatastoreEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NonVIWorkloadDetectedOnDatastoreEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreIORMReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreIORMReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VimWs25::TaskInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskTimeoutEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskTimeoutEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VimWs25::TaskInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ServerLicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ServerLicenseExpiredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["product", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLicenseExpiredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionLicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionLicenseExpiredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoLicenseEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NoLicenseEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VimWs25::LicenseFeatureInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseServerUnavailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerUnavailableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseServerAvailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerAvailableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseExpiredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseExpiredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VimWs25::LicenseFeatureInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidEditionEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidEditionEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInventoryFullEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInventoryFullEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseRestrictedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseRestrictedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncorrectHostInformationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "IncorrectHostInformationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnlicensedVirtualMachinesEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UnlicensedVirtualMachinesEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["unlicensed", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnlicensedVirtualMachinesFoundEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "UnlicensedVirtualMachinesFoundEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AllVirtualMachinesLicensedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AllVirtualMachinesLicensedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseNonComplianceEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseNonComplianceEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationWarningEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationHostWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationHostWarningEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationHostErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationHostErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationResourceWarningEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationResourceWarningEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstPool", "VimWs25::ResourcePoolEventArgument"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationResourceErrorEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationResourceErrorEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"],
      ["dstPool", "VimWs25::ResourcePoolEventArgument"],
      ["dstHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasDisabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasAdmissionControlDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAdmissionControlDisabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasAdmissionControlEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAdmissionControlEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasHostFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasHostFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["failedHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasHostIsolatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasHostIsolatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolatedHost", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasClusterIsolatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasClusterIsolatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasAgentUnavailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAgentUnavailableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasAgentFoundEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DasAgentFoundEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientFailoverResourcesEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientFailoverResourcesEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FailoverLevelRestored,
    :schema_ns => "urn:vim25",
    :schema_type => "FailoverLevelRestored",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterOvercommittedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterOvercommittedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostOvercommittedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostOvercommittedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterStatusChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostStatusChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStatusChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::FolderEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDestroyedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["behavior", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsDisabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsDisabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMonitoringStateChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMonitoringStateChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmHealthMonitoringStateChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmHealthMonitoringStateChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"],
      ["parent", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolDestroyedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolMovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolMovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"],
      ["oldParent", "VimWs25::ResourcePoolEventArgument"],
      ["newParent", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceViolatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceViolatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmResourcePoolMovedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmResourcePoolMovedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldParent", "VimWs25::ResourcePoolEventArgument"],
      ["newParent", "VimWs25::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TemplateUpgradeEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateUpgradeEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TemplateBeingUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateBeingUpgradedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TemplateUpgradeFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateUpgradeFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TemplateUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateUpgradedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationStartedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationStartedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSucceeded,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSucceeded",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationUnknownFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownFailure",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSysprepFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprepFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]],
      ["sysprepVersion", "SOAP::SOAPString"],
      ["systemVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationLinuxIdentityFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLinuxIdentityFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationNetworkSetupFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationNetworkSetupFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LockerMisconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LockerMisconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VimWs25::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LockerReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LockerReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldDatastore", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["newDatastore", "VimWs25::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDatastoresConfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDatastoresConfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AdminPasswordNotChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "AdminPasswordNotChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalTSMEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalTSMEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoteTSMEnabledEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoteTSMEnabledEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VimAccountPasswordChangedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VimAccountPasswordChangedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IScsiBootFailureEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "IScsiBootFailureEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::FolderEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsRenamedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VimWs25::DVSConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsUpgradeAvailableEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradeAvailableEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsUpgradeInProgressEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradeInProgressEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsUpgradeRejectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradeRejectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsUpgradedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsUpgradedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsHostJoinedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostJoinedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostJoined", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsHostLeftEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostLeftEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostLeft", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsOutOfSyncHostArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsOutOfSyncHostArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["outOfSyncHost", "VimWs25::HostEventArgument"],
      ["configParamters", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDvsOutOfSyncHostArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDvsOutOfSyncHostArgument",
    :schema_element => [
      ["DvsOutOfSyncHostArgument", ["VimWs25::DvsOutOfSyncHostArgument[]", XSD::QName.new("urn:vim25", "DvsOutOfSyncHostArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OutOfSyncDvsHost,
    :schema_ns => "urn:vim25",
    :schema_type => "OutOfSyncDvsHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VimWs25::DvsOutOfSyncHostArgument[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsHostWentOutOfSyncEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostWentOutOfSyncEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VimWs25::DvsOutOfSyncHostArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsHostBackInSyncEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostBackInSyncEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostBackInSync", "VimWs25::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsHostStatusUpdated,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostStatusUpdated",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostMember", "VimWs25::HostEventArgument"],
      ["oldStatus", "SOAP::SOAPString", [0, 1]],
      ["newStatus", "SOAP::SOAPString", [0, 1]],
      ["oldStatusDetail", "SOAP::SOAPString", [0, 1]],
      ["newStatusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortDeletedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortDeletedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortConnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortConnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VimWs25::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortDisconnectedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortDisconnectedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VimWs25::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortLinkUpEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortLinkUpEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortLinkDownEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortLinkDownEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortJoinPortgroupEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortJoinPortgroupEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortLeavePortgroupEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortLeavePortgroupEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortBlockedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortBlockedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortUnblockedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortUnblockedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortEnteredPassthruEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortEnteredPassthruEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsPortExitedPassthruEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsPortExitedPassthruEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsDestroyedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsMergedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsMergedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sourceDvs", "VimWs25::DvsEventArgument"],
      ["destinationDvs", "VimWs25::DvsEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupCreatedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupCreatedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupRenamedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupRenamedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupReconfiguredEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupReconfiguredEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VimWs25::DVPortgroupConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortgroupDestroyedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortgroupDestroyedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsInvocationFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsInvocationFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsRecoveredFromFailureEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRecoveredFromFailureEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmReloadFromPathEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmReloadFromPathEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmReloadFromPathFailedEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "VmReloadFromPathFailedEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VimWs25::ComputeResourceEventArgument", [0, 1]],
      ["host", "VimWs25::HostEventArgument", [0, 1]],
      ["vm", "VimWs25::VmEventArgument", [0, 1]],
      ["ds", "VimWs25::DatastoreEventArgument", [0, 1]],
      ["net", "VimWs25::NetworkEventArgument", [0, 1]],
      ["dvs", "VimWs25::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "EventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RoleEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "RoleEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EntityEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "EntityEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ManagedEntityEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedEntityEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FolderEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "FolderEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["folder", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeResourceEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ComputeResourceEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["computeResource", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourcePoolEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourcePoolEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourcePool", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "HostEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostEventArgument",
    :schema_element => [
      ["HostEventArgument", ["VimWs25::HostEventArgument[]", XSD::QName.new("urn:vim25", "HostEventArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "VmEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVmEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVmEventArgument",
    :schema_element => [
      ["VmEventArgument", ["VimWs25::VmEventArgument[]", XSD::QName.new("urn:vim25", "VmEventArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlarmEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "AlarmEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["alarm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profile", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsEventArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsEventArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventArgDesc,
    :schema_ns => "urn:vim25",
    :schema_type => "EventArgDesc",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["description", "VimWs25::ElementDescription", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfEventArgDesc,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfEventArgDesc",
    :schema_element => [
      ["EventArgDesc", ["VimWs25::EventArgDesc[]", XSD::QName.new("urn:vim25", "EventArgDesc")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventDescriptionEventDetail,
    :schema_ns => "urn:vim25",
    :schema_type => "EventDescriptionEventDetail",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString"],
      ["formatOnDatacenter", "SOAP::SOAPString"],
      ["formatOnComputeResource", "SOAP::SOAPString"],
      ["formatOnHost", "SOAP::SOAPString"],
      ["formatOnVm", "SOAP::SOAPString"],
      ["fullFormat", "SOAP::SOAPString"],
      ["longDescription", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfEventDescriptionEventDetail,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfEventDescriptionEventDetail",
    :schema_element => [
      ["EventDescriptionEventDetail", ["VimWs25::EventDescriptionEventDetail[]", XSD::QName.new("urn:vim25", "EventDescriptionEventDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "EventDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["category", "VimWs25::ElementDescription[]", [1, nil]],
      ["eventInfo", "VimWs25::EventDescriptionEventDetail[]", [1, nil]],
      ["enumeratedTypes", "VimWs25::EnumDescription[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventFilterSpecByEntity,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecByEntity",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["recursion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventFilterSpecByTime,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecByTime",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventFilterSpecByUsername,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecByUsername",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EventFilterSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::EventFilterSpecByEntity", [0, 1]],
      ["time", "VimWs25::EventFilterSpecByTime", [0, 1]],
      ["userName", "VimWs25::EventFilterSpecByUsername", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt", [0, 1]],
      ["alarm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VimWs25::ManagedObjectReference", [0, 1]],
      ["disableFullMessage", "SOAP::SOAPBoolean", [0, 1]],
      ["category", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["eventTypeId", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ActiveDirectoryFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ActiveDirectoryFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AdminDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "AdminDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AdminNotDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "AdminNotDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AffinityConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "AffinityConfigured",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["configuredAffinity", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AgentInstallFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "AgentInstallFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["statusCode", "SOAP::SOAPInt", [0, 1]],
      ["installerOutput", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyBeingManaged,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyBeingManaged",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyConnected,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyConnected",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyExists,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyExists",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyUpgraded,
    :schema_ns => "urn:vim25",
    :schema_type => "AlreadyUpgraded",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplicationQuiesceFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplicationQuiesceFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthMinimumAdminPermission,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthMinimumAdminPermission",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BlockedByFirewall,
    :schema_ns => "urn:vim25",
    :schema_type => "BlockedByFirewall",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessFile,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessFile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessLocalSource,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessLocalSource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessNetwork,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessNetwork",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmComponent,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmComponent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAccessVmDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmAsStandalone,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAddHostWithFTVmAsStandalone",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmToDifferentCluster,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAddHostWithFTVmToDifferentCluster",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmToNonHACluster,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotAddHostWithFTVmToNonHACluster",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotChangeDrsBehaviorForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotChangeDrsBehaviorForFtSecondary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotChangeHaSettingsForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotChangeHaSettingsForFtSecondary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotCreateFile,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotCreateFile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDecryptPasswords,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDecryptPasswords",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDeleteFile,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDeleteFile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDisableDrsOnClustersWithVApps,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDisableDrsOnClustersWithVApps",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDisableSnapshot,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDisableSnapshot",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDisconnectHostWithFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotDisconnectHostWithFaultToleranceVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotModifyConfigCpuRequirements,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotModifyConfigCpuRequirements",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotMoveFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotMoveFaultToleranceVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["moveType", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotMoveHostWithFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotMoveHostWithFaultToleranceVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClockSkew,
    :schema_ns => "urn:vim25",
    :schema_type => "ClockSkew",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneFromSnapshotNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "CloneFromSnapshotNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConcurrentAccess,
    :schema_ns => "urn:vim25",
    :schema_type => "ConcurrentAccess",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConnectedIso,
    :schema_ns => "urn:vim25",
    :schema_type => "ConnectedIso",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["cdrom", "VimWs25::VirtualCdrom"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuCompatibilityUnknown,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuCompatibilityUnknown",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuHotPlugNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuIncompatible",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuIncompatible1ECX,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuIncompatible1ECX",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["sse3", "SOAP::SOAPBoolean"],
      ["ssse3", "SOAP::SOAPBoolean"],
      ["sse41", "SOAP::SOAPBoolean"],
      ["sse42", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuIncompatible81EDX,
    :schema_ns => "urn:vim25",
    :schema_type => "CpuIncompatible81EDX",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["nx", "SOAP::SOAPBoolean"],
      ["ffxsr", "SOAP::SOAPBoolean"],
      ["rdtscp", "SOAP::SOAPBoolean"],
      ["lm", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationFault,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationPending,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationPending",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DasConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["output", "SOAP::SOAPString", [0, 1]],
      ["event", "VimWs25::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatabaseError,
    :schema_ns => "urn:vim25",
    :schema_type => "DatabaseError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterMismatchArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterMismatchArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["inputDatacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDatacenterMismatchArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDatacenterMismatchArgument",
    :schema_element => [
      ["DatacenterMismatchArgument", ["VimWs25::DatacenterMismatchArgument[]", XSD::QName.new("urn:vim25", "DatacenterMismatchArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterMismatch,
    :schema_ns => "urn:vim25",
    :schema_type => "DatacenterMismatch",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidArgument", "VimWs25::DatacenterMismatchArgument[]", [1, nil]],
      ["expectedDatacenter", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreNotWritableOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreNotWritableOnHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestinationSwitchFull,
    :schema_ns => "urn:vim25",
    :schema_type => "DestinationSwitchFull",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceBackingNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceBackingNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceControllerNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceControllerNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["controller", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceHotPlugNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceUnsupportedForVmPlatform,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceUnsupportedForVmPlatform",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceUnsupportedForVmVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceUnsupportedForVmVersion",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["currentVersion", "SOAP::SOAPString"],
      ["expectedVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableAdminNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DisableAdminNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisallowedDiskModeChange,
    :schema_ns => "urn:vim25",
    :schema_type => "DisallowedDiskModeChange",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisallowedMigrationDeviceAttached,
    :schema_ns => "urn:vim25",
    :schema_type => "DisallowedMigrationDeviceAttached",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisallowedOperationOnFailoverHost,
    :schema_ns => "urn:vim25",
    :schema_type => "DisallowedOperationOnFailoverHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiskMoveTypeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskMoveTypeNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "DiskNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DomainNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "DomainNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]],
      ["domainName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsDisabledOnVm,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsDisabledOnVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsVmotionIncompatibleFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsVmotionIncompatibleFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DuplicateName,
    :schema_ns => "urn:vim25",
    :schema_type => "DuplicateName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["object", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsNotAuthorized,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsNotAuthorized",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sessionExtensionKey", "SOAP::SOAPString", [0, 1]],
      ["dvsExtensionKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsOperationBulkFaultFaultOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsOperationBulkFaultFaultOnHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDvsOperationBulkFaultFaultOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDvsOperationBulkFaultFaultOnHost",
    :schema_element => [
      ["DvsOperationBulkFaultFaultOnHost", ["VimWs25::DvsOperationBulkFaultFaultOnHost[]", XSD::QName.new("urn:vim25", "DvsOperationBulkFaultFaultOnHost")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsOperationBulkFault,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsOperationBulkFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostFault", "VimWs25::DvsOperationBulkFaultFaultOnHost[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsScopeViolated,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsScopeViolated",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["scope", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUFeaturesForMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUFeaturesForMode",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUModel,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUModel",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUModelForMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUModelForMode",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUVendor,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUVendor",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["clusterCPUVendor", "SOAP::SOAPString"],
      ["hostCPUVendor", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUVendorUnknown,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedCPUVendorUnknown",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostDisconnected,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedHostDisconnected",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostSoftware,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedHostSoftware",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostSoftwareForMode,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedHostSoftwareForMode",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedVmActive,
    :schema_ns => "urn:vim25",
    :schema_type => "EVCAdmissionFailedVmActive",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EightHostLimitViolated,
    :schema_ns => "urn:vim25",
    :schema_type => "EightHostLimitViolated",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpiredAddonLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpiredAddonLicense",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpiredEditionLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpiredEditionLicense",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpiredFeatureLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "ExpiredFeatureLicense",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendedFault,
    :schema_ns => "urn:vim25",
    :schema_type => "ExtendedFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["faultTypeId", "SOAP::SOAPString"],
      ["data", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FailToLockFaultToleranceVMs,
    :schema_ns => "urn:vim25",
    :schema_type => "FailToLockFaultToleranceVMs",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["alreadyLockedVm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceAntiAffinityViolated,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceAntiAffinityViolated",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceCannotEditMem,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceCannotEditMem",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceCpuIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceCpuIncompatible",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["model", "SOAP::SOAPBoolean"],
      ["family", "SOAP::SOAPBoolean"],
      ["stepping", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceNeedsThickDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceNeedsThickDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceNotLicensed,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceNotLicensed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceNotSameBuild,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceNotSameBuild",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["build", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultTolerancePrimaryPowerOnNotAttempted,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultTolerancePrimaryPowerOnNotAttempted",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["secondaryVm", "VimWs25::ManagedObjectReference"],
      ["primaryVm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileAlreadyExists,
    :schema_ns => "urn:vim25",
    :schema_type => "FileAlreadyExists",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileBackedPortNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "FileBackedPortNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileFault,
    :schema_ns => "urn:vim25",
    :schema_type => "FileFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileLocked,
    :schema_ns => "urn:vim25",
    :schema_type => "FileLocked",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "FileNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileNotWritable,
    :schema_ns => "urn:vim25",
    :schema_type => "FileNotWritable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileTooLarge,
    :schema_ns => "urn:vim25",
    :schema_type => "FileTooLarge",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FilesystemQuiesceFault,
    :schema_ns => "urn:vim25",
    :schema_type => "FilesystemQuiesceFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FtIssuesOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "FtIssuesOnHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString"],
      ["errors", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FullStorageVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "FullStorageVMotionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenericDrsFault,
    :schema_ns => "urn:vim25",
    :schema_type => "GenericDrsFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostFaults", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenericVmConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "GenericVmConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HAErrorsAtDest,
    :schema_ns => "urn:vim25",
    :schema_type => "HAErrorsAtDest",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["failure", "VimWs25::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectFault,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInDomain,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInDomain",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForFaultTolerance",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIncompatibleForRecordReplay,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForRecordReplay",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInventoryFull,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInventoryFull",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPowerOpFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPowerOpFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HotSnapshotMoveNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "HotSnapshotMoveNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IDEDiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "IDEDiskNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IORMNotSupportedHostOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "IORMNotSupportedHostOnDatastore",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InUseFeatureManipulationDisallowed,
    :schema_ns => "urn:vim25",
    :schema_type => "InUseFeatureManipulationDisallowed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InaccessibleDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "InaccessibleDatastore",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncompatibleDefaultDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "IncompatibleDefaultDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncompatibleHostForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "IncompatibleHostForFtSecondary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncompatibleSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "IncompatibleSetting",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["conflictingProperty", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncorrectFileType,
    :schema_ns => "urn:vim25",
    :schema_type => "IncorrectFileType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncorrectHostInformation,
    :schema_ns => "urn:vim25",
    :schema_type => "IncorrectHostInformation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IndependentDiskVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "IndependentDiskVMotionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientCpuResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientCpuResourcesFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientFailoverResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientFailoverResourcesFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientHostCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientHostCapacityFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientHostCpuCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientHostCpuCapacityFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientHostMemoryCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientHostMemoryCapacityFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientMemoryResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientMemoryResourcesFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientPerCpuCapacity,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientPerCpuCapacity",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientResourcesFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientStandbyCpuResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientStandbyCpuResource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientStandbyMemoryResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientStandbyMemoryResource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientStandbyResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InsufficientStandbyResource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidAffinitySettingFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidAffinitySettingFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidBmcRole,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidBmcRole",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidBundle,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidBundle",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidClientCertificate,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidClientCertificate",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidController,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["controllerKey", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDasRestartPriorityForFtVm,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDasRestartPriorityForFtVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDatastore",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDatastorePath,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDatastorePath",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDeviceBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDeviceBacking",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDeviceOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDeviceOperation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["badOp", "SOAP::SOAPString", [0, 1]],
      ["badFileOp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDeviceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDeviceSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDiskFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDiskFormat",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDrsBehaviorForFtVm,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidDrsBehaviorForFtVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidEditionLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidEditionLicense",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidEvent,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidEvent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidFolder,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidFolder",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidFormat",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidHostName,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidHostName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidHostState,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidHostState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidIndexArgument,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidIndexArgument",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidIpmiLoginInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidIpmiLoginInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidIpmiMacAddress,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidIpmiMacAddress",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["userProvidedMacAddress", "SOAP::SOAPString"],
      ["observedMacAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidLicense",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseContent", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidLocale,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidLocale",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidLogin,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidLogin",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidName,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidNasCredentials,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidNasCredentials",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidNetworkInType,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidNetworkInType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidNetworkResource,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidNetworkResource",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidOperationOnSecondaryVm,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidOperationOnSecondaryVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPowerState,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPowerState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["requestedState", "SOAP::SOAPString", [0, 1]],
      ["existingState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPrivilege,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPrivilege",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["privilege", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPropertyType,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPropertyType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidPropertyValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidResourcePoolStructureFault,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidResourcePoolStructureFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidSnapshotFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidSnapshotFormat",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidState,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidVmConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "InvalidVmConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InventoryHasStandardAloneHosts,
    :schema_ns => "urn:vim25",
    :schema_type => "InventoryHasStandardAloneHosts",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hosts", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpHostnameGeneratorError,
    :schema_ns => "urn:vim25",
    :schema_type => "IpHostnameGeneratorError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LegacyNetworkInterfaceInUse,
    :schema_ns => "urn:vim25",
    :schema_type => "LegacyNetworkInterfaceInUse",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseAssignmentFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAssignmentFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseDowngradeDisallowed,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseDowngradeDisallowed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["edition", "SOAP::SOAPString"],
      ["entityId", "SOAP::SOAPString"],
      ["features", "VimWs25::KeyAnyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseEntityNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseEntityNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseExpired,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseExpired",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseKeyEntityMismatch,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseKeyEntityMismatch",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseRestricted,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseRestricted",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseServerUnavailable,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseServerUnavailable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseSourceUnavailable,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseSourceUnavailable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseSource", "VimWs25::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LimitExceeded,
    :schema_ns => "urn:vim25",
    :schema_type => "LimitExceeded",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["limit", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LinuxVolumeNotClean,
    :schema_ns => "urn:vim25",
    :schema_type => "LinuxVolumeNotClean",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogBundlingFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "LogBundlingFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MaintenanceModeFileMove,
    :schema_ns => "urn:vim25",
    :schema_type => "MaintenanceModeFileMove",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemoryHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MemoryHotPlugNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemorySizeNotRecommended,
    :schema_ns => "urn:vim25",
    :schema_type => "MemorySizeNotRecommended",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemorySizeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MemorySizeNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemorySnapshotOnIndependentDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "MemorySnapshotOnIndependentDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodAlreadyDisabledFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodAlreadyDisabledFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sourceId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "MethodDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["source", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationFeatureNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationFeatureNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationNotReady,
    :schema_ns => "urn:vim25",
    :schema_type => "MigrationNotReady",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MismatchedBundle,
    :schema_ns => "urn:vim25",
    :schema_type => "MismatchedBundle",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["bundleUuid", "SOAP::SOAPString"],
      ["hostUuid", "SOAP::SOAPString"],
      ["bundleBuildNumber", "SOAP::SOAPInt"],
      ["hostBuildNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MismatchedNetworkPolicies,
    :schema_ns => "urn:vim25",
    :schema_type => "MismatchedNetworkPolicies",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MismatchedVMotionNetworkNames,
    :schema_ns => "urn:vim25",
    :schema_type => "MismatchedVMotionNetworkNames",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sourceNetwork", "SOAP::SOAPString"],
      ["destNetwork", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingBmcSupport,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingBmcSupport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingController,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingLinuxCustResources,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingLinuxCustResources",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingNetworkIpConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingNetworkIpConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingPowerOffConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingPowerOffConfiguration",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingPowerOnConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingPowerOnConfiguration",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingWindowsCustResources,
    :schema_ns => "urn:vim25",
    :schema_type => "MissingWindowsCustResources",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MountError,
    :schema_ns => "urn:vim25",
    :schema_type => "MountError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["diskIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MultipleCertificatesVerifyFaultThumbprintData,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipleCertificatesVerifyFaultThumbprintData",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfMultipleCertificatesVerifyFaultThumbprintData,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfMultipleCertificatesVerifyFaultThumbprintData",
    :schema_element => [
      ["MultipleCertificatesVerifyFaultThumbprintData", ["VimWs25::MultipleCertificatesVerifyFaultThumbprintData[]", XSD::QName.new("urn:vim25", "MultipleCertificatesVerifyFaultThumbprintData")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MultipleCertificatesVerifyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipleCertificatesVerifyFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["thumbprintData", "VimWs25::MultipleCertificatesVerifyFaultThumbprintData[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MultipleSnapshotsNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipleSnapshotsNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "NasConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasConnectionLimitReached,
    :schema_ns => "urn:vim25",
    :schema_type => "NasConnectionLimitReached",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasSessionCredentialConflict,
    :schema_ns => "urn:vim25",
    :schema_type => "NasSessionCredentialConflict",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasVolumeNotMounted,
    :schema_ns => "urn:vim25",
    :schema_type => "NasVolumeNotMounted",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkCopyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkCopyFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkInaccessible,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkInaccessible",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworksMayNotBeTheSame,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworksMayNotBeTheSame",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NicSettingMismatch,
    :schema_ns => "urn:vim25",
    :schema_type => "NicSettingMismatch",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numberOfNicsInSpec", "SOAP::SOAPInt"],
      ["numberOfNicsInVM", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoActiveHostInCluster,
    :schema_ns => "urn:vim25",
    :schema_type => "NoActiveHostInCluster",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["computeResource", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoAvailableIp,
    :schema_ns => "urn:vim25",
    :schema_type => "NoAvailableIp",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoClientCertificate,
    :schema_ns => "urn:vim25",
    :schema_type => "NoClientCertificate",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleHardAffinityHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleHardAffinityHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleHostWithAccessToDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleHostWithAccessToDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleSoftAffinityHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoCompatibleSoftAffinityHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDiskFound,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDiskFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDiskSpace,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDiskSpace",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDisksToCustomize,
    :schema_ns => "urn:vim25",
    :schema_type => "NoDisksToCustomize",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoGateway,
    :schema_ns => "urn:vim25",
    :schema_type => "NoGateway",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoGuestHeartbeat,
    :schema_ns => "urn:vim25",
    :schema_type => "NoGuestHeartbeat",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoHostSuitableForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_type => "NoHostSuitableForFtSecondary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoLicenseServerConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "NoLicenseServerConfigured",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPeerHostFound,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPeerHostFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermission,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermission",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["object", "VimWs25::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermissionOnAD,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermissionOnAD",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermissionOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermissionOnHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermissionOnNasVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "NoPermissionOnNasVolume",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoSubjectName,
    :schema_ns => "urn:vim25",
    :schema_type => "NoSubjectName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoVcManagedIpConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "NoVcManagedIpConfigured",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoVirtualNic,
    :schema_ns => "urn:vim25",
    :schema_type => "NoVirtualNic",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoVmInVApp,
    :schema_ns => "urn:vim25",
    :schema_type => "NoVmInVApp",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonADUserRequired,
    :schema_ns => "urn:vim25",
    :schema_type => "NonADUserRequired",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonHomeRDMVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NonHomeRDMVMotionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonPersistentDisksNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NonPersistentDisksNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotAuthenticated,
    :schema_ns => "urn:vim25",
    :schema_type => "NotAuthenticated",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["object", "VimWs25::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughCpus,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughCpus",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughLogicalCpus,
    :schema_ns => "urn:vim25",
    :schema_type => "NotEnoughLogicalCpus",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "NotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedDeviceForFT,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedDeviceForFT",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString", [0, 1]],
      ["deviceType", "SOAP::SOAPString"],
      ["deviceLabel", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedHost,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedHostInCluster,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedHostInCluster",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedHostInDvs,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedHostInDvs",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotUserConfigurableProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "NotUserConfigurableProperty",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusExceedsLimit,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusExceedsLimit",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusIncompatible",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["numCpu", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpusDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OutOfBounds,
    :schema_ns => "urn:vim25",
    :schema_type => "OutOfBounds",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["argumentName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfAttribute,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfAttribute",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConnectedDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConnectedDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConnectedDeviceFloppy,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConnectedDeviceFloppy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConnectedDeviceIso,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConnectedDeviceIso",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConstraint,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfConstraint",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDiskMappingNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDiskMappingNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDiskOrderConstraint,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDiskOrderConstraint",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDuplicateElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDuplicateElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDuplicatedElementBoundary,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfDuplicatedElementBoundary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfElementInvalidValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfElementInvalidValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfExport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfExportFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfExportFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfFault,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHardwareCheck,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHardwareCheck",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHardwareExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHardwareExport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHostResourceConstraint,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHostResourceConstraint",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHostValueNotParsed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfHostValueNotParsed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfImport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfImport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfImportFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfImportFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInternalError,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInternalError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidPackage",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueConfiguration",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueEmpty,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueEmpty",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueFormatMalformed,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueFormatMalformed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueReference,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidValueReference",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidVmName,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfInvalidVmName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMappedOsId,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMappedOsId",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["ovfId", "SOAP::SOAPInt"],
      ["ovfDescription", "SOAP::SOAPString"],
      ["targetDescription", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingAttribute,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingAttribute",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingElementNormalBoundary,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingElementNormalBoundary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingHardware,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfMissingHardware",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfNoHostNic,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNoHostNic",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfNoSupportedHardwareFamily,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfNoSupportedHardwareFamily",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfProperty,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfProperty",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyExport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyNetwork,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyNetwork",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyQualifier,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyQualifier",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyQualifierDuplicate,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyQualifierDuplicate",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyQualifierIgnored,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyQualifierIgnored",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfPropertyValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfSystemFault,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfSystemFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfToXmlUnsupportedElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfToXmlUnsupportedElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnableToExportDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnableToExportDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["diskName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnexpectedElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnexpectedElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnknownDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnknownDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnknownDeviceBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnknownDeviceBacking",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["backing", "VimWs25::VirtualDeviceBackingInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnknownEntity,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnknownEntity",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedAttribute,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedAttribute",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedAttributeValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedAttributeValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceExport,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDeviceExport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDiskProvisioning,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedDiskProvisioning",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString"],
      ["supportedDiskProvisioning", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedElementValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedElementValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedPackage",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedSection,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedSection",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["info", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedSubType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedSubType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"],
      ["deviceSubType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfUnsupportedType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfWrongElement,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfWrongElement",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfWrongNamespace,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfWrongNamespace",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["namespaceName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfXmlFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfXmlFormat",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchAlreadyInstalled,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchAlreadyInstalled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchBinariesNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchBinariesNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["binary", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchInstallFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchInstallFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"],
      ["rolledBack", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchIntegrityError,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchIntegrityError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMetadataCorrupted,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMetadataCorrupted",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMetadataInvalid,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMetadataInvalid",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMetadataNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMetadataNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMissingDependencies,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchMissingDependencies",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["prerequisitePatch", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisiteLib", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchNotApplicable,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchNotApplicable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchSuperseded,
    :schema_ns => "urn:vim25",
    :schema_type => "PatchSuperseded",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["supersede", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysCompatRDMNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysCompatRDMNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PlatformConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "PlatformConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnFtSecondaryFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnFtSecondaryFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["hostSelectionBy", "SOAP::SOAPString"],
      ["hostErrors", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["rootCause", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnFtSecondaryTimedout,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerOnFtSecondaryTimedout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileUpdateFailedUpdateFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileUpdateFailedUpdateFailure",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profilePath", "VimWs25::ProfilePropertyPath"],
      ["errMsg", "VimWs25::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileUpdateFailedUpdateFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileUpdateFailedUpdateFailure",
    :schema_element => [
      ["ProfileUpdateFailedUpdateFailure", ["VimWs25::ProfileUpdateFailedUpdateFailure[]", XSD::QName.new("urn:vim25", "ProfileUpdateFailedUpdateFailure")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileUpdateFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileUpdateFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["failure", "VimWs25::ProfileUpdateFailedUpdateFailure[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QuestionPending,
    :schema_ns => "urn:vim25",
    :schema_type => "QuestionPending",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMConversionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMConversionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMNotPreserved,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMNotPreserved",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMNotSupportedOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMNotSupportedOnDatastore",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMPointsToInaccessibleDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "RDMPointsToInaccessibleDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RawDiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RawDiskNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadOnlyDisksWithLegacyDestination,
    :schema_ns => "urn:vim25",
    :schema_type => "ReadOnlyDisksWithLegacyDestination",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["roDiskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootRequired,
    :schema_ns => "urn:vim25",
    :schema_type => "RebootRequired",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patch", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RecordReplayDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "RecordReplayDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoteDeviceNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoteDeviceNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "RemoveFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceInUse,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceInUse",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceNotAvailable,
    :schema_ns => "urn:vim25",
    :schema_type => "ResourceNotAvailable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["containerType", "SOAP::SOAPString", [0, 1]],
      ["containerName", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestrictedVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "RestrictedVersion",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RuleViolation,
    :schema_ns => "urn:vim25",
    :schema_type => "RuleViolation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["rule", "VimWs25::ClusterRuleInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SSLDisabledFault,
    :schema_ns => "urn:vim25",
    :schema_type => "SSLDisabledFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SSLVerifyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "SSLVerifyFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["selfSigned", "SOAP::SOAPBoolean"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SSPIChallenge,
    :schema_ns => "urn:vim25",
    :schema_type => "SSPIChallenge",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["base64Token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmAlreadyDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyEnabled,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmAlreadyEnabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyRegistered,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmAlreadyRegistered",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmNotRegistered,
    :schema_ns => "urn:vim25",
    :schema_type => "SecondaryVmNotRegistered",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SharedBusControllerNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SharedBusControllerNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotCloneNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotCloneNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotCopyNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotCopyNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotFault,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotIncompatibleDeviceInVm,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotIncompatibleDeviceInVm",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotLocked,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotLocked",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotMoveFromNonHomeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotMoveFromNonHomeNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotMoveNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotMoveNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotMoveToNonHomeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotMoveToNonHomeNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotNoChange,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotNoChange",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotRevertIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "SnapshotRevertIssue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["snapshotName", "SOAP::SOAPString", [0, 1]],
      ["event", "VimWs25::Event[]", [0, nil]],
      ["errors", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SoftRuleVioCorrectionDisallowed,
    :schema_ns => "urn:vim25",
    :schema_type => "SoftRuleVioCorrectionDisallowed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SoftRuleVioCorrectionImpact,
    :schema_ns => "urn:vim25",
    :schema_type => "SoftRuleVioCorrectionImpact",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageVMotionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendedRelocateNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SuspendedRelocateNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwapDatastoreNotWritableOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "SwapDatastoreNotWritableOnHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwapDatastoreUnset,
    :schema_ns => "urn:vim25",
    :schema_type => "SwapDatastoreUnset",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwapPlacementOverrideNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "SwapPlacementOverrideNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwitchNotInUpgradeMode,
    :schema_ns => "urn:vim25",
    :schema_type => "SwitchNotInUpgradeMode",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskInProgress,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskInProgress",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["task", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Timedout,
    :schema_ns => "urn:vim25",
    :schema_type => "Timedout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyConsecutiveOverrides,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyConsecutiveOverrides",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyDevices,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyDevices",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyDisksOnLegacyHost,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyDisksOnLegacyHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyHosts,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManyHosts",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManySnapshotLevels,
    :schema_ns => "urn:vim25",
    :schema_type => "TooManySnapshotLevels",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsAlreadyUpgraded,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsAlreadyUpgraded",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsAutoUpgradeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsAutoUpgradeNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsImageNotAvailable,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsImageNotAvailable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsImageSignatureCheckFailed,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsImageSignatureCheckFailed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsInstallationInProgress,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsInstallationInProgress",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsUnavailable,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsUnavailable",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsUpgradeCancelled,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsUpgradeCancelled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UncommittedUndoableDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "UncommittedUndoableDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnconfiguredPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_type => "UnconfiguredPropertyValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UncustomizableGuest,
    :schema_ns => "urn:vim25",
    :schema_type => "UncustomizableGuest",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uncustomizableGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnexpectedCustomizationFault,
    :schema_ns => "urn:vim25",
    :schema_type => "UnexpectedCustomizationFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnrecognizedHost,
    :schema_ns => "urn:vim25",
    :schema_type => "UnrecognizedHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsharedSwapVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsharedSwapVMotionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedDatastore",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedGuest,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedGuest",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["unsupportedGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedVimApiVersion,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedVimApiVersion",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedVmxLocation,
    :schema_ns => "urn:vim25",
    :schema_type => "UnsupportedVmxLocation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnusedVirtualDiskBlocksNotScrubbed,
    :schema_ns => "urn:vim25",
    :schema_type => "UnusedVirtualDiskBlocksNotScrubbed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserNotFound,
    :schema_ns => "urn:vim25",
    :schema_type => "UserNotFound",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["unresolved", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppNotRunning,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppNotRunning",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppPropertyFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppPropertyFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppTaskInProgress,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppTaskInProgress",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["task", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMINotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VMINotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMOnConflictDVPort,
    :schema_ns => "urn:vim25",
    :schema_type => "VMOnConflictDVPort",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMOnVirtualIntranet,
    :schema_ns => "urn:vim25",
    :schema_type => "VMOnVirtualIntranet",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionInterfaceIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionInterfaceIssue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionLinkCapacityLow,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionLinkCapacityLow",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionLinkDown,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionLinkDown",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionNotConfigured,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionNotConfigured",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionNotLicensed,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionNotLicensed",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionProtocolIncompatible,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionProtocolIncompatible",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VimFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VimFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskBlocksNotFullyProvisioned,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskBlocksNotFullyProvisioned",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskModeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskModeNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualHardwareCompatibilityIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardwareCompatibilityIssue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualHardwareVersionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardwareVersionNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmAlreadyExistsInDatacenter,
    :schema_ns => "urn:vim25",
    :schema_type => "VmAlreadyExistsInDatacenter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigIncompatibleForFaultTolerance",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigIncompatibleForRecordReplay,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigIncompatibleForRecordReplay",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceConfigIssue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssueWrapper,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceConfigIssueWrapper",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceInvalidFileBacking,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceInvalidFileBacking",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["backingType", "SOAP::SOAPString", [0, 1]],
      ["backingFilename", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceIssue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceOpIssuesList,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceOpIssuesList",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errors", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warnings", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceTooManyVMsOnHost,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceTooManyVMsOnHost",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["maxNumFtVms", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmHostAffinityRuleViolation,
    :schema_ns => "urn:vim25",
    :schema_type => "VmHostAffinityRuleViolation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmLimitLicense,
    :schema_ns => "urn:vim25",
    :schema_type => "VmLimitLicense",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["limit", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMonitorIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_type => "VmMonitorIncompatibleForFaultTolerance",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPowerOnDisabled,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPowerOnDisabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmToolsUpgradeFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VmToolsUpgradeFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmValidateMaxDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VmValidateMaxDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["max", "SOAP::SOAPInt"],
      ["count", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmWwnConflict,
    :schema_ns => "urn:vim25",
    :schema_type => "VmWwnConflict",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["wwn", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsAlreadyMounted,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsAlreadyMounted",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsAmbiguousMount,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsAmbiguousMount",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsMountFault,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsMountFault",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmotionInterfaceNotEnabled,
    :schema_ns => "urn:vim25",
    :schema_type => "VmotionInterfaceNotEnabled",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VolumeEditorError,
    :schema_ns => "urn:vim25",
    :schema_type => "VolumeEditorError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WakeOnLanNotSupported,
    :schema_ns => "urn:vim25",
    :schema_type => "WakeOnLanNotSupported",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WakeOnLanNotSupportedByVmotionNIC,
    :schema_ns => "urn:vim25",
    :schema_type => "WakeOnLanNotSupportedByVmotionNIC",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WillModifyConfigCpuRequirements,
    :schema_ns => "urn:vim25",
    :schema_type => "WillModifyConfigCpuRequirements",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostActiveDirectoryInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectoryInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["joinedDomain", "SOAP::SOAPString", [0, 1]],
      ["trustedDomain", "SOAP::SOAPString[]", [0, nil]],
      ["domainMembershipStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostActiveDirectorySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectorySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostActiveDirectory,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectory",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostActiveDirectorySpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostActiveDirectory,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostActiveDirectory",
    :schema_element => [
      ["HostActiveDirectory", ["VimWs25::HostActiveDirectory[]", XSD::QName.new("urn:vim25", "HostActiveDirectory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAuthenticationManagerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAuthenticationManagerInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["authConfig", "VimWs25::HostAuthenticationStoreInfo[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAuthenticationStoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAuthenticationStoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostAuthenticationStoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostAuthenticationStoreInfo",
    :schema_element => [
      ["HostAuthenticationStoreInfo", ["VimWs25::HostAuthenticationStoreInfo[]", XSD::QName.new("urn:vim25", "HostAuthenticationStoreInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartDefaults,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartDefaults",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitForHeartbeat", "SOAP::SOAPBoolean", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartPowerInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["startOrder", "SOAP::SOAPInt"],
      ["startDelay", "SOAP::SOAPInt"],
      ["waitForHeartbeat", "SOAP::SOAPString"],
      ["startAction", "SOAP::SOAPString"],
      ["stopDelay", "SOAP::SOAPInt"],
      ["stopAction", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfAutoStartPowerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfAutoStartPowerInfo",
    :schema_element => [
      ["AutoStartPowerInfo", ["VimWs25::AutoStartPowerInfo[]", XSD::QName.new("urn:vim25", "AutoStartPowerInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAutoStartManagerConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAutoStartManagerConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaults", "VimWs25::AutoStartDefaults", [0, 1]],
      ["powerInfo", "VimWs25::AutoStartPowerInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostBootDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBootDeviceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["bootDevices", "VimWs25::HostBootDevice[]", [0, nil]],
      ["currentBootDeviceKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostBootDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBootDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostBootDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostBootDevice",
    :schema_element => [
      ["HostBootDevice", ["VimWs25::HostBootDevice[]", XSD::QName.new("urn:vim25", "HostBootDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["recursiveResourcePoolsSupported", "SOAP::SOAPBoolean"],
      ["cpuMemoryResourceConfigurationSupported", "SOAP::SOAPBoolean"],
      ["rebootSupported", "SOAP::SOAPBoolean"],
      ["shutdownSupported", "SOAP::SOAPBoolean"],
      ["vmotionSupported", "SOAP::SOAPBoolean"],
      ["standbySupported", "SOAP::SOAPBoolean"],
      ["ipmiSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["maxSupportedVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxRunningVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxSupportedVcpus", "SOAP::SOAPInt", [0, 1]],
      ["datastorePrincipalSupported", "SOAP::SOAPBoolean"],
      ["sanSupported", "SOAP::SOAPBoolean"],
      ["nfsSupported", "SOAP::SOAPBoolean"],
      ["iscsiSupported", "SOAP::SOAPBoolean"],
      ["vlanTaggingSupported", "SOAP::SOAPBoolean"],
      ["nicTeamingSupported", "SOAP::SOAPBoolean"],
      ["highGuestMemSupported", "SOAP::SOAPBoolean"],
      ["maintenanceModeSupported", "SOAP::SOAPBoolean"],
      ["suspendedRelocateSupported", "SOAP::SOAPBoolean"],
      ["restrictedSnapshotRelocateSupported", "SOAP::SOAPBoolean"],
      ["perVmSwapFiles", "SOAP::SOAPBoolean"],
      ["localSwapDatastoreSupported", "SOAP::SOAPBoolean"],
      ["unsharedSwapVMotionSupported", "SOAP::SOAPBoolean"],
      ["backgroundSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["preAssignedPCIUnitNumbersSupported", "SOAP::SOAPBoolean"],
      ["screenshotSupported", "SOAP::SOAPBoolean"],
      ["scaledScreenshotSupported", "SOAP::SOAPBoolean"],
      ["storageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmotionWithStorageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["ftSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["replayUnsupportedReason", "SOAP::SOAPString", [0, 1]],
      ["replayCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["ftCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["loginBySSLThumbprintSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["cloneFromSnapshotSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["deltaDiskBackingsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["perVMNetworkTrafficShapingSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["tpmSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedCpuFeature", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["virtualExecUsageSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2UnsupportedReason", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2UnsupportedReasonExtended", "SOAP::SOAPString", [0, 1]],
      ["vStorageCapable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigChange,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigChange",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["product", "VimWs25::AboutInfo"],
      ["hyperThread", "VimWs25::HostHyperThreadScheduleInfo", [0, 1]],
      ["consoleReservation", "VimWs25::ServiceConsoleReservationInfo", [0, 1]],
      ["virtualMachineReservation", "VimWs25::VirtualMachineMemoryReservationInfo", [0, 1]],
      ["storageDevice", "VimWs25::HostStorageDeviceInfo", [0, 1]],
      ["multipathState", "VimWs25::HostMultipathStateInfo", [0, 1]],
      ["fileSystemVolume", "VimWs25::HostFileSystemVolumeInfo", [0, 1]],
      ["systemFile", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VimWs25::HostNetworkInfo", [0, 1]],
      ["vmotion", "VimWs25::HostVMotionInfo", [0, 1]],
      ["virtualNicManagerInfo", "VimWs25::HostVirtualNicManagerInfo", [0, 1]],
      ["capabilities", "VimWs25::HostNetCapabilities", [0, 1]],
      ["datastoreCapabilities", "VimWs25::HostDatastoreSystemCapabilities", [0, 1]],
      ["offloadCapabilities", "VimWs25::HostNetOffloadCapabilities", [0, 1]],
      ["service", "VimWs25::HostServiceInfo", [0, 1]],
      ["firewall", "VimWs25::HostFirewallInfo", [0, 1]],
      ["autoStart", "VimWs25::HostAutoStartManagerConfig", [0, 1]],
      ["activeDiagnosticPartition", "VimWs25::HostDiagnosticPartition", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]],
      ["optionDef", "VimWs25::OptionDef[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["localSwapDatastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["systemResources", "VimWs25::HostSystemResourceInfo", [0, 1]],
      ["dateTimeInfo", "VimWs25::HostDateTimeInfo", [0, 1]],
      ["flags", "VimWs25::HostFlagInfo", [0, 1]],
      ["adminDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["ipmi", "VimWs25::HostIpmiInfo", [0, 1]],
      ["sslThumbprintInfo", "VimWs25::HostSslThumbprintInfo", [0, 1]],
      ["pciPassthruInfo", "VimWs25::HostPciPassthruInfo[]", [0, nil]],
      ["authenticationManagerInfo", "VimWs25::HostAuthenticationManagerInfo", [0, 1]],
      ["featureVersion", "VimWs25::HostFeatureVersionInfo[]", [0, nil]],
      ["powerSystemCapability", "VimWs25::PowerSystemCapability", [0, 1]],
      ["powerSystemInfo", "VimWs25::PowerSystemInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigManager,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigManager",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cpuScheduler", "VimWs25::ManagedObjectReference", [0, 1]],
      ["datastoreSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["memoryManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["storageSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["vmotionSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["virtualNicManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["serviceSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["firewallSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["advancedOption", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diagnosticSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["autoStartManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dateTimeSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["patchManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["bootDeviceSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["firmwareSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["healthStatusSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pciPassthruSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["kernelModuleSystem", "VimWs25::ManagedObjectReference", [0, 1]],
      ["authenticationManager", "VimWs25::ManagedObjectReference", [0, 1]],
      ["powerSystem", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nasDatastore", "VimWs25::HostNasVolumeConfig[]", [0, nil]],
      ["network", "VimWs25::HostNetworkConfig", [0, 1]],
      ["nicTypeSelection", "VimWs25::HostVirtualNicManagerNicTypeSelection[]", [0, nil]],
      ["service", "VimWs25::HostServiceConfig[]", [0, nil]],
      ["firewall", "VimWs25::HostFirewallConfig", [0, 1]],
      ["option", "VimWs25::OptionValue[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipalPasswd", "SOAP::SOAPString", [0, 1]],
      ["datetime", "VimWs25::HostDateTimeConfig", [0, 1]],
      ["storageDevice", "VimWs25::HostStorageDeviceInfo", [0, 1]],
      ["license", "VimWs25::HostLicenseSpec", [0, 1]],
      ["security", "VimWs25::HostSecuritySpec", [0, 1]],
      ["userAccount", "VimWs25::HostAccountSpec[]", [0, nil]],
      ["usergroupAccount", "VimWs25::HostAccountSpec[]", [0, nil]],
      ["memory", "VimWs25::HostMemorySpec", [0, 1]],
      ["activeDirectory", "VimWs25::HostActiveDirectory[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectInfoNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectInfoNetworkInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::NetworkSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostConnectInfoNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostConnectInfoNetworkInfo",
    :schema_element => [
      ["HostConnectInfoNetworkInfo", ["VimWs25::HostConnectInfoNetworkInfo[]", XSD::QName.new("urn:vim25", "HostConnectInfoNetworkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNewNetworkConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNewNetworkConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::NetworkSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDatastoreConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::DatastoreSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDatastoreConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDatastoreConnectInfo",
    :schema_element => [
      ["HostDatastoreConnectInfo", ["VimWs25::HostDatastoreConnectInfo[]", XSD::QName.new("urn:vim25", "HostDatastoreConnectInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDatastoreExistsConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreExistsConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDatastoreNameConflictConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreNameConflictConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["summary", "VimWs25::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLicenseConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLicenseConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["license", "VimWs25::LicenseManagerLicenseInfo"],
      ["evaluation", "VimWs25::LicenseManagerEvaluationInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serverIp", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::HostListSummary"],
      ["vm", "VimWs25::VirtualMachineSummary[]", [0, nil]],
      ["vimAccountNameRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["clusterSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VimWs25::HostConnectInfoNetworkInfo[]", [0, nil]],
      ["datastore", "VimWs25::HostDatastoreConnectInfo[]", [0, nil]],
      ["license", "VimWs25::HostLicenseConnectInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConnectSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean"],
      ["vimAccountName", "SOAP::SOAPString", [0, 1]],
      ["vimAccountPassword", "SOAP::SOAPString", [0, 1]],
      ["managementIp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCpuIdInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuIdInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["eax", "SOAP::SOAPString", [0, 1]],
      ["ebx", "SOAP::SOAPString", [0, 1]],
      ["ecx", "SOAP::SOAPString", [0, 1]],
      ["edx", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostCpuIdInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostCpuIdInfo",
    :schema_element => [
      ["HostCpuIdInfo", ["VimWs25::HostCpuIdInfo[]", XSD::QName.new("urn:vim25", "HostCpuIdInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHyperThreadScheduleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHyperThreadScheduleInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["available", "SOAP::SOAPBoolean"],
      ["active", "SOAP::SOAPBoolean"],
      ["config", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileQueryFlags,
    :schema_ns => "urn:vim25",
    :schema_type => "FileQueryFlags",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileType", "SOAP::SOAPBoolean"],
      ["fileSize", "SOAP::SOAPBoolean"],
      ["modification", "SOAP::SOAPBoolean"],
      ["fileOwner", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfFileInfo",
    :schema_element => [
      ["FileInfo", ["VimWs25::FileInfo[]", XSD::QName.new("urn:vim25", "FileInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "FileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfFileQuery",
    :schema_element => [
      ["FileQuery", ["VimWs25::FileQuery[]", XSD::QName.new("urn:vim25", "FileQuery")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigFileQueryFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileQueryFilter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["matchConfigVersion", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigFileQueryFlags,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileQueryFlags",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VimWs25::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TemplateConfigFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateConfigFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VimWs25::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDiskFileQueryFilter,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileQueryFilter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString[]", [0, nil]],
      ["matchHardwareVersion", "SOAP::SOAPInt[]", [0, nil]],
      ["controllerType", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDiskFileQueryFlags,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileQueryFlags",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPBoolean"],
      ["capacityKb", "SOAP::SOAPBoolean"],
      ["hardwareVersion", "SOAP::SOAPBoolean"],
      ["controllerType", "SOAP::SOAPBoolean", [0, 1]],
      ["diskExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDiskFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["filter", "VimWs25::VmDiskFileQueryFilter", [0, 1]],
      ["details", "VimWs25::VmDiskFileQueryFlags", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FolderFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "FolderFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSnapshotFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSnapshotFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IsoImageFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "IsoImageFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FloppyImageFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "FloppyImageFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmNvramFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNvramFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmLogFileQuery,
    :schema_ns => "urn:vim25",
    :schema_type => "VmLogFileQuery",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TemplateConfigFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "TemplateConfigFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDiskFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDiskFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["diskType", "SOAP::SOAPString", [0, 1]],
      ["capacityKb", "SOAP::SOAPLong", [0, 1]],
      ["hardwareVersion", "SOAP::SOAPInt", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["diskExtents", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FolderFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FolderFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmSnapshotFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmSnapshotFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IsoImageFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "IsoImageFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FloppyImageFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FloppyImageFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmNvramFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmNvramFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmLogFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmLogFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDatastoreBrowserSearchSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreBrowserSearchSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["query", "VimWs25::FileQuery[]", [0, nil]],
      ["details", "VimWs25::FileQueryFlags", [0, 1]],
      ["searchCaseInsensitive", "SOAP::SOAPBoolean", [0, 1]],
      ["matchPattern", "SOAP::SOAPString[]", [0, nil]],
      ["sortFoldersFirst", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDatastoreBrowserSearchResults,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreBrowserSearchResults",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["folderPath", "SOAP::SOAPString", [0, 1]],
      ["file", "VimWs25::FileInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDatastoreBrowserSearchResults,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDatastoreBrowserSearchResults",
    :schema_element => [
      ["HostDatastoreBrowserSearchResults", ["VimWs25::HostDatastoreBrowserSearchResults[]", XSD::QName.new("urn:vim25", "HostDatastoreBrowserSearchResults")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDatastoreSystemCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDatastoreSystemCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nfsMountCreationRequired", "SOAP::SOAPBoolean"],
      ["nfsMountCreationSupported", "SOAP::SOAPBoolean"],
      ["localDatastoreSupported", "SOAP::SOAPBoolean"],
      ["vmfsExtentExpansionSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["vmfs", "VimWs25::HostVmfsVolume", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NasDatastoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["nas", "VimWs25::HostNasVolume", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LocalDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "LocalDatastoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["path", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["vmfs", "VimWs25::HostVmfsSpec"],
      ["extent", "VimWs25::HostScsiDiskPartition[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreExtendSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreExtendSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["extent", "VimWs25::HostScsiDiskPartition[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreExpandSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreExpandSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreBaseOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreBaseOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreSingleExtentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreSingleExtentOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["vmfsExtent", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreAllExtentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreAllExtentOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["vmfsExtent", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreMultipleExtentOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreMultipleExtentOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["vmfsExtent", "VimWs25::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsDatastoreOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VmfsDatastoreOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["info", "VimWs25::VmfsDatastoreBaseOption"],
      ["spec", "VimWs25::VmfsDatastoreSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVmfsDatastoreOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVmfsDatastoreOption",
    :schema_element => [
      ["VmfsDatastoreOption", ["VimWs25::VmfsDatastoreOption[]", XSD::QName.new("urn:vim25", "VmfsDatastoreOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDateTimeConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDateTimeConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["ntpConfig", "VimWs25::HostNtpConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDateTimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDateTimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["timeZone", "VimWs25::HostDateTimeSystemTimeZone"],
      ["ntpConfig", "VimWs25::HostNtpConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDateTimeSystemTimeZone,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDateTimeSystemTimeZone",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["gmtOffset", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDateTimeSystemTimeZone,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDateTimeSystemTimeZone",
    :schema_element => [
      ["HostDateTimeSystemTimeZone", ["VimWs25::HostDateTimeSystemTimeZone[]", XSD::QName.new("urn:vim25", "HostDateTimeSystemTimeZone")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDhcpServiceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDhcpServiceSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["defaultLeaseDuration", "SOAP::SOAPInt"],
      ["leaseBeginIp", "SOAP::SOAPString"],
      ["leaseEndIp", "SOAP::SOAPString"],
      ["maxLeaseDuration", "SOAP::SOAPInt"],
      ["unlimitedLease", "SOAP::SOAPBoolean"],
      ["ipSubnetAddr", "SOAP::SOAPString"],
      ["ipSubnetMask", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDhcpServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDhcpServiceConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDhcpServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDhcpServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDhcpServiceConfig",
    :schema_element => [
      ["HostDhcpServiceConfig", ["VimWs25::HostDhcpServiceConfig[]", XSD::QName.new("urn:vim25", "HostDhcpServiceConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDhcpService,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDhcpService",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDhcpServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDhcpService,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDhcpService",
    :schema_element => [
      ["HostDhcpService", ["VimWs25::HostDhcpService[]", XSD::QName.new("urn:vim25", "HostDhcpService")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiagnosticPartitionCreateOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartitionCreateOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["disk", "VimWs25::HostScsiDisk"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDiagnosticPartitionCreateOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDiagnosticPartitionCreateOption",
    :schema_element => [
      ["HostDiagnosticPartitionCreateOption", ["VimWs25::HostDiagnosticPartitionCreateOption[]", XSD::QName.new("urn:vim25", "HostDiagnosticPartitionCreateOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiagnosticPartitionCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartitionCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["id", "VimWs25::HostScsiDiskPartition"],
      ["partition", "VimWs25::HostDiskPartitionSpec"],
      ["active", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiagnosticPartitionCreateDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartitionCreateDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["layout", "VimWs25::HostDiskPartitionLayout"],
      ["diskUuid", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiagnosticPartition,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiagnosticPartition",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["slots", "SOAP::SOAPInt"],
      ["id", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDiagnosticPartition,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDiagnosticPartition",
    :schema_element => [
      ["HostDiagnosticPartition", ["VimWs25::HostDiagnosticPartition[]", XSD::QName.new("urn:vim25", "HostDiagnosticPartition")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDirectoryStoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDirectoryStoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskDimensionsChs,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskDimensionsChs",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cylinder", "SOAP::SOAPLong"],
      ["head", "SOAP::SOAPInt"],
      ["sector", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskDimensionsLba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskDimensionsLba",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["blockSize", "SOAP::SOAPInt"],
      ["block", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskDimensions,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskDimensions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskPartitionAttributes,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionAttributes",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt"],
      ["startSector", "SOAP::SOAPLong"],
      ["endSector", "SOAP::SOAPLong"],
      ["type", "SOAP::SOAPString"],
      ["logical", "SOAP::SOAPBoolean"],
      ["attributes", "SOAP::SOAPByte"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDiskPartitionAttributes,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDiskPartitionAttributes",
    :schema_element => [
      ["HostDiskPartitionAttributes", ["VimWs25::HostDiskPartitionAttributes[]", XSD::QName.new("urn:vim25", "HostDiskPartitionAttributes")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskPartitionBlockRange,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionBlockRange",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["start", "VimWs25::HostDiskDimensionsLba"],
      ["v_end", ["VimWs25::HostDiskDimensionsLba", XSD::QName.new("urn:vim25", "end")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDiskPartitionBlockRange,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDiskPartitionBlockRange",
    :schema_element => [
      ["HostDiskPartitionBlockRange", ["VimWs25::HostDiskPartitionBlockRange[]", XSD::QName.new("urn:vim25", "HostDiskPartitionBlockRange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskPartitionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["chs", "VimWs25::HostDiskDimensionsChs", [0, 1]],
      ["totalSectors", "SOAP::SOAPLong", [0, 1]],
      ["partition", "VimWs25::HostDiskPartitionAttributes[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskPartitionLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionLayout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["total", "VimWs25::HostDiskDimensionsLba", [0, 1]],
      ["partition", "VimWs25::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskPartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiskPartitionSpec"],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDiskPartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDiskPartitionInfo",
    :schema_element => [
      ["HostDiskPartitionInfo", ["VimWs25::HostDiskPartitionInfo[]", XSD::QName.new("urn:vim25", "HostDiskPartitionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDnsConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDnsConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDnsConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDnsConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]],
      ["virtualNicConnection", "VimWs25::HostVirtualNicConnection", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFeatureVersionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFeatureVersionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostFeatureVersionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostFeatureVersionInfo",
    :schema_element => [
      ["HostFeatureVersionInfo", ["VimWs25::HostFeatureVersionInfo[]", XSD::QName.new("urn:vim25", "HostFeatureVersionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ModeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ModeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["browse", "SOAP::SOAPString", [0, 1]],
      ["read", "SOAP::SOAPString"],
      ["modify", "SOAP::SOAPString"],
      ["use", "SOAP::SOAPString"],
      ["admin", "SOAP::SOAPString", [0, 1]],
      ["full", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFileAccess,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileAccess",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["who", "SOAP::SOAPString"],
      ["what", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFileSystemVolumeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileSystemVolumeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["volumeTypeList", "SOAP::SOAPString[]", [0, nil]],
      ["mountInfo", "VimWs25::HostFileSystemMountInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFileSystemMountInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileSystemMountInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mountInfo", "VimWs25::HostMountInfo"],
      ["volume", "VimWs25::HostFileSystemVolume"],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostFileSystemMountInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostFileSystemMountInfo",
    :schema_element => [
      ["HostFileSystemMountInfo", ["VimWs25::HostFileSystemMountInfo[]", XSD::QName.new("urn:vim25", "HostFileSystemMountInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFileSystemVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFileSystemVolume",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNasVolumeSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNasVolumeSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"],
      ["accessMode", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNasVolumeConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNasVolumeConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostNasVolumeSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostNasVolumeConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostNasVolumeConfig",
    :schema_element => [
      ["HostNasVolumeConfig", ["VimWs25::HostNasVolumeConfig[]", XSD::QName.new("urn:vim25", "HostNasVolumeConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNasVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNasVolume",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLocalFileSystemVolumeSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLocalFileSystemVolumeSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLocalFileSystemVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLocalFileSystemVolume",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallConfigRuleSetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallConfigRuleSetConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rulesetId", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostFirewallConfigRuleSetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostFirewallConfigRuleSetConfig",
    :schema_element => [
      ["HostFirewallConfigRuleSetConfig", ["VimWs25::HostFirewallConfigRuleSetConfig[]", XSD::QName.new("urn:vim25", "HostFirewallConfigRuleSetConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rule", "VimWs25::HostFirewallConfigRuleSetConfig[]", [0, nil]],
      ["defaultBlockingPolicy", "VimWs25::HostFirewallDefaultPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallDefaultPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallDefaultPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["incomingBlocked", "SOAP::SOAPBoolean", [0, 1]],
      ["outgoingBlocked", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaultPolicy", "VimWs25::HostFirewallDefaultPolicy"],
      ["ruleset", "VimWs25::HostFirewallRuleset[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFlagInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFlagInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["backgroundSnapshotsEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostForceMountedInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostForceMountedInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["persist", "SOAP::SOAPBoolean"],
      ["mounted", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHardwareInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemInfo", "VimWs25::HostSystemInfo"],
      ["cpuPowerManagementInfo", "VimWs25::HostCpuPowerManagementInfo", [0, 1]],
      ["cpuInfo", "VimWs25::HostCpuInfo"],
      ["cpuPkg", "VimWs25::HostCpuPackage[]", [1, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["numaInfo", "VimWs25::HostNumaInfo", [0, 1]],
      ["pciDevice", "VimWs25::HostPciDevice[]", [0, nil]],
      ["cpuFeature", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["biosInfo", "VimWs25::HostBIOSInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VimWs25::HostSystemIdentificationInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCpuPowerManagementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPowerManagementInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "SOAP::SOAPString", [0, 1]],
      ["hardwareSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCpuInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numCpuPackages", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["hz", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCpuPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPackage",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["index", "SOAP::SOAPShort"],
      ["vendor", "SOAP::SOAPString"],
      ["hz", "SOAP::SOAPLong"],
      ["busHz", "SOAP::SOAPLong"],
      ["description", "SOAP::SOAPString"],
      ["threadId", "SOAP::SOAPShort[]", [1, nil]],
      ["cpuFeature", "VimWs25::HostCpuIdInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostCpuPackage,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostCpuPackage",
    :schema_element => [
      ["HostCpuPackage", ["VimWs25::HostCpuPackage[]", XSD::QName.new("urn:vim25", "HostCpuPackage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNumaInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumaInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["numNodes", "SOAP::SOAPInt"],
      ["numaNode", "VimWs25::HostNumaNode[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNumaNode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumaNode",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["typeId", "SOAP::SOAPByte"],
      ["cpuID", "SOAP::SOAPShort[]", [1, nil]],
      ["memoryRangeBegin", "SOAP::SOAPLong"],
      ["memoryRangeLength", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostNumaNode,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostNumaNode",
    :schema_element => [
      ["HostNumaNode", ["VimWs25::HostNumaNode[]", XSD::QName.new("urn:vim25", "HostNumaNode")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostBIOSInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBIOSInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["biosVersion", "SOAP::SOAPString", [0, 1]],
      ["releaseDate", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHardwareElementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareElementInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VimWs25::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostHardwareElementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostHardwareElementInfo",
    :schema_element => [
      ["HostHardwareElementInfo", ["VimWs25::HostHardwareElementInfo[]", XSD::QName.new("urn:vim25", "HostHardwareElementInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostStorageOperationalInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageOperationalInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostStorageOperationalInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostStorageOperationalInfo",
    :schema_element => [
      ["HostStorageOperationalInfo", ["VimWs25::HostStorageOperationalInfo[]", XSD::QName.new("urn:vim25", "HostStorageOperationalInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostStorageElementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageElementInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VimWs25::ElementDescription"],
      ["operationalInfo", "VimWs25::HostStorageOperationalInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostStorageElementInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostStorageElementInfo",
    :schema_element => [
      ["HostStorageElementInfo", ["VimWs25::HostStorageElementInfo[]", XSD::QName.new("urn:vim25", "HostStorageElementInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHardwareStatusInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareStatusInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["memoryStatusInfo", "VimWs25::HostHardwareElementInfo[]", [0, nil]],
      ["cpuStatusInfo", "VimWs25::HostHardwareElementInfo[]", [0, nil]],
      ["storageStatusInfo", "VimWs25::HostStorageElementInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HealthSystemRuntime,
    :schema_ns => "urn:vim25",
    :schema_type => "HealthSystemRuntime",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["systemHealthInfo", "VimWs25::HostSystemHealthInfo", [0, 1]],
      ["hardwareStatusInfo", "VimWs25::HostHardwareStatusInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHostBusAdapter,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHostBusAdapter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostHostBusAdapter,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostHostBusAdapter",
    :schema_element => [
      ["HostHostBusAdapter", ["VimWs25::HostHostBusAdapter[]", XSD::QName.new("urn:vim25", "HostHostBusAdapter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostParallelScsiHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostParallelScsiHba",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostBlockHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBlockHba",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFibreChannelHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFibreChannelHba",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"],
      ["portType", "SOAP::SOAPString"],
      ["speed", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaParamValue,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaParamValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]],
      ["isInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostInternetScsiHbaParamValue,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostInternetScsiHbaParamValue",
    :schema_element => [
      ["HostInternetScsiHbaParamValue", ["VimWs25::HostInternetScsiHbaParamValue[]", XSD::QName.new("urn:vim25", "HostInternetScsiHbaParamValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDiscoveryCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDiscoveryCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoverySettable", "SOAP::SOAPBoolean"],
      ["slpDiscoverySettable", "SOAP::SOAPBoolean"],
      ["staticTargetDiscoverySettable", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoverySettable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDiscoveryProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDiscoveryProperties",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["iSnsDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["iSnsHost", "SOAP::SOAPString", [0, 1]],
      ["slpDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["slpDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["slpHost", "SOAP::SOAPString", [0, 1]],
      ["staticTargetDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoveryEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaAuthenticationCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaAuthenticationCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["chapAuthSettable", "SOAP::SOAPBoolean"],
      ["krb5AuthSettable", "SOAP::SOAPBoolean"],
      ["srpAuthSettable", "SOAP::SOAPBoolean"],
      ["spkmAuthSettable", "SOAP::SOAPBoolean"],
      ["mutualChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetMutualChapSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaAuthenticationProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaAuthenticationProperties",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["chapAuthEnabled", "SOAP::SOAPBoolean"],
      ["chapName", "SOAP::SOAPString", [0, 1]],
      ["chapSecret", "SOAP::SOAPString", [0, 1]],
      ["chapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["chapInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["mutualChapName", "SOAP::SOAPString", [0, 1]],
      ["mutualChapSecret", "SOAP::SOAPString", [0, 1]],
      ["mutualChapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["mutualChapInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDigestCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDigestCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["headerDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetHeaderDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetDataDigestSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDigestProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDigestProperties",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["headerDigestType", "SOAP::SOAPString", [0, 1]],
      ["headerDigestInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestType", "SOAP::SOAPString", [0, 1]],
      ["dataDigestInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaIPCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaIPCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["addressSettable", "SOAP::SOAPBoolean"],
      ["ipConfigurationMethodSettable", "SOAP::SOAPBoolean"],
      ["subnetMaskSettable", "SOAP::SOAPBoolean"],
      ["defaultGatewaySettable", "SOAP::SOAPBoolean"],
      ["primaryDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["alternateDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["ipv6Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["arpRedirectSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["mtuSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["hostNameAsTargetAddress", "SOAP::SOAPBoolean", [0, 1]],
      ["nameAliasSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaIPProperties,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaIPProperties",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["dhcpConfigurationEnabled", "SOAP::SOAPBoolean"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["primaryDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["alternateDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["ipv6Address", "SOAP::SOAPString", [0, 1]],
      ["ipv6SubnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipv6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["arpRedirectEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["jumboFramesEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaSendTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaSendTarget",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VimWs25::OptionDef[]", [0, nil]],
      ["advancedOptions", "VimWs25::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostInternetScsiHbaSendTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostInternetScsiHbaSendTarget",
    :schema_element => [
      ["HostInternetScsiHbaSendTarget", ["VimWs25::HostInternetScsiHbaSendTarget[]", XSD::QName.new("urn:vim25", "HostInternetScsiHbaSendTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaStaticTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaStaticTarget",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["iScsiName", "SOAP::SOAPString"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VimWs25::OptionDef[]", [0, nil]],
      ["advancedOptions", "VimWs25::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostInternetScsiHbaStaticTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostInternetScsiHbaStaticTarget",
    :schema_element => [
      ["HostInternetScsiHbaStaticTarget", ["VimWs25::HostInternetScsiHbaStaticTarget[]", XSD::QName.new("urn:vim25", "HostInternetScsiHbaStaticTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaTargetSet,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaTargetSet",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["staticTargets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["sendTargets", "VimWs25::HostInternetScsiHbaSendTarget[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHba,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHba",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["isSoftwareBased", "SOAP::SOAPBoolean"],
      ["discoveryCapabilities", "VimWs25::HostInternetScsiHbaDiscoveryCapabilities"],
      ["discoveryProperties", "VimWs25::HostInternetScsiHbaDiscoveryProperties"],
      ["authenticationCapabilities", "VimWs25::HostInternetScsiHbaAuthenticationCapabilities"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties"],
      ["digestCapabilities", "VimWs25::HostInternetScsiHbaDigestCapabilities", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["ipCapabilities", "VimWs25::HostInternetScsiHbaIPCapabilities"],
      ["ipProperties", "VimWs25::HostInternetScsiHbaIPProperties"],
      ["supportedAdvancedOptions", "VimWs25::OptionDef[]", [0, nil]],
      ["advancedOptions", "VimWs25::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString", [0, 1]],
      ["configuredSendTarget", "VimWs25::HostInternetScsiHbaSendTarget[]", [0, nil]],
      ["configuredStaticTarget", "VimWs25::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["maxSpeedMb", "SOAP::SOAPInt", [0, 1]],
      ["currentSpeedMb", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProxySwitchSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProxySwitchSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["backing", "VimWs25::DistributedVirtualSwitchHostMemberBacking", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProxySwitchConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProxySwitchConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostProxySwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostProxySwitchConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostProxySwitchConfig",
    :schema_element => [
      ["HostProxySwitchConfig", ["VimWs25::HostProxySwitchConfig[]", XSD::QName.new("urn:vim25", "HostProxySwitchConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProxySwitch,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProxySwitch",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dvsUuid", "SOAP::SOAPString"],
      ["dvsName", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["uplinkPort", "VimWs25::KeyValue[]", [0, nil]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostProxySwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostProxySwitch,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostProxySwitch",
    :schema_element => [
      ["HostProxySwitch", ["VimWs25::HostProxySwitch[]", XSD::QName.new("urn:vim25", "HostProxySwitch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpConfigIpV6Address,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6Address",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["dadState", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]],
      ["operation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostIpConfigIpV6Address,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostIpConfigIpV6Address",
    :schema_element => [
      ["HostIpConfigIpV6Address", ["VimWs25::HostIpConfigIpV6Address[]", XSD::QName.new("urn:vim25", "HostIpConfigIpV6Address")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpConfigIpV6AddressConfiguration,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6AddressConfiguration",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipV6Address", "VimWs25::HostIpConfigIpV6Address[]", [0, nil]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["dhcpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipV6Config", "VimWs25::HostIpConfigIpV6AddressConfiguration", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpRouteConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpRouteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["gatewayDeviceConnection", "VimWs25::HostVirtualNicConnection", [0, 1]],
      ["ipV6GatewayDeviceConnection", "VimWs25::HostVirtualNicConnection", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpRouteEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteEntry",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "SOAP::SOAPString"],
      ["deviceName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostIpRouteEntry,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostIpRouteEntry",
    :schema_element => [
      ["HostIpRouteEntry", ["VimWs25::HostIpRouteEntry[]", XSD::QName.new("urn:vim25", "HostIpRouteEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpRouteOp,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteOp",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["route", "VimWs25::HostIpRouteEntry"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostIpRouteOp,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostIpRouteOp",
    :schema_element => [
      ["HostIpRouteOp", ["VimWs25::HostIpRouteOp[]", XSD::QName.new("urn:vim25", "HostIpRouteOp")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpRouteTableConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteTableConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::HostIpRouteOp[]", [0, nil]],
      ["ipv6Route", "VimWs25::HostIpRouteOp[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpRouteTableInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpRouteTableInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::HostIpRouteEntry[]", [0, nil]],
      ["ipv6Route", "VimWs25::HostIpRouteEntry[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpmiInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpmiInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["bmcIpAddress", "SOAP::SOAPString", [0, 1]],
      ["bmcMacAddress", "SOAP::SOAPString", [0, 1]],
      ["login", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::KernelModuleSectionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "KernelModuleSectionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::KernelModuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "KernelModuleInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"],
      ["optionString", "SOAP::SOAPString"],
      ["loaded", "SOAP::SOAPBoolean"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["useCount", "SOAP::SOAPInt"],
      ["readOnlySection", "VimWs25::KernelModuleSectionInfo"],
      ["writableSection", "VimWs25::KernelModuleSectionInfo"],
      ["textSection", "VimWs25::KernelModuleSectionInfo"],
      ["dataSection", "VimWs25::KernelModuleSectionInfo"],
      ["bssSection", "VimWs25::KernelModuleSectionInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfKernelModuleInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfKernelModuleInfo",
    :schema_element => [
      ["KernelModuleInfo", ["VimWs25::KernelModuleInfo[]", XSD::QName.new("urn:vim25", "KernelModuleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLicenseSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLicenseSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::LicenseSource", [0, 1]],
      ["editionKey", "SOAP::SOAPString", [0, 1]],
      ["disabledFeatureKey", "SOAP::SOAPString[]", [0, nil]],
      ["enabledFeatureKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LinkDiscoveryProtocolConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkDiscoveryProtocolConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["protocol", "SOAP::SOAPString"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostAccountSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostAccountSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostAccountSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostAccountSpec",
    :schema_element => [
      ["HostAccountSpec", ["VimWs25::HostAccountSpec[]", XSD::QName.new("urn:vim25", "HostAccountSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPosixAccountSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPosixAccountSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["posixId", "SOAP::SOAPInt", [0, 1]],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLocalAuthenticationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLocalAuthenticationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ServiceConsoleReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceConsoleReservationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservedCfg", "SOAP::SOAPLong"],
      ["serviceConsoleReserved", "SOAP::SOAPLong"],
      ["unreserved", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineMemoryReservationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMemoryReservationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualMachineMin", "SOAP::SOAPLong"],
      ["virtualMachineMax", "SOAP::SOAPLong"],
      ["virtualMachineReserved", "SOAP::SOAPLong"],
      ["allocationPolicy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineMemoryReservationSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMemoryReservationSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualMachineReserved", "SOAP::SOAPLong", [0, 1]],
      ["allocationPolicy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMemorySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMemorySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservation", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMountInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMountInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString", [0, 1]],
      ["accessMode", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathInfoLogicalUnitPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoLogicalUnitPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathInfoLogicalUnitStorageArrayTypePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoLogicalUnitStorageArrayTypePolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathInfoFixedLogicalUnitPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoFixedLogicalUnitPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"],
      ["prefer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathInfoLogicalUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoLogicalUnit",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "VimWs25::HostMultipathInfoPath[]", [1, nil]],
      ["policy", "VimWs25::HostMultipathInfoLogicalUnitPolicy"],
      ["storageArrayTypePolicy", "VimWs25::HostMultipathInfoLogicalUnitStorageArrayTypePolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostMultipathInfoLogicalUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostMultipathInfoLogicalUnit",
    :schema_element => [
      ["HostMultipathInfoLogicalUnit", ["VimWs25::HostMultipathInfoLogicalUnit[]", XSD::QName.new("urn:vim25", "HostMultipathInfoLogicalUnit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathInfoPath,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfoPath",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["isWorkingPath", "SOAP::SOAPBoolean", [0, 1]],
      ["adapter", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["transport", "VimWs25::HostTargetTransport", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostMultipathInfoPath,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostMultipathInfoPath",
    :schema_element => [
      ["HostMultipathInfoPath", ["VimWs25::HostMultipathInfoPath[]", XSD::QName.new("urn:vim25", "HostMultipathInfoPath")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["lun", "VimWs25::HostMultipathInfoLogicalUnit[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathStateInfoPath,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathStateInfoPath",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostMultipathStateInfoPath,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostMultipathStateInfoPath",
    :schema_element => [
      ["HostMultipathStateInfoPath", ["VimWs25::HostMultipathStateInfoPath[]", XSD::QName.new("urn:vim25", "HostMultipathStateInfoPath")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMultipathStateInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMultipathStateInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "VimWs25::HostMultipathStateInfoPath[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNatServicePortForwardSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServicePortForwardSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["hostPort", "SOAP::SOAPInt"],
      ["guestPort", "SOAP::SOAPInt"],
      ["guestIpAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostNatServicePortForwardSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostNatServicePortForwardSpec",
    :schema_element => [
      ["HostNatServicePortForwardSpec", ["VimWs25::HostNatServicePortForwardSpec[]", XSD::QName.new("urn:vim25", "HostNatServicePortForwardSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNatServiceNameServiceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServiceNameServiceSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dnsAutoDetect", "SOAP::SOAPBoolean"],
      ["dnsPolicy", "SOAP::SOAPString"],
      ["dnsRetries", "SOAP::SOAPInt"],
      ["dnsTimeout", "SOAP::SOAPInt"],
      ["dnsNameServer", "SOAP::SOAPString[]", [0, nil]],
      ["nbdsTimeout", "SOAP::SOAPInt"],
      ["nbnsRetries", "SOAP::SOAPInt"],
      ["nbnsTimeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNatServiceSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServiceSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["activeFtp", "SOAP::SOAPBoolean"],
      ["allowAnyOui", "SOAP::SOAPBoolean"],
      ["configPort", "SOAP::SOAPBoolean"],
      ["ipGatewayAddress", "SOAP::SOAPString"],
      ["udpTimeout", "SOAP::SOAPInt"],
      ["portForward", "VimWs25::HostNatServicePortForwardSpec[]", [0, nil]],
      ["nameService", "VimWs25::HostNatServiceNameServiceSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNatServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatServiceConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostNatServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostNatServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostNatServiceConfig",
    :schema_element => [
      ["HostNatServiceConfig", ["VimWs25::HostNatServiceConfig[]", XSD::QName.new("urn:vim25", "HostNatServiceConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNatService,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNatService",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostNatServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostNatService,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostNatService",
    :schema_element => [
      ["HostNatService", ["VimWs25::HostNatService[]", XSD::QName.new("urn:vim25", "HostNatService")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["canSetPhysicalNicLinkSpeed", "SOAP::SOAPBoolean"],
      ["supportsNicTeaming", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["supportsVlan", "SOAP::SOAPBoolean"],
      ["usesServiceConsoleNic", "SOAP::SOAPBoolean"],
      ["supportsNetworkHints", "SOAP::SOAPBoolean"],
      ["maxPortGroupsPerVswitch", "SOAP::SOAPInt", [0, 1]],
      ["vswitchConfigSupported", "SOAP::SOAPBoolean"],
      ["vnicConfigSupported", "SOAP::SOAPBoolean"],
      ["ipRouteConfigSupported", "SOAP::SOAPBoolean"],
      ["dnsConfigSupported", "SOAP::SOAPBoolean"],
      ["dhcpOnVnicSupported", "SOAP::SOAPBoolean"],
      ["ipV6Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetOffloadCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetOffloadCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["csumOffload", "SOAP::SOAPBoolean", [0, 1]],
      ["tcpSegmentation", "SOAP::SOAPBoolean", [0, 1]],
      ["zeroCopyXmit", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetworkConfigResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkConfigResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vnicDevice", "SOAP::SOAPString[]", [0, nil]],
      ["consoleVnicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetworkConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vswitch", "VimWs25::HostVirtualSwitchConfig[]", [0, nil]],
      ["proxySwitch", "VimWs25::HostProxySwitchConfig[]", [0, nil]],
      ["portgroup", "VimWs25::HostPortGroupConfig[]", [0, nil]],
      ["pnic", "VimWs25::PhysicalNicConfig[]", [0, nil]],
      ["vnic", "VimWs25::HostVirtualNicConfig[]", [0, nil]],
      ["consoleVnic", "VimWs25::HostVirtualNicConfig[]", [0, nil]],
      ["dnsConfig", "VimWs25::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["routeTableConfig", "VimWs25::HostIpRouteTableConfig", [0, 1]],
      ["dhcp", "VimWs25::HostDhcpServiceConfig[]", [0, nil]],
      ["nat", "VimWs25::HostNatServiceConfig[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vswitch", "VimWs25::HostVirtualSwitch[]", [0, nil]],
      ["proxySwitch", "VimWs25::HostProxySwitch[]", [0, nil]],
      ["portgroup", "VimWs25::HostPortGroup[]", [0, nil]],
      ["pnic", "VimWs25::PhysicalNic[]", [0, nil]],
      ["vnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["consoleVnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["dnsConfig", "VimWs25::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VimWs25::HostIpRouteConfig", [0, 1]],
      ["routeTableInfo", "VimWs25::HostIpRouteTableInfo", [0, 1]],
      ["dhcp", "VimWs25::HostDhcpService[]", [0, nil]],
      ["nat", "VimWs25::HostNatService[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["atBootIpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetworkSecurityPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkSecurityPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["allowPromiscuous", "SOAP::SOAPBoolean", [0, 1]],
      ["macChanges", "SOAP::SOAPBoolean", [0, 1]],
      ["forgedTransmits", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetworkTrafficShapingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkTrafficShapingPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["averageBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["peakBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNicFailureCriteria,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNicFailureCriteria",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["checkSpeed", "SOAP::SOAPString", [0, 1]],
      ["speed", "SOAP::SOAPInt", [0, 1]],
      ["checkDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["checkErrorPercent", "SOAP::SOAPBoolean", [0, 1]],
      ["percentage", "SOAP::SOAPInt", [0, 1]],
      ["checkBeacon", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNicOrderPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNicOrderPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeNic", "SOAP::SOAPString[]", [0, nil]],
      ["standbyNic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNicTeamingPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNicTeamingPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString", [0, 1]],
      ["reversePolicy", "SOAP::SOAPBoolean", [0, 1]],
      ["notifySwitches", "SOAP::SOAPBoolean", [0, 1]],
      ["rollingOrder", "SOAP::SOAPBoolean", [0, 1]],
      ["failureCriteria", "VimWs25::HostNicFailureCriteria", [0, 1]],
      ["nicOrder", "VimWs25::HostNicOrderPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNetworkPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNetworkPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["security", "VimWs25::HostNetworkSecurityPolicy", [0, 1]],
      ["nicTeaming", "VimWs25::HostNicTeamingPolicy", [0, 1]],
      ["offloadPolicy", "VimWs25::HostNetOffloadCapabilities", [0, 1]],
      ["shapingPolicy", "VimWs25::HostNetworkTrafficShapingPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNtpConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNtpConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["server", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNumericSensorInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumericSensorInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["healthState", "VimWs25::ElementDescription", [0, 1]],
      ["currentReading", "SOAP::SOAPLong"],
      ["unitModifier", "SOAP::SOAPInt"],
      ["baseUnits", "SOAP::SOAPString"],
      ["rateUnits", "SOAP::SOAPString", [0, 1]],
      ["sensorType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostNumericSensorInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostNumericSensorInfo",
    :schema_element => [
      ["HostNumericSensorInfo", ["VimWs25::HostNumericSensorInfo[]", XSD::QName.new("urn:vim25", "HostNumericSensorInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["status", "VimWs25::HostPatchManagerStatus[]", [0, nil]],
      ["xmlResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerStatusPrerequisitePatch,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerStatusPrerequisitePatch",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["installState", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPatchManagerStatusPrerequisitePatch,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPatchManagerStatusPrerequisitePatch",
    :schema_element => [
      ["HostPatchManagerStatusPrerequisitePatch", ["VimWs25::HostPatchManagerStatusPrerequisitePatch[]", XSD::QName.new("urn:vim25", "HostPatchManagerStatusPrerequisitePatch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerStatus",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["applicable", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString[]", [0, nil]],
      ["integrity", "SOAP::SOAPString", [0, 1]],
      ["installed", "SOAP::SOAPBoolean"],
      ["installState", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisitePatch", "VimWs25::HostPatchManagerStatusPrerequisitePatch[]", [0, nil]],
      ["restartRequired", "SOAP::SOAPBoolean"],
      ["reconnectRequired", "SOAP::SOAPBoolean"],
      ["vmOffRequired", "SOAP::SOAPBoolean"],
      ["supersededPatchIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPatchManagerStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPatchManagerStatus",
    :schema_element => [
      ["HostPatchManagerStatus", ["VimWs25::HostPatchManagerStatus[]", XSD::QName.new("urn:vim25", "HostPatchManagerStatus")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerLocator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["proxy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerPatchManagerOperationSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerPatchManagerOperationSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["proxy", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["cmdOption", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPathSelectionPolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPathSelectionPolicyOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "VimWs25::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPathSelectionPolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPathSelectionPolicyOption",
    :schema_element => [
      ["HostPathSelectionPolicyOption", ["VimWs25::HostPathSelectionPolicyOption[]", XSD::QName.new("urn:vim25", "HostPathSelectionPolicyOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPciDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPciDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["classId", "SOAP::SOAPShort"],
      ["bus", "SOAP::SOAPByte"],
      ["slot", "SOAP::SOAPByte"],
      ["function", "SOAP::SOAPByte"],
      ["vendorId", "SOAP::SOAPShort"],
      ["subVendorId", "SOAP::SOAPShort"],
      ["vendorName", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPShort"],
      ["subDeviceId", "SOAP::SOAPShort"],
      ["parentBridge", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPciDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPciDevice",
    :schema_element => [
      ["HostPciDevice", ["VimWs25::HostPciDevice[]", XSD::QName.new("urn:vim25", "HostPciDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPciPassthruConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPciPassthruConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPciPassthruConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPciPassthruConfig",
    :schema_element => [
      ["HostPciPassthruConfig", ["VimWs25::HostPciPassthruConfig[]", XSD::QName.new("urn:vim25", "HostPciPassthruConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPciPassthruInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPciPassthruInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["dependentDevice", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"],
      ["passthruCapable", "SOAP::SOAPBoolean"],
      ["passthruActive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPciPassthruInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPciPassthruInfo",
    :schema_element => [
      ["HostPciPassthruInfo", ["VimWs25::HostPciPassthruInfo[]", XSD::QName.new("urn:vim25", "HostPciPassthruInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::HostIpConfig", [0, 1]],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["spec", "VimWs25::PhysicalNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNicConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNicConfig",
    :schema_element => [
      ["PhysicalNicConfig", ["VimWs25::PhysicalNicConfig[]", XSD::QName.new("urn:vim25", "PhysicalNicConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicLinkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicLinkInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["speedMb", "SOAP::SOAPInt"],
      ["duplex", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNicLinkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNicLinkInfo",
    :schema_element => [
      ["PhysicalNicLinkInfo", ["VimWs25::PhysicalNicLinkInfo[]", XSD::QName.new("urn:vim25", "PhysicalNicLinkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicHint,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicHint",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicIpHint,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicIpHint",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["ipSubnet", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNicIpHint,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNicIpHint",
    :schema_element => [
      ["PhysicalNicIpHint", ["VimWs25::PhysicalNicIpHint[]", XSD::QName.new("urn:vim25", "PhysicalNicIpHint")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicNameHint,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicNameHint",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNicNameHint,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNicNameHint",
    :schema_element => [
      ["PhysicalNicNameHint", ["VimWs25::PhysicalNicNameHint[]", XSD::QName.new("urn:vim25", "PhysicalNicNameHint")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicHintInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicHintInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["subnet", "VimWs25::PhysicalNicIpHint[]", [0, nil]],
      ["network", "VimWs25::PhysicalNicNameHint[]", [0, nil]],
      ["connectedSwitchPort", "VimWs25::PhysicalNicCdpInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNicHintInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNicHintInfo",
    :schema_element => [
      ["PhysicalNicHintInfo", ["VimWs25::PhysicalNicHintInfo[]", XSD::QName.new("urn:vim25", "PhysicalNicHintInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicCdpDeviceCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicCdpDeviceCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["router", "SOAP::SOAPBoolean"],
      ["transparentBridge", "SOAP::SOAPBoolean"],
      ["sourceRouteBridge", "SOAP::SOAPBoolean"],
      ["networkSwitch", "SOAP::SOAPBoolean"],
      ["host", "SOAP::SOAPBoolean"],
      ["igmpEnabled", "SOAP::SOAPBoolean"],
      ["repeater", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicCdpInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicCdpInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["cdpVersion", "SOAP::SOAPInt", [0, 1]],
      ["timeout", "SOAP::SOAPInt", [0, 1]],
      ["ttl", "SOAP::SOAPInt", [0, 1]],
      ["samples", "SOAP::SOAPInt", [0, 1]],
      ["devId", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["portId", "SOAP::SOAPString", [0, 1]],
      ["deviceCapability", "VimWs25::PhysicalNicCdpDeviceCapability", [0, 1]],
      ["softwareVersion", "SOAP::SOAPString", [0, 1]],
      ["hardwarePlatform", "SOAP::SOAPString", [0, 1]],
      ["ipPrefix", "SOAP::SOAPString", [0, 1]],
      ["ipPrefixLen", "SOAP::SOAPInt", [0, 1]],
      ["vlan", "SOAP::SOAPInt", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["systemName", "SOAP::SOAPString", [0, 1]],
      ["systemOID", "SOAP::SOAPString", [0, 1]],
      ["mgmtAddr", "SOAP::SOAPString", [0, 1]],
      ["location", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNic,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNic",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["pci", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]],
      ["validLinkSpecification", "VimWs25::PhysicalNicLinkInfo[]", [0, nil]],
      ["spec", "VimWs25::PhysicalNicSpec"],
      ["wakeOnLanSupported", "SOAP::SOAPBoolean"],
      ["mac", "SOAP::SOAPString"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2SupportedMode", "SOAP::SOAPString", [0, 1]],
      ["resourcePoolSchedulerAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["resourcePoolSchedulerDisallowedReason", "SOAP::SOAPString[]", [0, nil]],
      ["autoNegotiateSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNic,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNic",
    :schema_element => [
      ["PhysicalNic", ["VimWs25::PhysicalNic[]", XSD::QName.new("urn:vim25", "PhysicalNic")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyAdapter,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyAdapter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPlugStoreTopologyAdapter,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPlugStoreTopologyAdapter",
    :schema_element => [
      ["HostPlugStoreTopologyAdapter", ["VimWs25::HostPlugStoreTopologyAdapter[]", XSD::QName.new("urn:vim25", "HostPlugStoreTopologyAdapter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyPath,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyPath",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["channelNumber", "SOAP::SOAPInt", [0, 1]],
      ["targetNumber", "SOAP::SOAPInt", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]],
      ["adapter", "SOAP::SOAPString", [0, 1]],
      ["target", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPlugStoreTopologyPath,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPlugStoreTopologyPath",
    :schema_element => [
      ["HostPlugStoreTopologyPath", ["VimWs25::HostPlugStoreTopologyPath[]", XSD::QName.new("urn:vim25", "HostPlugStoreTopologyPath")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPlugStoreTopologyDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPlugStoreTopologyDevice",
    :schema_element => [
      ["HostPlugStoreTopologyDevice", ["VimWs25::HostPlugStoreTopologyDevice[]", XSD::QName.new("urn:vim25", "HostPlugStoreTopologyDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyPlugin,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyPlugin",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString[]", [0, nil]],
      ["claimedPath", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPlugStoreTopologyPlugin,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPlugStoreTopologyPlugin",
    :schema_element => [
      ["HostPlugStoreTopologyPlugin", ["VimWs25::HostPlugStoreTopologyPlugin[]", XSD::QName.new("urn:vim25", "HostPlugStoreTopologyPlugin")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPlugStoreTopologyTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopologyTarget",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["transport", "VimWs25::HostTargetTransport", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPlugStoreTopologyTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPlugStoreTopologyTarget",
    :schema_element => [
      ["HostPlugStoreTopologyTarget", ["VimWs25::HostPlugStoreTopologyTarget[]", XSD::QName.new("urn:vim25", "HostPlugStoreTopologyTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPlugStoreTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPlugStoreTopology",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["adapter", "VimWs25::HostPlugStoreTopologyAdapter[]", [0, nil]],
      ["path", "VimWs25::HostPlugStoreTopologyPath[]", [0, nil]],
      ["target", "VimWs25::HostPlugStoreTopologyTarget[]", [0, nil]],
      ["device", "VimWs25::HostPlugStoreTopologyDevice[]", [0, nil]],
      ["plugin", "VimWs25::HostPlugStoreTopologyPlugin[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPortGroupSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vlanId", "SOAP::SOAPInt"],
      ["vswitchName", "SOAP::SOAPString"],
      ["policy", "VimWs25::HostNetworkPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPortGroupConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VimWs25::HostPortGroupSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPortGroupConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPortGroupConfig",
    :schema_element => [
      ["HostPortGroupConfig", ["VimWs25::HostPortGroupConfig[]", XSD::QName.new("urn:vim25", "HostPortGroupConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPortGroupPort,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupPort",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["mac", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPortGroupPort,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPortGroupPort",
    :schema_element => [
      ["HostPortGroupPort", ["VimWs25::HostPortGroupPort[]", XSD::QName.new("urn:vim25", "HostPortGroupPort")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPortGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroup",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["port", "VimWs25::HostPortGroupPort[]", [0, nil]],
      ["vswitch", "SOAP::SOAPString", [0, 1]],
      ["computedPolicy", "VimWs25::HostNetworkPolicy"],
      ["spec", "VimWs25::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPortGroup,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPortGroup",
    :schema_element => [
      ["HostPortGroup", ["VimWs25::HostPortGroup[]", XSD::QName.new("urn:vim25", "HostPortGroup")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPowerPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPowerPolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["shortName", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPowerPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPowerPolicy",
    :schema_element => [
      ["HostPowerPolicy", ["VimWs25::HostPowerPolicy[]", XSD::QName.new("urn:vim25", "HostPowerPolicy")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerSystemCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerSystemCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["availablePolicy", "VimWs25::HostPowerPolicy[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerSystemInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "PowerSystemInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "VimWs25::HostPowerPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostResignatureRescanResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostResignatureRescanResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["rescan", "VimWs25::HostVmfsRescanResult[]", [0, nil]],
      ["result", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallRule,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRule",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["endPort", "SOAP::SOAPInt", [0, 1]],
      ["direction", "SOAP::SOAPString"],
      ["protocol", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostFirewallRule,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostFirewallRule",
    :schema_element => [
      ["HostFirewallRule", ["VimWs25::HostFirewallRule[]", XSD::QName.new("urn:vim25", "HostFirewallRule")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallRuleset,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRuleset",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["rule", "VimWs25::HostFirewallRule[]", [1, nil]],
      ["service", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostFirewallRuleset,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostFirewallRuleset",
    :schema_element => [
      ["HostFirewallRuleset", ["VimWs25::HostFirewallRuleset[]", XSD::QName.new("urn:vim25", "HostFirewallRuleset")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostRuntimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["connectionState", "SOAP::SOAPString"],
      ["powerState", "SOAP::SOAPString"],
      ["standbyMode", "SOAP::SOAPString", [0, 1]],
      ["inMaintenanceMode", "SOAP::SOAPBoolean"],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["healthSystemRuntime", "VimWs25::HealthSystemRuntime", [0, 1]],
      ["tpmPcrValues", "VimWs25::HostTpmDigestInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostScsiDiskPartition,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiDiskPartition",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["partition", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostScsiDiskPartition,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostScsiDiskPartition",
    :schema_element => [
      ["HostScsiDiskPartition", ["VimWs25::HostScsiDiskPartition[]", XSD::QName.new("urn:vim25", "HostScsiDiskPartition")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostScsiDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VimWs25::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VimWs25::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VimWs25::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VimWs25::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]],
      ["capacity", "VimWs25::HostDiskDimensionsLba"],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostScsiDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostScsiDisk",
    :schema_element => [
      ["HostScsiDisk", ["VimWs25::HostScsiDisk[]", XSD::QName.new("urn:vim25", "HostScsiDisk")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunCapabilities,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunCapabilities",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["updateDisplayNameSupported", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunDurableName,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunDurableName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["namespace", "SOAP::SOAPString"],
      ["namespaceId", "SOAP::SOAPByte"],
      ["data", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfScsiLunDurableName,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfScsiLunDurableName",
    :schema_element => [
      ["ScsiLunDurableName", ["VimWs25::ScsiLunDurableName[]", XSD::QName.new("urn:vim25", "ScsiLunDurableName")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunDescriptor",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["quality", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfScsiLunDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfScsiLunDescriptor",
    :schema_element => [
      ["ScsiLunDescriptor", ["VimWs25::ScsiLunDescriptor[]", XSD::QName.new("urn:vim25", "ScsiLunDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLun,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLun",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VimWs25::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VimWs25::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VimWs25::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VimWs25::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfScsiLun,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfScsiLun",
    :schema_element => [
      ["ScsiLun", ["VimWs25::ScsiLun[]", XSD::QName.new("urn:vim25", "ScsiLun")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostScsiTopologyInterface,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopologyInterface",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["target", "VimWs25::HostScsiTopologyTarget[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostScsiTopologyInterface,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostScsiTopologyInterface",
    :schema_element => [
      ["HostScsiTopologyInterface", ["VimWs25::HostScsiTopologyInterface[]", XSD::QName.new("urn:vim25", "HostScsiTopologyInterface")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostScsiTopologyTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopologyTarget",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["target", "SOAP::SOAPInt"],
      ["lun", "VimWs25::HostScsiTopologyLun[]", [0, nil]],
      ["transport", "VimWs25::HostTargetTransport", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostScsiTopologyTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostScsiTopologyTarget",
    :schema_element => [
      ["HostScsiTopologyTarget", ["VimWs25::HostScsiTopologyTarget[]", XSD::QName.new("urn:vim25", "HostScsiTopologyTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostScsiTopologyLun,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopologyLun",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPInt"],
      ["scsiLun", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostScsiTopologyLun,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostScsiTopologyLun",
    :schema_element => [
      ["HostScsiTopologyLun", ["VimWs25::HostScsiTopologyLun[]", XSD::QName.new("urn:vim25", "HostScsiTopologyLun")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostScsiTopology,
    :schema_ns => "urn:vim25",
    :schema_type => "HostScsiTopology",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["adapter", "VimWs25::HostScsiTopologyInterface[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSecuritySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSecuritySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["adminPassword", "SOAP::SOAPString", [0, 1]],
      ["removePermission", "VimWs25::Permission[]", [0, nil]],
      ["addPermission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostService,
    :schema_ns => "urn:vim25",
    :schema_type => "HostService",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["uninstallable", "SOAP::SOAPBoolean"],
      ["running", "SOAP::SOAPBoolean"],
      ["ruleset", "SOAP::SOAPString[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostService,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostService",
    :schema_element => [
      ["HostService", ["VimWs25::HostService[]", XSD::QName.new("urn:vim25", "HostService")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServiceConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceId", "SOAP::SOAPString"],
      ["startupPolicy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostServiceConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostServiceConfig",
    :schema_element => [
      ["HostServiceConfig", ["VimWs25::HostServiceConfig[]", XSD::QName.new("urn:vim25", "HostServiceConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostServiceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServiceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["service", "VimWs25::HostService[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSnmpDestination,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpDestination",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["community", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostSnmpDestination,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostSnmpDestination",
    :schema_element => [
      ["HostSnmpDestination", ["VimWs25::HostSnmpDestination[]", XSD::QName.new("urn:vim25", "HostSnmpDestination")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSnmpConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["readOnlyCommunities", "SOAP::SOAPString[]", [0, nil]],
      ["trapTargets", "VimWs25::HostSnmpDestination[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSnmpSystemAgentLimits,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpSystemAgentLimits",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["maxReadOnlyCommunities", "SOAP::SOAPInt"],
      ["maxTrapDestinations", "SOAP::SOAPInt"],
      ["maxCommunityLength", "SOAP::SOAPInt"],
      ["maxBufferSize", "SOAP::SOAPInt"],
      ["capability", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSslThumbprintInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSslThumbprintInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["sslThumbprints", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostStorageArrayTypePolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageArrayTypePolicyOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["policy", "VimWs25::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostStorageArrayTypePolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostStorageArrayTypePolicyOption",
    :schema_element => [
      ["HostStorageArrayTypePolicyOption", ["VimWs25::HostStorageArrayTypePolicyOption[]", XSD::QName.new("urn:vim25", "HostStorageArrayTypePolicyOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostStorageDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStorageDeviceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostBusAdapter", "VimWs25::HostHostBusAdapter[]", [0, nil]],
      ["scsiLun", "VimWs25::ScsiLun[]", [0, nil]],
      ["scsiTopology", "VimWs25::HostScsiTopology", [0, 1]],
      ["multipathInfo", "VimWs25::HostMultipathInfo", [0, 1]],
      ["plugStoreTopology", "VimWs25::HostPlugStoreTopology", [0, 1]],
      ["softwareInternetScsiEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHardwareSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VimWs25::HostSystemIdentificationInfo[]", [0, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["cpuModel", "SOAP::SOAPString"],
      ["cpuMhz", "SOAP::SOAPInt"],
      ["numCpuPkgs", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["numNics", "SOAP::SOAPInt"],
      ["numHBAs", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostListSummaryQuickStats,
    :schema_ns => "urn:vim25",
    :schema_type => "HostListSummaryQuickStats",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["distributedCpuFairness", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryFairness", "SOAP::SOAPInt", [0, 1]],
      ["uptime", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["product", "VimWs25::AboutInfo", [0, 1]],
      ["vmotionEnabled", "SOAP::SOAPBoolean"],
      ["faultToleranceEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["featureVersion", "VimWs25::HostFeatureVersionInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostListSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "HostListSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["hardware", "VimWs25::HostHardwareSummary", [0, 1]],
      ["runtime", "VimWs25::HostRuntimeInfo", [0, 1]],
      ["config", "VimWs25::HostConfigSummary"],
      ["quickStats", "VimWs25::HostListSummaryQuickStats"],
      ["overallStatus", "SOAP::SOAPString"],
      ["rebootRequired", "SOAP::SOAPBoolean"],
      ["customValue", "VimWs25::CustomFieldValue[]", [0, nil]],
      ["managementServerIp", "SOAP::SOAPString", [0, 1]],
      ["maxEVCModeKey", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemHealthInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemHealthInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numericSensorInfo", "VimWs25::HostNumericSensorInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemIdentificationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemIdentificationInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["identifierValue", "SOAP::SOAPString"],
      ["identifierType", "VimWs25::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostSystemIdentificationInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostSystemIdentificationInfo",
    :schema_element => [
      ["HostSystemIdentificationInfo", ["VimWs25::HostSystemIdentificationInfo[]", XSD::QName.new("urn:vim25", "HostSystemIdentificationInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemResourceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemResourceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["child", "VimWs25::HostSystemResourceInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostSystemResourceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostSystemResourceInfo",
    :schema_element => [
      ["HostSystemResourceInfo", ["VimWs25::HostSystemResourceInfo[]", XSD::QName.new("urn:vim25", "HostSystemResourceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostTargetTransport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostParallelScsiTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostParallelScsiTargetTransport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostBlockAdapterTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostBlockAdapterTargetTransport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFibreChannelTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFibreChannelTargetTransport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiTargetTransport,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiTargetTransport",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDigestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDigestInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostTpmDigestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostTpmDigestInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["pcrNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostTpmDigestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostTpmDigestInfo",
    :schema_element => [
      ["HostTpmDigestInfo", ["VimWs25::HostTpmDigestInfo[]", XSD::QName.new("urn:vim25", "HostTpmDigestInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsExtent,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsExtent",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "VimWs25::HostScsiDiskPartition"],
      ["devicePath", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["isHeadExtent", "SOAP::SOAPBoolean"],
      ["ordinal", "SOAP::SOAPInt"],
      ["startBlock", "SOAP::SOAPInt"],
      ["endBlock", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostUnresolvedVmfsExtent,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostUnresolvedVmfsExtent",
    :schema_element => [
      ["HostUnresolvedVmfsExtent", ["VimWs25::HostUnresolvedVmfsExtent[]", XSD::QName.new("urn:vim25", "HostUnresolvedVmfsExtent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResignatureSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResignatureSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResolutionResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResolutionResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["spec", "VimWs25::HostUnresolvedVmfsResolutionSpec"],
      ["vmfs", "VimWs25::HostVmfsVolume", [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostUnresolvedVmfsResolutionResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostUnresolvedVmfsResolutionResult",
    :schema_element => [
      ["HostUnresolvedVmfsResolutionResult", ["VimWs25::HostUnresolvedVmfsResolutionResult[]", XSD::QName.new("urn:vim25", "HostUnresolvedVmfsResolutionResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResolutionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResolutionSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]],
      ["uuidResolution", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostUnresolvedVmfsResolutionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostUnresolvedVmfsResolutionSpec",
    :schema_element => [
      ["HostUnresolvedVmfsResolutionSpec", ["VimWs25::HostUnresolvedVmfsResolutionSpec[]", XSD::QName.new("urn:vim25", "HostUnresolvedVmfsResolutionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsVolumeResolveStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsVolumeResolveStatus",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["resolvable", "SOAP::SOAPBoolean"],
      ["incompleteExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["multipleCopies", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsVolume",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extent", "VimWs25::HostUnresolvedVmfsExtent[]", [1, nil]],
      ["vmfsLabel", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["totalBlocks", "SOAP::SOAPInt"],
      ["resolveStatus", "VimWs25::HostUnresolvedVmfsVolumeResolveStatus"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostUnresolvedVmfsVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostUnresolvedVmfsVolume",
    :schema_element => [
      ["HostUnresolvedVmfsVolume", ["VimWs25::HostUnresolvedVmfsVolume[]", XSD::QName.new("urn:vim25", "HostUnresolvedVmfsVolume")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVMotionConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmotionNicKey", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVMotionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["netConfig", "VimWs25::HostVMotionNetConfig", [0, 1]],
      ["ipConfig", "VimWs25::HostIpConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVMotionNetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVMotionNetConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["candidateVnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNicSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::HostIpConfig", [0, 1]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["distributedVirtualPort", "VimWs25::DistributedVirtualSwitchPortConnection", [0, 1]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["tsoEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNicConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualNicSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVirtualNicConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVirtualNicConfig",
    :schema_element => [
      ["HostVirtualNicConfig", ["VimWs25::HostVirtualNicConfig[]", XSD::QName.new("urn:vim25", "HostVirtualNicConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNic,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNic",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualNicSpec"],
      ["port", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVirtualNic,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVirtualNic",
    :schema_element => [
      ["HostVirtualNic", ["VimWs25::HostVirtualNic[]", XSD::QName.new("urn:vim25", "HostVirtualNic")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNicConnection,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicConnection",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["dvPort", "VimWs25::DistributedVirtualSwitchPortConnection", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNicManagerNicTypeSelection,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicManagerNicTypeSelection",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vnic", "VimWs25::HostVirtualNicConnection"],
      ["nicType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVirtualNicManagerNicTypeSelection,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVirtualNicManagerNicTypeSelection",
    :schema_element => [
      ["HostVirtualNicManagerNicTypeSelection", ["VimWs25::HostVirtualNicManagerNicTypeSelection[]", XSD::QName.new("urn:vim25", "HostVirtualNicManagerNicTypeSelection")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualNicManagerNetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualNicManagerNetConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nicType", "SOAP::SOAPString"],
      ["multiSelectAllowed", "SOAP::SOAPBoolean"],
      ["candidateVnic", "VimWs25::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualNicManagerNetConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualNicManagerNetConfig",
    :schema_element => [
      ["VirtualNicManagerNetConfig", ["VimWs25::VirtualNicManagerNetConfig[]", XSD::QName.new("urn:vim25", "VirtualNicManagerNetConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNicManagerInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicManagerInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["netConfig", "VimWs25::VirtualNicManagerNetConfig[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchBridge",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchAutoBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchAutoBridge",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["excludedNicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchSimpleBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchSimpleBridge",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchBondBridge,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchBondBridge",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString[]", [1, nil]],
      ["beacon", "VimWs25::HostVirtualSwitchBeaconConfig", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VimWs25::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchBeaconConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchBeaconConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numPorts", "SOAP::SOAPInt"],
      ["bridge", "VimWs25::HostVirtualSwitchBridge", [0, 1]],
      ["policy", "VimWs25::HostNetworkPolicy", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitchConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitchConfig",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVirtualSwitchConfig,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVirtualSwitchConfig",
    :schema_element => [
      ["HostVirtualSwitchConfig", ["VimWs25::HostVirtualSwitchConfig[]", XSD::QName.new("urn:vim25", "HostVirtualSwitchConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualSwitch,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualSwitch",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["portgroup", "SOAP::SOAPString[]", [0, nil]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostVirtualSwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVirtualSwitch,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVirtualSwitch",
    :schema_element => [
      ["HostVirtualSwitch", ["VimWs25::HostVirtualSwitch[]", XSD::QName.new("urn:vim25", "HostVirtualSwitch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVmfsRescanResult,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVmfsRescanResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostVmfsRescanResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostVmfsRescanResult",
    :schema_element => [
      ["HostVmfsRescanResult", ["VimWs25::HostVmfsRescanResult[]", XSD::QName.new("urn:vim25", "HostVmfsRescanResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVmfsSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVmfsSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["extent", "VimWs25::HostScsiDiskPartition"],
      ["blockSizeMb", "SOAP::SOAPInt", [0, 1]],
      ["majorVersion", "SOAP::SOAPInt"],
      ["volumeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVmfsVolume,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVmfsVolume",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["blockSizeMb", "SOAP::SOAPInt"],
      ["maxBlocks", "SOAP::SOAPInt"],
      ["majorVersion", "SOAP::SOAPInt"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition[]", [1, nil]],
      ["vmfsUpgradable", "SOAP::SOAPBoolean"],
      ["forceMountedInfo", "VimWs25::HostForceMountedInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetDhcpConfigInfoDhcpOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigInfoDhcpOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean"],
      ["config", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetDhcpConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipv6", "VimWs25::NetDhcpConfigInfoDhcpOptions", [0, 1]],
      ["ipv4", "VimWs25::NetDhcpConfigInfoDhcpOptions", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetDhcpConfigSpecDhcpOptionsSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigSpecDhcpOptionsSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean", [0, 1]],
      ["config", "VimWs25::KeyValue[]", [1, nil]],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetDhcpConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDhcpConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipv6", "VimWs25::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]],
      ["ipv4", "VimWs25::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetDnsConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDnsConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetDnsConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetDnsConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpConfigInfoIpAddress,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfoIpAddress",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNetIpConfigInfoIpAddress,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNetIpConfigInfoIpAddress",
    :schema_element => [
      ["NetIpConfigInfoIpAddress", ["VimWs25::NetIpConfigInfoIpAddress[]", XSD::QName.new("urn:vim25", "NetIpConfigInfoIpAddress")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VimWs25::NetIpConfigInfoIpAddress[]", [0, nil]],
      ["dhcp", "VimWs25::NetDhcpConfigInfo", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpConfigSpecIpAddressSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigSpecIpAddressSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNetIpConfigSpecIpAddressSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNetIpConfigSpecIpAddressSpec",
    :schema_element => [
      ["NetIpConfigSpecIpAddressSpec", ["VimWs25::NetIpConfigSpecIpAddressSpec[]", XSD::QName.new("urn:vim25", "NetIpConfigSpecIpAddressSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VimWs25::NetIpConfigSpecIpAddressSpec[]", [0, nil]],
      ["dhcp", "VimWs25::NetDhcpConfigSpec", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpRouteConfigInfoGateway,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigInfoGateway",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpRouteConfigInfoIpRoute,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigInfoIpRoute",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VimWs25::NetIpRouteConfigInfoGateway"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNetIpRouteConfigInfoIpRoute,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNetIpRouteConfigInfoIpRoute",
    :schema_element => [
      ["NetIpRouteConfigInfoIpRoute", ["VimWs25::NetIpRouteConfigInfoIpRoute[]", XSD::QName.new("urn:vim25", "NetIpRouteConfigInfoIpRoute")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpRouteConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::NetIpRouteConfigInfoIpRoute[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpRouteConfigSpecGatewaySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigSpecGatewaySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpRouteConfigSpecIpRouteSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigSpecIpRouteSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VimWs25::NetIpRouteConfigSpecGatewaySpec"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNetIpRouteConfigSpecIpRouteSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNetIpRouteConfigSpecIpRouteSpec",
    :schema_element => [
      ["NetIpRouteConfigSpecIpRouteSpec", ["VimWs25::NetIpRouteConfigSpecIpRouteSpec[]", XSD::QName.new("urn:vim25", "NetIpRouteConfigSpecIpRouteSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpRouteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpRouteConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VimWs25::NetIpRouteConfigSpecIpRouteSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpStackInfoNetToMedia,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoNetToMedia",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["physicalAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNetIpStackInfoNetToMedia,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNetIpStackInfoNetToMedia",
    :schema_element => [
      ["NetIpStackInfoNetToMedia", ["VimWs25::NetIpStackInfoNetToMedia[]", XSD::QName.new("urn:vim25", "NetIpStackInfoNetToMedia")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpStackInfoDefaultRouter,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoDefaultRouter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["lifetime", "SOAP::SOAPDateTime"],
      ["preference", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNetIpStackInfoDefaultRouter,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNetIpStackInfoDefaultRouter",
    :schema_element => [
      ["NetIpStackInfoDefaultRouter", ["VimWs25::NetIpStackInfoDefaultRouter[]", XSD::QName.new("urn:vim25", "NetIpStackInfoDefaultRouter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpStackInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["neighbor", "VimWs25::NetIpStackInfoNetToMedia[]", [0, nil]],
      ["defaultRouter", "VimWs25::NetIpStackInfoDefaultRouter[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetBIOSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "NetBIOSConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WinNetBIOSConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "WinNetBIOSConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"],
      ["primaryWINS", "SOAP::SOAPString"],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayUpdateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayUpdateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BoolOption,
    :schema_ns => "urn:vim25",
    :schema_type => "BoolOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["supported", "SOAP::SOAPBoolean"],
      ["defaultValue", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ChoiceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ChoiceOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["choiceInfo", "VimWs25::ElementDescription[]", [1, nil]],
      ["defaultIndex", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FloatOption,
    :schema_ns => "urn:vim25",
    :schema_type => "FloatOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPFloat"],
      ["max", "SOAP::SOAPFloat"],
      ["defaultValue", "SOAP::SOAPFloat"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IntOption,
    :schema_ns => "urn:vim25",
    :schema_type => "IntOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPInt"],
      ["max", "SOAP::SOAPInt"],
      ["defaultValue", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LongOption,
    :schema_ns => "urn:vim25",
    :schema_type => "LongOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPLong"],
      ["max", "SOAP::SOAPLong"],
      ["defaultValue", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OptionDef,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionDef",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["optionType", "VimWs25::OptionType"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOptionDef,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOptionDef",
    :schema_element => [
      ["OptionDef", ["VimWs25::OptionDef[]", XSD::QName.new("urn:vim25", "OptionDef")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OptionType,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionType",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OptionValue,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionValue",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOptionValue,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOptionValue",
    :schema_element => [
      ["OptionValue", ["VimWs25::OptionValue[]", XSD::QName.new("urn:vim25", "OptionValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StringOption,
    :schema_ns => "urn:vim25",
    :schema_type => "StringOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString"],
      ["validCharacters", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ApplyProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComplianceLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceLocator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expressionName", "SOAP::SOAPString"],
      ["applyPath", "VimWs25::ProfilePropertyPath"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfComplianceLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfComplianceLocator",
    :schema_element => [
      ["ComplianceLocator", ["VimWs25::ComplianceLocator[]", XSD::QName.new("urn:vim25", "ComplianceLocator")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComplianceProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expression", "VimWs25::ProfileExpression[]", [1, nil]],
      ["rootExpression", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComplianceFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceFailure",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["failureType", "SOAP::SOAPString"],
      ["message", "VimWs25::LocalizableMessage"],
      ["expressionName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfComplianceFailure,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfComplianceFailure",
    :schema_element => [
      ["ComplianceFailure", ["VimWs25::ComplianceFailure[]", XSD::QName.new("urn:vim25", "ComplianceFailure")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComplianceResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profile", "VimWs25::ManagedObjectReference", [0, 1]],
      ["complianceStatus", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["checkTime", "SOAP::SOAPDateTime", [0, 1]],
      ["failure", "VimWs25::ComplianceFailure[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfComplianceResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfComplianceResult",
    :schema_element => [
      ["ComplianceResult", ["VimWs25::ComplianceResult[]", XSD::QName.new("urn:vim25", "ComplianceResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileDeferredPolicyOptionParameter,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDeferredPolicyOptionParameter",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["inputPath", "VimWs25::ProfilePropertyPath"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileDeferredPolicyOptionParameter,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileDeferredPolicyOptionParameter",
    :schema_element => [
      ["ProfileDeferredPolicyOptionParameter", ["VimWs25::ProfileDeferredPolicyOptionParameter[]", XSD::QName.new("urn:vim25", "ProfileDeferredPolicyOptionParameter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileExpression",
    :schema_element => [
      ["ProfileExpression", ["VimWs25::ProfileExpression[]", XSD::QName.new("urn:vim25", "ProfileExpression")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileSimpleExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileSimpleExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["expressionType", "SOAP::SOAPString"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileCompositeExpression,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCompositeExpression",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["operator", "SOAP::SOAPString"],
      ["expressionName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileExpressionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExpressionMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["expressionId", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileExpressionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileExpressionMetadata",
    :schema_element => [
      ["ProfileExpressionMetadata", ["VimWs25::ProfileExpressionMetadata[]", XSD::QName.new("urn:vim25", "ProfileExpressionMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileParameterMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileParameterMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["type", "SOAP::SOAPString"],
      ["optional", "SOAP::SOAPBoolean"],
      ["defaultValue", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileParameterMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileParameterMetadata",
    :schema_element => [
      ["ProfileParameterMetadata", ["VimWs25::ProfileParameterMetadata[]", XSD::QName.new("urn:vim25", "ProfileParameterMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfilePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePolicy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["policyOption", "VimWs25::PolicyOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfilePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfilePolicy",
    :schema_element => [
      ["ProfilePolicy", ["VimWs25::ProfilePolicy[]", XSD::QName.new("urn:vim25", "ProfilePolicy")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfilePolicyOptionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePolicyOptionMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfilePolicyOptionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfilePolicyOptionMetadata",
    :schema_element => [
      ["ProfilePolicyOptionMetadata", ["VimWs25::ProfilePolicyOptionMetadata[]", XSD::QName.new("urn:vim25", "ProfilePolicyOptionMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileCompositePolicyOptionMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCompositePolicyOptionMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]],
      ["option", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserInputRequiredParameterMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "UserInputRequiredParameterMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["parameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]],
      ["userInputParameter", "VimWs25::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfilePolicyMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePolicyMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "VimWs25::ExtendedElementDescription"],
      ["possibleOption", "VimWs25::ProfilePolicyOptionMetadata[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfilePolicyMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfilePolicyMetadata",
    :schema_element => [
      ["ProfilePolicyMetadata", ["VimWs25::ProfilePolicyMetadata[]", XSD::QName.new("urn:vim25", "ProfilePolicyMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "PolicyOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPolicyOption",
    :schema_element => [
      ["PolicyOption", ["VimWs25::PolicyOption[]", XSD::QName.new("urn:vim25", "PolicyOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CompositePolicyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "CompositePolicyOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VimWs25::KeyAnyValue[]", [0, nil]],
      ["option", "VimWs25::PolicyOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileSerializedCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileSerializedCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["profileConfigString", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileDescriptionSection,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDescriptionSection",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["description", "VimWs25::ExtendedElementDescription"],
      ["message", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileDescriptionSection,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileDescriptionSection",
    :schema_element => [
      ["ProfileDescriptionSection", ["VimWs25::ProfileDescriptionSection[]", XSD::QName.new("urn:vim25", "ProfileDescriptionSection")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["section", "VimWs25::ProfileDescriptionSection[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileMetadata",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "VimWs25::ExtendedDescription", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileMetadata,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileMetadata",
    :schema_element => [
      ["ProfileMetadata", ["VimWs25::ProfileMetadata[]", XSD::QName.new("urn:vim25", "ProfileMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfilePropertyPath,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfilePropertyPath",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["profilePath", "SOAP::SOAPString"],
      ["policyId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterProfileConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["complyProfile", "VimWs25::ComplianceProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterProfileCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterProfileConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterProfileCompleteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileCompleteConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["complyProfile", "VimWs25::ComplianceProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterProfileConfigServiceCreateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileConfigServiceCreateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["serviceType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileExecuteError,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExecuteError",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["path", "VimWs25::ProfilePropertyPath", [0, 1]],
      ["message", "VimWs25::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfProfileExecuteError,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfProfileExecuteError",
    :schema_element => [
      ["ProfileExecuteError", ["VimWs25::ProfileExecuteError[]", XSD::QName.new("urn:vim25", "ProfileExecuteError")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileExecuteResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExecuteResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["configSpec", "VimWs25::HostConfigSpec", [0, 1]],
      ["inapplicablePath", "SOAP::SOAPString[]", [0, nil]],
      ["requireInput", "VimWs25::ProfileDeferredPolicyOptionParameter[]", [0, nil]],
      ["error", "VimWs25::ProfileExecuteError[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostApplyProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "HostApplyProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["memory", "VimWs25::HostMemoryProfile", [0, 1]],
      ["storage", "VimWs25::StorageProfile", [0, 1]],
      ["network", "VimWs25::NetworkProfile", [0, 1]],
      ["datetime", "VimWs25::DateTimeProfile", [0, 1]],
      ["firewall", "VimWs25::FirewallProfile", [0, 1]],
      ["security", "VimWs25::SecurityProfile", [0, 1]],
      ["service", "VimWs25::ServiceProfile[]", [0, nil]],
      ["option", "VimWs25::OptionProfile[]", [0, nil]],
      ["userAccount", "VimWs25::UserProfile[]", [0, nil]],
      ["usergroupAccount", "VimWs25::UserGroupProfile[]", [0, nil]],
      ["authentication", "VimWs25::AuthenticationProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPhysicalNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPhysicalNicProfile",
    :schema_element => [
      ["PhysicalNicProfile", ["VimWs25::PhysicalNicProfile[]", XSD::QName.new("urn:vim25", "PhysicalNicProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMemoryProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMemoryProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "UserProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfUserProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfUserProfile",
    :schema_element => [
      ["UserProfile", ["VimWs25::UserProfile[]", XSD::QName.new("urn:vim25", "UserProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "UserGroupProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfUserGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfUserGroupProfile",
    :schema_element => [
      ["UserGroupProfile", ["VimWs25::UserGroupProfile[]", XSD::QName.new("urn:vim25", "UserGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecurityProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "SecurityProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["permission", "VimWs25::PermissionProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OptionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "OptionProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfOptionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfOptionProfile",
    :schema_element => [
      ["OptionProfile", ["VimWs25::OptionProfile[]", XSD::QName.new("urn:vim25", "OptionProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DateTimeProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DateTimeProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ServiceProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfServiceProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfServiceProfile",
    :schema_element => [
      ["ServiceProfile", ["VimWs25::ServiceProfile[]", XSD::QName.new("urn:vim25", "ServiceProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FirewallProfileRulesetProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "FirewallProfileRulesetProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfFirewallProfileRulesetProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfFirewallProfileRulesetProfile",
    :schema_element => [
      ["FirewallProfileRulesetProfile", ["VimWs25::FirewallProfileRulesetProfile[]", XSD::QName.new("urn:vim25", "FirewallProfileRulesetProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FirewallProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "FirewallProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["ruleset", "VimWs25::FirewallProfileRulesetProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasStorageProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NasStorageProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfNasStorageProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfNasStorageProfile",
    :schema_element => [
      ["NasStorageProfile", ["VimWs25::NasStorageProfile[]", XSD::QName.new("urn:vim25", "NasStorageProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "StorageProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["nasStorage", "VimWs25::NasStorageProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkProfileDnsConfigProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkProfileDnsConfigProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["vswitch", "VimWs25::VirtualSwitchProfile[]", [0, nil]],
      ["vmPortGroup", "VimWs25::VmPortGroupProfile[]", [0, nil]],
      ["hostPortGroup", "VimWs25::HostPortGroupProfile[]", [0, nil]],
      ["serviceConsolePortGroup", "VimWs25::ServiceConsolePortGroupProfile[]", [0, nil]],
      ["dnsConfig", "VimWs25::NetworkProfileDnsConfigProfile", [0, 1]],
      ["ipRouteConfig", "VimWs25::IpRouteProfile", [0, 1]],
      ["consoleIpRouteConfig", "VimWs25::IpRouteProfile", [0, 1]],
      ["pnic", "VimWs25::PhysicalNicProfile[]", [0, nil]],
      ["dvswitch", "VimWs25::DvsProfile[]", [0, nil]],
      ["dvsServiceConsoleNic", "VimWs25::DvsServiceConsoleVNicProfile[]", [0, nil]],
      ["dvsHostNic", "VimWs25::DvsHostVNicProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsVNicProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsServiceConsoleVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsServiceConsoleVNicProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDvsServiceConsoleVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDvsServiceConsoleVNicProfile",
    :schema_element => [
      ["DvsServiceConsoleVNicProfile", ["VimWs25::DvsServiceConsoleVNicProfile[]", XSD::QName.new("urn:vim25", "DvsServiceConsoleVNicProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsHostVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsHostVNicProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDvsHostVNicProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDvsHostVNicProfile",
    :schema_element => [
      ["DvsHostVNicProfile", ["VimWs25::DvsHostVNicProfile[]", XSD::QName.new("urn:vim25", "DvsHostVNicProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "DvsProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["uplink", "VimWs25::PnicUplinkProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfDvsProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfDvsProfile",
    :schema_element => [
      ["DvsProfile", ["VimWs25::DvsProfile[]", XSD::QName.new("urn:vim25", "DvsProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PnicUplinkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PnicUplinkProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPnicUplinkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPnicUplinkProfile",
    :schema_element => [
      ["PnicUplinkProfile", ["VimWs25::PnicUplinkProfile[]", XSD::QName.new("urn:vim25", "PnicUplinkProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpRouteProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "IpRouteProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["staticRoute", "VimWs25::StaticRouteProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StaticRouteProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "StaticRouteProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfStaticRouteProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfStaticRouteProfile",
    :schema_element => [
      ["StaticRouteProfile", ["VimWs25::StaticRouteProfile[]", XSD::QName.new("urn:vim25", "StaticRouteProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LinkProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumPortsProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NumPortsProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSwitchProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSwitchProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["link", "VimWs25::LinkProfile"],
      ["numPorts", "VimWs25::NumPortsProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualSwitchProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualSwitchProfile",
    :schema_element => [
      ["VirtualSwitchProfile", ["VimWs25::VirtualSwitchProfile[]", XSD::QName.new("urn:vim25", "VirtualSwitchProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VlanProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VlanProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSwitchSelectionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSwitchSelectionProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PortGroupProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "VmPortGroupProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVmPortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVmPortGroupProfile",
    :schema_element => [
      ["VmPortGroupProfile", ["VimWs25::VmPortGroupProfile[]", XSD::QName.new("urn:vim25", "VmPortGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPortGroupProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostPortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostPortGroupProfile",
    :schema_element => [
      ["HostPortGroupProfile", ["VimWs25::HostPortGroupProfile[]", XSD::QName.new("urn:vim25", "HostPortGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ServiceConsolePortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ServiceConsolePortGroupProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VimWs25::VlanProfile"],
      ["vswitch", "VimWs25::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VimWs25::NetworkPolicyProfile"],
      ["ipConfig", "VimWs25::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfServiceConsolePortGroupProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfServiceConsolePortGroupProfile",
    :schema_element => [
      ["ServiceConsolePortGroupProfile", ["VimWs25::ServiceConsolePortGroupProfile[]", XSD::QName.new("urn:vim25", "ServiceConsolePortGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkPolicyProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "NetworkPolicyProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpAddressProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "IpAddressProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthenticationProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "AuthenticationProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["activeDirectory", "VimWs25::ActiveDirectoryProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ActiveDirectoryProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ActiveDirectoryProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PermissionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "PermissionProfile",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VimWs25::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfPermissionProfile,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfPermissionProfile",
    :schema_element => [
      ["PermissionProfile", ["VimWs25::PermissionProfile[]", XSD::QName.new("urn:vim25", "PermissionProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProfileConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["applyProfile", "VimWs25::HostApplyProfile", [0, 1]],
      ["defaultComplyProfile", "VimWs25::ComplianceProfile", [0, 1]],
      ["defaultComplyLocator", "VimWs25::ComplianceLocator[]", [0, nil]],
      ["customComplyProfile", "VimWs25::ComplianceProfile", [0, 1]],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProfileConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProfileCompleteConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileCompleteConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["applyProfile", "VimWs25::HostApplyProfile", [0, 1]],
      ["customComplyProfile", "VimWs25::ComplianceProfile", [0, 1]],
      ["disabledExpressionListChanged", "SOAP::SOAPBoolean"],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProfileHostBasedConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileHostBasedConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostProfileManagerConfigTaskList,
    :schema_ns => "urn:vim25",
    :schema_type => "HostProfileManagerConfigTaskList",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configSpec", "VimWs25::HostConfigSpec", [0, 1]],
      ["taskDescription", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskDetail,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskDetail",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["frequency", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfScheduledTaskDetail,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfScheduledTaskDetail",
    :schema_element => [
      ["ScheduledTaskDetail", ["VimWs25::ScheduledTaskDetail[]", XSD::QName.new("urn:vim25", "ScheduledTaskDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskDescription,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskDescription",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["action", "VimWs25::TypeDescription[]", [1, nil]],
      ["schedulerInfo", "VimWs25::ScheduledTaskDetail[]", [1, nil]],
      ["state", "VimWs25::ElementDescription[]", [1, nil]],
      ["dayOfWeek", "VimWs25::ElementDescription[]", [1, nil]],
      ["weekOfMonth", "VimWs25::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VimWs25::TaskScheduler"],
      ["action", "VimWs25::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["nextRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["prevRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["state", "SOAP::SOAPString"],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["activeTask", "VimWs25::ManagedObjectReference", [0, 1]],
      ["taskObject", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AfterStartupTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "AfterStartupTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OnceTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "OnceTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["runAt", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RecurrentTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "RecurrentTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HourlyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "HourlyTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DailyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "DailyTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WeeklyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "WeeklyTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["sunday", "SOAP::SOAPBoolean"],
      ["monday", "SOAP::SOAPBoolean"],
      ["tuesday", "SOAP::SOAPBoolean"],
      ["wednesday", "SOAP::SOAPBoolean"],
      ["thursday", "SOAP::SOAPBoolean"],
      ["friday", "SOAP::SOAPBoolean"],
      ["saturday", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MonthlyTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "MonthlyTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MonthlyByDayTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "MonthlyByDayTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["day", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MonthlyByWeekdayTaskScheduler,
    :schema_ns => "urn:vim25",
    :schema_type => "MonthlyByWeekdayTaskScheduler",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["offset", "SOAP::SOAPString"],
      ["weekday", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScheduledTaskSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ScheduledTaskSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VimWs25::TaskScheduler"],
      ["action", "VimWs25::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppCloneSpecNetworkMappingPair,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpecNetworkMappingPair",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::ManagedObjectReference"],
      ["destination", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppCloneSpecNetworkMappingPair,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppCloneSpecNetworkMappingPair",
    :schema_element => [
      ["VAppCloneSpecNetworkMappingPair", ["VimWs25::VAppCloneSpecNetworkMappingPair[]", XSD::QName.new("urn:vim25", "VAppCloneSpecNetworkMappingPair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppCloneSpecResourceMap,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpecResourceMap",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["source", "VimWs25::ManagedObjectReference"],
      ["parent", "VimWs25::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["location", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppCloneSpecResourceMap,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppCloneSpecResourceMap",
    :schema_element => [
      ["VAppCloneSpecResourceMap", ["VimWs25::VAppCloneSpecResourceMap[]", XSD::QName.new("urn:vim25", "VAppCloneSpecResourceMap")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppCloneSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["location", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VimWs25::ResourceConfigSpec", [0, 1]],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VimWs25::VAppCloneSpecNetworkMappingPair[]", [0, nil]],
      ["property", "VimWs25::KeyValue[]", [0, nil]],
      ["resourceMapping", "VimWs25::VAppCloneSpecResourceMap[]", [0, nil]],
      ["provisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppEntityConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppEntityConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference", [0, 1]],
      ["tag", "SOAP::SOAPString", [0, 1]],
      ["startOrder", "SOAP::SOAPInt", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitingForGuest", "SOAP::SOAPBoolean", [0, 1]],
      ["startAction", "SOAP::SOAPString", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppEntityConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppEntityConfigInfo",
    :schema_element => [
      ["VAppEntityConfigInfo", ["VimWs25::VAppEntityConfigInfo[]", XSD::QName.new("urn:vim25", "VAppEntityConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["supportedAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["supportedIpProtocol", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpPoolIpPoolConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "IpPoolIpPoolConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["subnetAddress", "SOAP::SOAPString", [0, 1]],
      ["netmask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString", [0, 1]],
      ["range", "SOAP::SOAPString", [0, 1]],
      ["dns", "SOAP::SOAPString[]", [0, nil]],
      ["dhcpServerAvailable", "SOAP::SOAPBoolean", [0, 1]],
      ["ipPoolEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpPoolAssociation,
    :schema_ns => "urn:vim25",
    :schema_type => "IpPoolAssociation",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "VimWs25::ManagedObjectReference", [0, 1]],
      ["networkName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfIpPoolAssociation,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfIpPoolAssociation",
    :schema_element => [
      ["IpPoolAssociation", ["VimWs25::IpPoolAssociation[]", XSD::QName.new("urn:vim25", "IpPoolAssociation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpPool,
    :schema_ns => "urn:vim25",
    :schema_type => "IpPool",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["ipv4Config", "VimWs25::IpPoolIpPoolConfigInfo", [0, 1]],
      ["ipv6Config", "VimWs25::IpPoolIpPoolConfigInfo", [0, 1]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["dnsSearchPath", "SOAP::SOAPString", [0, 1]],
      ["hostPrefix", "SOAP::SOAPString", [0, 1]],
      ["httpProxy", "SOAP::SOAPString", [0, 1]],
      ["networkAssociation", "VimWs25::IpPoolAssociation[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfIpPool,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfIpPool",
    :schema_element => [
      ["IpPool", ["VimWs25::IpPool[]", XSD::QName.new("urn:vim25", "IpPool")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppOvfSectionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppOvfSectionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["namespace", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["atEnvelopeLevel", "SOAP::SOAPBoolean", [0, 1]],
      ["contents", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppOvfSectionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppOvfSectionInfo",
    :schema_element => [
      ["VAppOvfSectionInfo", ["VimWs25::VAppOvfSectionInfo[]", XSD::QName.new("urn:vim25", "VAppOvfSectionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppProductInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppProductInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["fullVersion", "SOAP::SOAPString", [0, 1]],
      ["vendorUrl", "SOAP::SOAPString", [0, 1]],
      ["productUrl", "SOAP::SOAPString", [0, 1]],
      ["appUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppProductInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppProductInfo",
    :schema_element => [
      ["VAppProductInfo", ["VimWs25::VAppProductInfo[]", XSD::QName.new("urn:vim25", "VAppProductInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppPropertyInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppPropertyInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["id", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString", [0, 1]],
      ["label", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userConfigurable", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString", [0, 1]],
      ["value", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppPropertyInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppPropertyInfo",
    :schema_element => [
      ["VAppPropertyInfo", ["VimWs25::VAppPropertyInfo[]", XSD::QName.new("urn:vim25", "VAppPropertyInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductInfo[]", [0, nil]],
      ["property", "VimWs25::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductSpec[]", [0, nil]],
      ["property", "VimWs25::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualAppImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppImportSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["vAppConfigSpec", "VimWs25::VAppConfigSpec"],
      ["resourcePoolSpec", "VimWs25::ResourceConfigSpec"],
      ["child", "VimWs25::ImportSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductInfo[]", [0, nil]],
      ["property", "VimWs25::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VmConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["product", "VimWs25::VAppProductSpec[]", [0, nil]],
      ["property", "VimWs25::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VimWs25::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VimWs25::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppProductSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::VAppProductInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppProductSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppProductSpec",
    :schema_element => [
      ["VAppProductSpec", ["VimWs25::VAppProductSpec[]", XSD::QName.new("urn:vim25", "VAppProductSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppPropertySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppPropertySpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::VAppPropertyInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppPropertySpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppPropertySpec",
    :schema_element => [
      ["VAppPropertySpec", ["VimWs25::VAppPropertySpec[]", XSD::QName.new("urn:vim25", "VAppPropertySpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppOvfSectionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppOvfSectionSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::VAppOvfSectionInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVAppOvfSectionSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVAppOvfSectionSpec",
    :schema_element => [
      ["VAppOvfSectionSpec", ["VimWs25::VAppOvfSectionSpec[]", XSD::QName.new("urn:vim25", "VAppOvfSectionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineAffinityInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineAffinityInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["affinitySet", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineBootOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineBootOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["bootDelay", "SOAP::SOAPLong", [0, 1]],
      ["enterBIOSSetup", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryDelay", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCapability",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["snapshotOperationsSupported", "SOAP::SOAPBoolean"],
      ["multipleSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["snapshotConfigSupported", "SOAP::SOAPBoolean"],
      ["poweredOffSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["memorySnapshotsSupported", "SOAP::SOAPBoolean"],
      ["revertToSnapshotSupported", "SOAP::SOAPBoolean"],
      ["quiescedSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["disableSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["lockSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["consolePreferencesSupported", "SOAP::SOAPBoolean"],
      ["cpuFeatureMaskSupported", "SOAP::SOAPBoolean"],
      ["s1AcpiManagementSupported", "SOAP::SOAPBoolean"],
      ["settingScreenResolutionSupported", "SOAP::SOAPBoolean"],
      ["toolsAutoUpdateSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnSupported", "SOAP::SOAPBoolean"],
      ["npivWwnOnNonRdmVmSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnDisableSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmNpivWwnUpdateSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["swapPlacementSupported", "SOAP::SOAPBoolean"],
      ["toolsSyncTimeSupported", "SOAP::SOAPBoolean"],
      ["virtualMmuUsageSupported", "SOAP::SOAPBoolean"],
      ["diskSharesSupported", "SOAP::SOAPBoolean"],
      ["bootOptionsSupported", "SOAP::SOAPBoolean"],
      ["bootRetryOptionsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["settingVideoRamSizeSupported", "SOAP::SOAPBoolean"],
      ["settingDisplayTopologySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineCdromInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCdromInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineCdromInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineCdromInfo",
    :schema_element => [
      ["VirtualMachineCdromInfo", ["VimWs25::VirtualMachineCdromInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineCdromInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineCloneSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCloneSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["location", "VimWs25::VirtualMachineRelocateSpec"],
      ["template", "SOAP::SOAPBoolean"],
      ["config", "VimWs25::VirtualMachineConfigSpec", [0, 1]],
      ["customization", "VimWs25::CustomizationSpec", [0, 1]],
      ["powerOn", "SOAP::SOAPBoolean"],
      ["snapshot", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfoDatastoreUrlPair,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfoDatastoreUrlPair",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineConfigInfoDatastoreUrlPair,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineConfigInfoDatastoreUrlPair",
    :schema_element => [
      ["VirtualMachineConfigInfoDatastoreUrlPair", ["VimWs25::VirtualMachineConfigInfoDatastoreUrlPair[]", XSD::QName.new("urn:vim25", "VirtualMachineConfigInfoDatastoreUrlPair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString"],
      ["modified", "SOAP::SOAPDateTime"],
      ["name", "SOAP::SOAPString"],
      ["guestFullName", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"],
      ["alternateGuestName", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VimWs25::VirtualMachineFileInfo"],
      ["tools", "VimWs25::ToolsConfigInfo", [0, 1]],
      ["flags", "VimWs25::VirtualMachineFlagInfo"],
      ["consolePreferences", "VimWs25::VirtualMachineConsolePreferences", [0, 1]],
      ["defaultPowerOps", "VimWs25::VirtualMachineDefaultPowerOpInfo"],
      ["hardware", "VimWs25::VirtualHardware"],
      ["cpuAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["hotPlugMemoryLimit", "SOAP::SOAPLong", [0, 1]],
      ["hotPlugMemoryIncrementSize", "SOAP::SOAPLong", [0, 1]],
      ["cpuAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VimWs25::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["extraConfig", "VimWs25::OptionValue[]", [0, nil]],
      ["cpuFeatureMask", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["datastoreUrl", "VimWs25::VirtualMachineConfigInfoDatastoreUrlPair[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VimWs25::VirtualMachineBootOptions", [0, 1]],
      ["ftInfo", "VimWs25::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfig", "VimWs25::VmConfigInfo", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["guestOSDescriptor", "VimWs25::GuestOsDescriptor[]", [1, nil]],
      ["guestOSDefaultIndex", "SOAP::SOAPInt"],
      ["hardwareOptions", "VimWs25::VirtualHardwareOption"],
      ["capabilities", "VimWs25::VirtualMachineCapability"],
      ["datastore", "VimWs25::DatastoreOption"],
      ["defaultDevice", "VimWs25::VirtualDevice[]", [0, nil]],
      ["supportedMonitorType", "SOAP::SOAPString[]", [1, nil]],
      ["supportedOvfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["supportedOvfInstallTransport", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigOptionDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigOptionDescriptor",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["createSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultConfigOption", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineConfigOptionDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineConfigOptionDescriptor",
    :schema_element => [
      ["VirtualMachineConfigOptionDescriptor", ["VimWs25::VirtualMachineConfigOptionDescriptor[]", XSD::QName.new("urn:vim25", "VirtualMachineConfigOptionDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineCpuIdInfoSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineCpuIdInfoSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["removeKey", nil, [0, 1]],
      ["info", "VimWs25::HostCpuIdInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineCpuIdInfoSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineCpuIdInfoSpec",
    :schema_element => [
      ["VirtualMachineCpuIdInfoSpec", ["VimWs25::VirtualMachineCpuIdInfoSpec[]", XSD::QName.new("urn:vim25", "VirtualMachineCpuIdInfoSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["npivWorldWideNameOp", "SOAP::SOAPString", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["alternateGuestName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VimWs25::VirtualMachineFileInfo", [0, 1]],
      ["tools", "VimWs25::ToolsConfigInfo", [0, 1]],
      ["flags", "VimWs25::VirtualMachineFlagInfo", [0, 1]],
      ["consolePreferences", "VimWs25::VirtualMachineConsolePreferences", [0, 1]],
      ["powerOpInfo", "VimWs25::VirtualMachineDefaultPowerOpInfo", [0, 1]],
      ["numCPUs", "SOAP::SOAPInt", [0, 1]],
      ["numCoresPerSocket", "SOAP::SOAPInt", [0, 1]],
      ["memoryMB", "SOAP::SOAPLong", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["deviceChange", "VimWs25::VirtualDeviceConfigSpec[]", [0, nil]],
      ["cpuAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VimWs25::ResourceAllocationInfo", [0, 1]],
      ["cpuAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VimWs25::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VimWs25::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["cpuFeatureMask", "VimWs25::VirtualMachineCpuIdInfoSpec[]", [0, nil]],
      ["extraConfig", "VimWs25::OptionValue[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VimWs25::VirtualMachineBootOptions", [0, 1]],
      ["vAppConfig", "VimWs25::VmConfigSpec", [0, 1]],
      ["ftInfo", "VimWs25::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfigRemoved", "SOAP::SOAPBoolean", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigTarget",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numCpus", "SOAP::SOAPInt"],
      ["numCpuCores", "SOAP::SOAPInt"],
      ["numNumaNodes", "SOAP::SOAPInt"],
      ["datastore", "VimWs25::VirtualMachineDatastoreInfo[]", [0, nil]],
      ["network", "VimWs25::VirtualMachineNetworkInfo[]", [0, nil]],
      ["distributedVirtualPortgroup", "VimWs25::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VimWs25::DistributedVirtualSwitchInfo[]", [0, nil]],
      ["cdRom", "VimWs25::VirtualMachineCdromInfo[]", [0, nil]],
      ["serial", "VimWs25::VirtualMachineSerialInfo[]", [0, nil]],
      ["parallel", "VimWs25::VirtualMachineParallelInfo[]", [0, nil]],
      ["sound", "VimWs25::VirtualMachineSoundInfo[]", [0, nil]],
      ["usb", "VimWs25::VirtualMachineUsbInfo[]", [0, nil]],
      ["floppy", "VimWs25::VirtualMachineFloppyInfo[]", [0, nil]],
      ["legacyNetworkInfo", "VimWs25::VirtualMachineLegacyNetworkSwitchInfo[]", [0, nil]],
      ["scsiPassthrough", "VimWs25::VirtualMachineScsiPassthroughInfo[]", [0, nil]],
      ["scsiDisk", "VimWs25::VirtualMachineScsiDiskDeviceInfo[]", [0, nil]],
      ["ideDisk", "VimWs25::VirtualMachineIdeDiskDeviceInfo[]", [0, nil]],
      ["maxMemMBOptimalPerf", "SOAP::SOAPInt"],
      ["resourcePool", "VimWs25::ResourcePoolRuntimeInfo", [0, 1]],
      ["autoVmotion", "SOAP::SOAPBoolean", [0, 1]],
      ["pciPassthrough", "VimWs25::VirtualMachinePciPassthroughInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConsolePreferences,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConsolePreferences",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["powerOnWhenOpened", "SOAP::SOAPBoolean", [0, 1]],
      ["enterFullScreenOnPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["closeOnPowerOffOrSuspend", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDatastoreInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["datastore", "VimWs25::DatastoreSummary"],
      ["capability", "VimWs25::DatastoreCapability"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineDatastoreInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineDatastoreInfo",
    :schema_element => [
      ["VirtualMachineDatastoreInfo", ["VimWs25::VirtualMachineDatastoreInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineDatastoreInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDatastoreVolumeOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDatastoreVolumeOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileSystemType", "SOAP::SOAPString"],
      ["majorVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineDatastoreVolumeOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineDatastoreVolumeOption",
    :schema_element => [
      ["VirtualMachineDatastoreVolumeOption", ["VimWs25::VirtualMachineDatastoreVolumeOption[]", XSD::QName.new("urn:vim25", "VirtualMachineDatastoreVolumeOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreOption,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["unsupportedVolumes", "VimWs25::VirtualMachineDatastoreVolumeOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDefaultPowerOpInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDefaultPowerOpInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["powerOffType", "SOAP::SOAPString", [0, 1]],
      ["suspendType", "SOAP::SOAPString", [0, 1]],
      ["resetType", "SOAP::SOAPString", [0, 1]],
      ["defaultPowerOffType", "SOAP::SOAPString", [0, 1]],
      ["defaultSuspendType", "SOAP::SOAPString", [0, 1]],
      ["defaultResetType", "SOAP::SOAPString", [0, 1]],
      ["standbyAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2InactiveReasonVm", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["runtimeState", "VimWs25::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineDeviceRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineDeviceRuntimeInfo",
    :schema_element => [
      ["VirtualMachineDeviceRuntimeInfo", ["VimWs25::VirtualMachineDeviceRuntimeInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineDeviceRuntimeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDiskDeviceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultTolerancePrimaryConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultTolerancePrimaryConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["secondaries", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceSecondaryConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceSecondaryConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["primaryVM", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceSecondaryOpResult,
    :schema_ns => "urn:vim25",
    :schema_type => "FaultToleranceSecondaryOpResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["powerOnAttempted", "SOAP::SOAPBoolean"],
      ["powerOnResult", "VimWs25::ClusterPowerOnVmResult", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vmPathName", "SOAP::SOAPString", [0, 1]],
      ["snapshotDirectory", "SOAP::SOAPString", [0, 1]],
      ["suspendDirectory", "SOAP::SOAPString", [0, 1]],
      ["logDirectory", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutDiskLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutDiskLayout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["diskFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFileLayoutDiskLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFileLayoutDiskLayout",
    :schema_element => [
      ["VirtualMachineFileLayoutDiskLayout", ["VimWs25::VirtualMachineFileLayoutDiskLayout[]", XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutDiskLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutSnapshotLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutSnapshotLayout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["snapshotFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFileLayoutSnapshotLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFileLayoutSnapshotLayout",
    :schema_element => [
      ["VirtualMachineFileLayoutSnapshotLayout", ["VimWs25::VirtualMachineFileLayoutSnapshotLayout[]", XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutSnapshotLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["configFile", "SOAP::SOAPString[]", [0, nil]],
      ["logFile", "SOAP::SOAPString[]", [0, nil]],
      ["disk", "VimWs25::VirtualMachineFileLayoutDiskLayout[]", [0, nil]],
      ["snapshot", "VimWs25::VirtualMachineFileLayoutSnapshotLayout[]", [0, nil]],
      ["swapFile", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExFileInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFileLayoutExFileInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFileLayoutExFileInfo",
    :schema_element => [
      ["VirtualMachineFileLayoutExFileInfo", ["VimWs25::VirtualMachineFileLayoutExFileInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExFileInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExDiskUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExDiskUnit",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileKey", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFileLayoutExDiskUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFileLayoutExDiskUnit",
    :schema_element => [
      ["VirtualMachineFileLayoutExDiskUnit", ["VimWs25::VirtualMachineFileLayoutExDiskUnit[]", XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExDiskUnit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExDiskLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExDiskLayout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chain", "VimWs25::VirtualMachineFileLayoutExDiskUnit[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFileLayoutExDiskLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFileLayoutExDiskLayout",
    :schema_element => [
      ["VirtualMachineFileLayoutExDiskLayout", ["VimWs25::VirtualMachineFileLayoutExDiskLayout[]", XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExDiskLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExSnapshotLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExSnapshotLayout",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "VimWs25::ManagedObjectReference"],
      ["dataKey", "SOAP::SOAPInt"],
      ["disk", "VimWs25::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFileLayoutExSnapshotLayout,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFileLayoutExSnapshotLayout",
    :schema_element => [
      ["VirtualMachineFileLayoutExSnapshotLayout", ["VimWs25::VirtualMachineFileLayoutExSnapshotLayout[]", XSD::QName.new("urn:vim25", "VirtualMachineFileLayoutExSnapshotLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutEx,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutEx",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["file", "VimWs25::VirtualMachineFileLayoutExFileInfo[]", [0, nil]],
      ["disk", "VimWs25::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]],
      ["snapshot", "VimWs25::VirtualMachineFileLayoutExSnapshotLayout[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["disableAcceleration", "SOAP::SOAPBoolean", [0, 1]],
      ["enableLogging", "SOAP::SOAPBoolean", [0, 1]],
      ["useToe", "SOAP::SOAPBoolean", [0, 1]],
      ["runWithDebugInfo", "SOAP::SOAPBoolean", [0, 1]],
      ["monitorType", "SOAP::SOAPString", [0, 1]],
      ["htSharing", "SOAP::SOAPString", [0, 1]],
      ["snapshotDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["snapshotLocked", "SOAP::SOAPBoolean", [0, 1]],
      ["diskUuidEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["virtualMmuUsage", "SOAP::SOAPString", [0, 1]],
      ["virtualExecUsage", "SOAP::SOAPString", [0, 1]],
      ["snapshotPowerOffBehavior", "SOAP::SOAPString", [0, 1]],
      ["recordReplayEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFloppyInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFloppyInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineFloppyInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineFloppyInfo",
    :schema_element => [
      ["VirtualMachineFloppyInfo", ["VimWs25::VirtualMachineFloppyInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineFloppyInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GuestDiskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestDiskInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskPath", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["freeSpace", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfGuestDiskInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfGuestDiskInfo",
    :schema_element => [
      ["GuestDiskInfo", ["VimWs25::GuestDiskInfo[]", XSD::QName.new("urn:vim25", "GuestDiskInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GuestNicInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestNicInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["deviceConfigId", "SOAP::SOAPInt"],
      ["dnsConfig", "VimWs25::NetDnsConfigInfo", [0, 1]],
      ["ipConfig", "VimWs25::NetIpConfigInfo", [0, 1]],
      ["netBIOSConfig", "VimWs25::NetBIOSConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfGuestNicInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfGuestNicInfo",
    :schema_element => [
      ["GuestNicInfo", ["VimWs25::GuestNicInfo[]", XSD::QName.new("urn:vim25", "GuestNicInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GuestStackInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestStackInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dnsConfig", "VimWs25::NetDnsConfigInfo", [0, 1]],
      ["ipRouteConfig", "VimWs25::NetIpRouteConfigInfo", [0, 1]],
      ["ipStackConfig", "VimWs25::KeyValue[]", [0, nil]],
      ["dhcpConfig", "VimWs25::NetDhcpConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfGuestStackInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfGuestStackInfo",
    :schema_element => [
      ["GuestStackInfo", ["VimWs25::GuestStackInfo[]", XSD::QName.new("urn:vim25", "GuestStackInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GuestScreenInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestScreenInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GuestInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toolsStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersion", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFamily", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["net", "VimWs25::GuestNicInfo[]", [0, nil]],
      ["ipStack", "VimWs25::GuestStackInfo[]", [0, nil]],
      ["disk", "VimWs25::GuestDiskInfo[]", [0, nil]],
      ["screen", "VimWs25::GuestScreenInfo", [0, 1]],
      ["guestState", "SOAP::SOAPString"],
      ["appHeartbeatStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GuestOsDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "GuestOsDescriptor",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["supportedMaxCPUs", "SOAP::SOAPInt"],
      ["supportedMinMemMB", "SOAP::SOAPInt"],
      ["supportedMaxMemMB", "SOAP::SOAPInt"],
      ["recommendedMemMB", "SOAP::SOAPInt"],
      ["recommendedColorDepth", "SOAP::SOAPInt"],
      ["supportedDiskControllerList", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedSCSIController", "SOAP::SOAPString", [0, 1]],
      ["recommendedDiskController", "SOAP::SOAPString"],
      ["supportedNumDisks", "SOAP::SOAPInt"],
      ["recommendedDiskSizeMB", "SOAP::SOAPInt"],
      ["supportedEthernetCard", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedEthernetCard", "SOAP::SOAPString", [0, 1]],
      ["supportsSlaveDisk", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuFeatureMask", "VimWs25::HostCpuIdInfo[]", [0, nil]],
      ["supportsWakeOnLan", "SOAP::SOAPBoolean"],
      ["supportsVMI", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMemoryHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotRemove", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfGuestOsDescriptor,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfGuestOsDescriptor",
    :schema_element => [
      ["GuestOsDescriptor", ["VimWs25::GuestOsDescriptor[]", XSD::QName.new("urn:vim25", "GuestOsDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineIdeDiskDevicePartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineIdeDiskDevicePartitionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineIdeDiskDevicePartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineIdeDiskDevicePartitionInfo",
    :schema_element => [
      ["VirtualMachineIdeDiskDevicePartitionInfo", ["VimWs25::VirtualMachineIdeDiskDevicePartitionInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineIdeDiskDevicePartitionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineIdeDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineIdeDiskDeviceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["partitionTable", "VimWs25::VirtualMachineIdeDiskDevicePartitionInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineIdeDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineIdeDiskDeviceInfo",
    :schema_element => [
      ["VirtualMachineIdeDiskDeviceInfo", ["VimWs25::VirtualMachineIdeDiskDeviceInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineIdeDiskDeviceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineLegacyNetworkSwitchInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineLegacyNetworkSwitchInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineLegacyNetworkSwitchInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineLegacyNetworkSwitchInfo",
    :schema_element => [
      ["VirtualMachineLegacyNetworkSwitchInfo", ["VimWs25::VirtualMachineLegacyNetworkSwitchInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineLegacyNetworkSwitchInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineMessage,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMessage",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["argument", "[]", [0, nil]],
      ["text", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineMessage,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineMessage",
    :schema_element => [
      ["VirtualMachineMessage", ["VimWs25::VirtualMachineMessage[]", XSD::QName.new("urn:vim25", "VirtualMachineMessage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineNetworkInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VimWs25::NetworkSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineNetworkInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineNetworkInfo",
    :schema_element => [
      ["VirtualMachineNetworkInfo", ["VimWs25::VirtualMachineNetworkInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineNetworkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineNetworkShaperInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineNetworkShaperInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["peakBps", "SOAP::SOAPLong", [0, 1]],
      ["averageBps", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineParallelInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineParallelInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineParallelInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineParallelInfo",
    :schema_element => [
      ["VirtualMachineParallelInfo", ["VimWs25::VirtualMachineParallelInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineParallelInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachinePciPassthroughInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePciPassthroughInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["pciDevice", "VimWs25::HostPciDevice"],
      ["systemId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachinePciPassthroughInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachinePciPassthroughInfo",
    :schema_element => [
      ["VirtualMachinePciPassthroughInfo", ["VimWs25::VirtualMachinePciPassthroughInfo[]", XSD::QName.new("urn:vim25", "VirtualMachinePciPassthroughInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineQuestionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineQuestionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["text", "SOAP::SOAPString"],
      ["choice", "VimWs25::ChoiceOption"],
      ["message", "VimWs25::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineRelocateSpecDiskLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateSpecDiskLocator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["diskId", "SOAP::SOAPInt"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineRelocateSpecDiskLocator,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineRelocateSpecDiskLocator",
    :schema_element => [
      ["VirtualMachineRelocateSpecDiskLocator", ["VimWs25::VirtualMachineRelocateSpecDiskLocator[]", XSD::QName.new("urn:vim25", "VirtualMachineRelocateSpecDiskLocator")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineRelocateSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["disk", "VimWs25::VirtualMachineRelocateSpecDiskLocator[]", [0, nil]],
      ["transform", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineRuntimeInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRuntimeInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["device", "VimWs25::VirtualMachineDeviceRuntimeInfo[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["connectionState", "SOAP::SOAPString"],
      ["powerState", "SOAP::SOAPString"],
      ["faultToleranceState", "SOAP::SOAPString", [0, 1]],
      ["toolsInstallerMounted", "SOAP::SOAPBoolean"],
      ["suspendTime", "SOAP::SOAPDateTime", [0, 1]],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["suspendInterval", "SOAP::SOAPLong", [0, 1]],
      ["question", "VimWs25::VirtualMachineQuestionInfo", [0, 1]],
      ["memoryOverhead", "SOAP::SOAPLong", [0, 1]],
      ["maxCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["maxMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["numMksConnections", "SOAP::SOAPInt"],
      ["recordReplayState", "SOAP::SOAPString", [0, 1]],
      ["cleanPowerOff", "SOAP::SOAPBoolean", [0, 1]],
      ["needSecondaryReason", "SOAP::SOAPString", [0, 1]],
      ["minRequiredEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineScsiDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineScsiDiskDeviceInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["disk", "VimWs25::HostScsiDisk", [0, 1]],
      ["transportHint", "SOAP::SOAPString", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineScsiDiskDeviceInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineScsiDiskDeviceInfo",
    :schema_element => [
      ["VirtualMachineScsiDiskDeviceInfo", ["VimWs25::VirtualMachineScsiDiskDeviceInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineScsiDiskDeviceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineScsiPassthroughInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineScsiPassthroughInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["scsiClass", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["physicalUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineScsiPassthroughInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineScsiPassthroughInfo",
    :schema_element => [
      ["VirtualMachineScsiPassthroughInfo", ["VimWs25::VirtualMachineScsiPassthroughInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineScsiPassthroughInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineSerialInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSerialInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineSerialInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineSerialInfo",
    :schema_element => [
      ["VirtualMachineSerialInfo", ["VimWs25::VirtualMachineSerialInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineSerialInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineSnapshotInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSnapshotInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["currentSnapshot", "VimWs25::ManagedObjectReference", [0, 1]],
      ["rootSnapshotList", "VimWs25::VirtualMachineSnapshotTree[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineSnapshotTree,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSnapshotTree",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["snapshot", "VimWs25::ManagedObjectReference"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["createTime", "SOAP::SOAPDateTime"],
      ["state", "SOAP::SOAPString"],
      ["quiesced", "SOAP::SOAPBoolean"],
      ["backupManifest", "SOAP::SOAPString", [0, 1]],
      ["childSnapshotList", "VimWs25::VirtualMachineSnapshotTree[]", [0, nil]],
      ["replaySupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineSnapshotTree,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineSnapshotTree",
    :schema_element => [
      ["VirtualMachineSnapshotTree", ["VimWs25::VirtualMachineSnapshotTree[]", XSD::QName.new("urn:vim25", "VirtualMachineSnapshotTree")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineSoundInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSoundInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineSoundInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineSoundInfo",
    :schema_element => [
      ["VirtualMachineSoundInfo", ["VimWs25::VirtualMachineSoundInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineSoundInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineUsageOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsageOnDatastore",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineUsageOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineUsageOnDatastore",
    :schema_element => [
      ["VirtualMachineUsageOnDatastore", ["VimWs25::VirtualMachineUsageOnDatastore[]", XSD::QName.new("urn:vim25", "VirtualMachineUsageOnDatastore")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineStorageInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineStorageInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["perDatastoreUsage", "VimWs25::VirtualMachineUsageOnDatastore[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["template", "SOAP::SOAPBoolean"],
      ["vmPathName", "SOAP::SOAPString"],
      ["memorySizeMB", "SOAP::SOAPInt", [0, 1]],
      ["cpuReservation", "SOAP::SOAPInt", [0, 1]],
      ["memoryReservation", "SOAP::SOAPInt", [0, 1]],
      ["numCpu", "SOAP::SOAPInt", [0, 1]],
      ["numEthernetCards", "SOAP::SOAPInt", [0, 1]],
      ["numVirtualDisks", "SOAP::SOAPInt", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["product", "VimWs25::VAppProductInfo", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["ftInfo", "VimWs25::FaultToleranceConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineQuickStats,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineQuickStats",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPInt", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["guestHeartbeatStatus", "SOAP::SOAPString"],
      ["distributedCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPInt", [0, 1]],
      ["sharedMemory", "SOAP::SOAPInt", [0, 1]],
      ["swappedMemory", "SOAP::SOAPInt", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPInt", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPInt", [0, 1]],
      ["ftLogBandwidth", "SOAP::SOAPInt", [0, 1]],
      ["ftSecondaryLatency", "SOAP::SOAPInt", [0, 1]],
      ["ftLatencyStatus", "SOAP::SOAPString", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]],
      ["uptimeSeconds", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineGuestSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["toolsStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineStorageSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineStorageSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineSummary",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["runtime", "VimWs25::VirtualMachineRuntimeInfo"],
      ["guest", "VimWs25::VirtualMachineGuestSummary", [0, 1]],
      ["config", "VimWs25::VirtualMachineConfigSummary"],
      ["storage", "VimWs25::VirtualMachineStorageSummary", [0, 1]],
      ["quickStats", "VimWs25::VirtualMachineQuickStats"],
      ["overallStatus", "SOAP::SOAPString"],
      ["customValue", "VimWs25::CustomFieldValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineSummary,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineSummary",
    :schema_element => [
      ["VirtualMachineSummary", ["VimWs25::VirtualMachineSummary[]", XSD::QName.new("urn:vim25", "VirtualMachineSummary")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineTargetInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTargetInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsConfigInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ToolsConfigInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["toolsVersion", "SOAP::SOAPInt", [0, 1]],
      ["afterPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["afterResume", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestStandby", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestShutdown", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestReboot", "SOAP::SOAPBoolean", [0, 1]],
      ["toolsUpgradePolicy", "SOAP::SOAPString", [0, 1]],
      ["pendingCustomization", "SOAP::SOAPString", [0, 1]],
      ["syncTimeWithHost", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineUsbInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsbInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPInt"],
      ["product", "SOAP::SOAPInt"],
      ["physicalPath", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]],
      ["summary", "VimWs25::VirtualMachineSummary", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualMachineUsbInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualMachineUsbInfo",
    :schema_element => [
      ["VirtualMachineUsbInfo", ["VimWs25::VirtualMachineUsbInfo[]", XSD::QName.new("urn:vim25", "VirtualMachineUsbInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualHardware,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardware",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["numCPU", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"],
      ["device", "VimWs25::VirtualDevice[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualHardwareOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualHardwareOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hwVersion", "SOAP::SOAPInt"],
      ["virtualDeviceOption", "VimWs25::VirtualDeviceOption[]", [1, nil]],
      ["deviceListReadonly", "SOAP::SOAPBoolean"],
      ["numCPU", "SOAP::SOAPInt[]", [1, nil]],
      ["numCpuReadonly", "SOAP::SOAPBoolean"],
      ["memoryMB", "VimWs25::LongOption"],
      ["numPCIControllers", "VimWs25::IntOption"],
      ["numIDEControllers", "VimWs25::IntOption"],
      ["numUSBControllers", "VimWs25::IntOption"],
      ["numSIOControllers", "VimWs25::IntOption"],
      ["numPS2Controllers", "VimWs25::IntOption"],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["numSupportedWwnPorts", "VimWs25::IntOption", [0, 1]],
      ["numSupportedWwnNodes", "VimWs25::IntOption", [0, 1]],
      ["resourceConfigOption", "VimWs25::ResourceConfigOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineImportSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineImportSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VimWs25::VAppEntityConfigInfo", [0, 1]],
      ["configSpec", "VimWs25::VirtualMachineConfigSpec"],
      ["resPoolEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckResult,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckResult",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["warning", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfCheckResult,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfCheckResult",
    :schema_element => [
      ["CheckResult", ["VimWs25::CheckResult[]", XSD::QName.new("urn:vim25", "CheckResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["options", "VimWs25::CustomizationOptions", [0, 1]],
      ["identity", "VimWs25::CustomizationIdentitySettings"],
      ["globalIPSettings", "VimWs25::CustomizationGlobalIPSettings"],
      ["nicSettingMap", "VimWs25::CustomizationAdapterMapping[]", [0, nil]],
      ["encryptionKey", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationFixedName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFixedName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationPrefixName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationPrefixName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["base", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationVirtualMachineName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationVirtualMachineName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationUnknownName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationCustomName,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationCustomName",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationPassword,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationPassword",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"],
      ["plainText", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationWinOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationWinOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["changeSID", "SOAP::SOAPBoolean"],
      ["deleteAccounts", "SOAP::SOAPBoolean"],
      ["reboot", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationLinuxOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLinuxOptions",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationGuiUnattended,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationGuiUnattended",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["password", "VimWs25::CustomizationPassword", [0, 1]],
      ["timeZone", "SOAP::SOAPInt"],
      ["autoLogon", "SOAP::SOAPBoolean"],
      ["autoLogonCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationUserData,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUserData",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fullName", "SOAP::SOAPString"],
      ["orgName", "SOAP::SOAPString"],
      ["computerName", "VimWs25::CustomizationName"],
      ["productId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationGuiRunOnce,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationGuiRunOnce",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["commandList", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationIdentification,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIdentification",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["joinWorkgroup", "SOAP::SOAPString", [0, 1]],
      ["joinDomain", "SOAP::SOAPString", [0, 1]],
      ["domainAdmin", "SOAP::SOAPString", [0, 1]],
      ["domainAdminPassword", "VimWs25::CustomizationPassword", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationLicenseFilePrintData,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLicenseFilePrintData",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["autoMode", "SOAP::SOAPString"],
      ["autoUsers", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationIdentitySettings,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIdentitySettings",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSysprepText,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprepText",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSysprep,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprep",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["guiUnattended", "VimWs25::CustomizationGuiUnattended"],
      ["userData", "VimWs25::CustomizationUserData"],
      ["guiRunOnce", "VimWs25::CustomizationGuiRunOnce", [0, 1]],
      ["identification", "VimWs25::CustomizationIdentification"],
      ["licenseFilePrintData", "VimWs25::CustomizationLicenseFilePrintData", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationLinuxPrep,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLinuxPrep",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["hostName", "VimWs25::CustomizationName"],
      ["domain", "SOAP::SOAPString"],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["hwClockUTC", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationGlobalIPSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationGlobalIPSettings",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["dnsSuffixList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationIPSettingsIpV6AddressSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIPSettingsIpV6AddressSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::CustomizationIpV6Generator[]", [1, nil]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationIPSettings,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIPSettings",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ip", "VimWs25::CustomizationIpGenerator"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]],
      ["ipV6Spec", "VimWs25::CustomizationIPSettingsIpV6AddressSpec", [0, 1]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["primaryWINS", "SOAP::SOAPString", [0, 1]],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]],
      ["netBIOS", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIpGenerator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationDhcpIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationDhcpIpGenerator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationFixedIp,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFixedIp",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationUnknownIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownIpGenerator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationCustomIpGenerator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationCustomIpGenerator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationIpV6Generator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfCustomizationIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfCustomizationIpV6Generator",
    :schema_element => [
      ["CustomizationIpV6Generator", ["VimWs25::CustomizationIpV6Generator[]", XSD::QName.new("urn:vim25", "CustomizationIpV6Generator")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationDhcpIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationDhcpIpV6Generator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationStatelessIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationStatelessIpV6Generator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationFixedIpV6,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationFixedIpV6",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["subnetMask", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationAutoIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationAutoIpV6Generator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationUnknownIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationUnknownIpV6Generator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationCustomIpV6Generator,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationCustomIpV6Generator",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationAdapterMapping,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationAdapterMapping",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["adapter", "VimWs25::CustomizationIPSettings"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfCustomizationAdapterMapping,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfCustomizationAdapterMapping",
    :schema_element => [
      ["CustomizationAdapterMapping", ["VimWs25::CustomizationAdapterMapping[]", XSD::QName.new("urn:vim25", "CustomizationAdapterMapping")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskMappingPartitionInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingPartitionInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskMappingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VimWs25::HostDiskMappingPartitionInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["exclusive", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskMappingPartitionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingPartitionOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfHostDiskMappingPartitionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfHostDiskMappingPartitionOption",
    :schema_element => [
      ["HostDiskMappingPartitionOption", ["VimWs25::HostDiskMappingPartitionOption[]", XSD::QName.new("urn:vim25", "HostDiskMappingPartitionOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskMappingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskMappingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VimWs25::HostDiskMappingPartitionOption[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ParaVirtualSCSIController,
    :schema_ns => "urn:vim25",
    :schema_type => "ParaVirtualSCSIController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ParaVirtualSCSIControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ParaVirtualSCSIControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualBusLogicController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualBusLogicController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualBusLogicControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualBusLogicControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromIsoBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromIsoBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromPassthroughBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromPassthroughBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromRemotePassthroughBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemotePassthroughBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromAtapiBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromAtapiBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromRemoteAtapiBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemoteAtapiBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdrom,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdrom",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromIsoBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromIsoBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromPassthroughBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromPassthroughBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["exclusive", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromRemotePassthroughBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemotePassthroughBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["exclusive", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromAtapiBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromAtapiBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromRemoteAtapiBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromRemoteAtapiBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualCdromOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualCdromOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceFileBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceFileBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceRemoteDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceRemoteDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDevicePipeBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDevicePipeBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceURIBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceURIBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceConnectInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConnectInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startConnected", "SOAP::SOAPBoolean"],
      ["allowGuestControl", "SOAP::SOAPBoolean"],
      ["connected", "SOAP::SOAPBoolean"],
      ["status", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualDevice",
    :schema_element => [
      ["VirtualDevice", ["VimWs25::VirtualDevice[]", XSD::QName.new("urn:vim25", "VirtualDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualDeviceBackingOption",
    :schema_element => [
      ["VirtualDeviceBackingOption", ["VimWs25::VirtualDeviceBackingOption[]", XSD::QName.new("urn:vim25", "VirtualDeviceBackingOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceFileBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceFileBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceRemoteDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceRemoteDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDevicePipeBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDevicePipeBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceURIBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceURIBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VimWs25::ChoiceOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceConnectOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConnectOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["startConnected", "VimWs25::BoolOption"],
      ["allowGuestControl", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualDeviceOption",
    :schema_element => [
      ["VirtualDeviceOption", ["VimWs25::VirtualDeviceOption[]", XSD::QName.new("urn:vim25", "VirtualDeviceOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConfigSpec",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString", [0, 1]],
      ["fileOperation", "SOAP::SOAPString", [0, 1]],
      ["device", "VimWs25::VirtualDevice"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualDeviceConfigSpec,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualDeviceConfigSpec",
    :schema_element => [
      ["VirtualDeviceConfigSpec", ["VimWs25::VirtualDeviceConfigSpec[]", XSD::QName.new("urn:vim25", "VirtualDeviceConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer1BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer1BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskSparseVer1BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer2BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskSparseVer2BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer1BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer1BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskFlatVer1BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer2BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["thinProvisioned", "SOAP::SOAPBoolean", [0, 1]],
      ["eagerlyScrub", "SOAP::SOAPBoolean", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskFlatVer2BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskVer2BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskPartitionedRawDiskVer2BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskPartitionedRawDiskVer2BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["partition", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskMappingVer1BackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskMappingVer1BackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["lunUuid", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString", [0, 1]],
      ["compatibilityMode", "SOAP::SOAPString", [0, 1]],
      ["diskMode", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VimWs25::VirtualDiskRawDiskMappingVer1BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDisk",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["capacityInKB", "SOAP::SOAPLong"],
      ["shares", "VimWs25::SharesInfo", [0, 1]],
      ["storageIOAllocation", "VimWs25::StorageIOAllocationInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualDisk,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualDisk",
    :schema_element => [
      ["VirtualDisk", ["VimWs25::VirtualDisk[]", XSD::QName.new("urn:vim25", "VirtualDisk")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer1BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer1BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskModes", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskSparseVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskSparseVer2BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer1BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer1BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskFlatVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskFlatVer2BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["split", "VimWs25::BoolOption"],
      ["writeThrough", "VimWs25::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"],
      ["thinProvisioned", "VimWs25::BoolOption", [0, 1]],
      ["eagerlyScrub", "VimWs25::BoolOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskVer2BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["descriptorFileNameExtensions", "VimWs25::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskPartitionedRawDiskVer2BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskPartitionedRawDiskVer2BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["descriptorFileNameExtensions", "VimWs25::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskRawDiskMappingVer1BackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskRawDiskMappingVer1BackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["descriptorFileNameExtensions", "VimWs25::ChoiceOption", [0, 1]],
      ["compatibilityMode", "VimWs25::ChoiceOption"],
      ["diskMode", "VimWs25::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["capacityInKB", "VimWs25::LongOption"],
      ["ioAllocationOption", "VimWs25::StorageIOAllocationOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualE1000,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualE1000Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000Option",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  # VirtualE1000e added from VIM 5.5
  LiteralRegistry.register(
    :class => VimWs25::VirtualE1000e,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000e",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  # VirtualE1000e added from VIM 5.5
  LiteralRegistry.register(
    :class => VimWs25::VirtualE1000eOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualE1000eOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEnsoniq1371,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEnsoniq1371",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEnsoniq1371Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEnsoniq1371Option",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardNetworkBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardNetworkBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VimWs25::ManagedObjectReference", [0, 1]],
      ["inPassthroughMode", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardLegacyNetworkBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardLegacyNetworkBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardDistributedVirtualPortBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardDistributedVirtualPortBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["port", "VimWs25::DistributedVirtualSwitchPortConnection"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCard",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardNetworkBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardNetworkBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardLegacyNetworkBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardLegacyNetworkBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardDVPortBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardDVPortBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyImageBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyImageBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyRemoteDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyRemoteDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppy,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppy",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyImageBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyImageBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyRemoteDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyRemoteDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualFloppyOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualFloppyOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualIDEController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualIDEController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualIDEControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualIDEControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numIDEDisks", "VimWs25::IntOption"],
      ["numIDECdroms", "VimWs25::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualKeyboard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualKeyboard",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualKeyboardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualKeyboardOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualLsiLogicController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualLsiLogicControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualLsiLogicSASController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicSASController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualLsiLogicSASControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualLsiLogicSASControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCIController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCIControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIControllers", "VimWs25::IntOption"],
      ["numEthernetCards", "VimWs25::IntOption"],
      ["numVideoCards", "VimWs25::IntOption"],
      ["numSoundCards", "VimWs25::IntOption"],
      ["numVmiRoms", "VimWs25::IntOption"],
      ["numVmciDevices", "VimWs25::IntOption", [0, 1]],
      ["numPCIPassthroughDevices", "VimWs25::IntOption", [0, 1]],
      ["numSasSCSIControllers", "VimWs25::IntOption", [0, 1]],
      ["numVmxnet3EthernetCards", "VimWs25::IntOption", [0, 1]],
      ["numParaVirtualSCSIControllers", "VimWs25::IntOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCIPassthroughDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthroughDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["id", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPString"],
      ["systemId", "SOAP::SOAPString"],
      ["vendorId", "SOAP::SOAPShort"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCIPassthrough,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthrough",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCIPassthroughDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthroughDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCIPassthroughOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCIPassthroughOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCNet32,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCNet32",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPCNet32Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPCNet32Option",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMorphing", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPS2Controller,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPS2Controller",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPS2ControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPS2ControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numKeyboards", "VimWs25::IntOption"],
      ["numPointingDevices", "VimWs25::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualParallelPortFileBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortFileBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualParallelPortDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualParallelPort,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPort",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualParallelPortFileBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortFileBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualParallelPortDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualParallelPortOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualParallelPortOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPointingDeviceDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostPointingDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPointingDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPointingDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"],
      ["hostPointingDevice", "VimWs25::ChoiceOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPointingDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayOfVirtualSCSISharing,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayOfVirtualSCSISharing",
    :schema_element => [
      ["VirtualSCSISharing", ["SOAP::SOAPString[]", XSD::QName.new("urn:vim25", "VirtualSCSISharing")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSIController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "SOAP::SOAPString"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSIControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VimWs25::IntOption"],
      ["numSCSICdroms", "VimWs25::IntOption"],
      ["numSCSIPassthrough", "VimWs25::IntOption"],
      ["sharing", "SOAP::SOAPString[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VimWs25::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSIPassthroughDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthroughDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSIPassthrough,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthrough",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSIPassthroughDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthroughDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSIPassthroughOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSIPassthroughOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSIOController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSIOController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSIOControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSIOControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numFloppyDrives", "VimWs25::IntOption"],
      ["numSerialPorts", "VimWs25::IntOption"],
      ["numParallelPorts", "VimWs25::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortFileBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortFileBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortPipeBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortPipeBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"],
      ["endpoint", "SOAP::SOAPString"],
      ["noRxLoss", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortURIBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortURIBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPort,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPort",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["yieldOnPoll", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortFileBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortFileBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VimWs25::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortPipeBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortPipeBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["endpoint", "VimWs25::ChoiceOption"],
      ["noRxLoss", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortURIBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortURIBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VimWs25::ChoiceOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["yieldOnPoll", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSoundBlaster16,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundBlaster16",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSoundBlaster16Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundBlaster16Option",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSoundCardDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCardDeviceBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSoundCard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCard",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSoundCardDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCardDeviceBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSoundCardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSoundCardOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBUSBBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBUSBBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBRemoteHostBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBRemoteHostBackingInfo",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSB,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSB",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["vendor", "SOAP::SOAPInt", [0, 1]],
      ["product", "SOAP::SOAPInt", [0, 1]],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBController,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBController",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["autoConnectDevices", "SOAP::SOAPBoolean", [0, 1]],
      ["ehciEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBControllerOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBControllerOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VimWs25::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["autoConnectDevices", "VimWs25::BoolOption"],
      ["ehciSupported", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBUSBBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBUSBBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBRemoteHostBackingOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBRemoteHostBackingOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualUSBOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualUSBOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineVMCIDevice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVMCIDevice",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["id", "SOAP::SOAPLong", [0, 1]],
      ["allowUnrestrictedCommunication", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineVMCIDeviceOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVMCIDeviceOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["allowUnrestrictedCommunication", "VimWs25::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineVMIROM,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVMIROM",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVMIROMOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVMIROMOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineVideoCard,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineVideoCard",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["videoRamSizeInKB", "SOAP::SOAPLong", [0, 1]],
      ["numDisplays", "SOAP::SOAPInt", [0, 1]],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["enable3DSupport", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVideoCardOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVideoCardOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["videoRamSizeInKB", "VimWs25::LongOption", [0, 1]],
      ["numDisplays", "VimWs25::IntOption", [0, 1]],
      ["useAutoDetect", "VimWs25::BoolOption", [0, 1]],
      ["support3D", "VimWs25::BoolOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVmxnet,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVmxnet2,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet2",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVmxnet2Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet2Option",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVmxnet3,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet3",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VimWs25::Description", [0, 1]],
      ["backing", "VimWs25::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VimWs25::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVmxnet3Option,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnet3Option",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualVmxnetOption,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualVmxnetOption",
    :schema_qualified => false,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VimWs25::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VimWs25::BoolOption", [0, 1]],
      ["backingOption", "VimWs25::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VimWs25::ChoiceOption"],
      ["macType", "VimWs25::ChoiceOption"],
      ["wakeOnLanEnabled", "VimWs25::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ObjectUpdateKind,
    :schema_ns => "urn:vim25",
    :schema_type => "ObjectUpdateKind"
  )

  LiteralRegistry.register(
    :class => VimWs25::PropertyChangeOp,
    :schema_ns => "urn:vim25",
    :schema_type => "PropertyChangeOp"
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigSpecOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "ConfigSpecOperation"
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreAccessible,
    :schema_ns => "urn:vim25",
    :schema_type => "DatastoreAccessible"
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticManagerLogCreator,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogCreator"
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticManagerLogFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticManagerLogFormat"
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchProductSpecOperationType,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchProductSpecOperationType"
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchNicTeamingPolicyMode,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchNicTeamingPolicyMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemConnectionState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemConnectionState"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemPowerState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemPowerState"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostStandbyMode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostStandbyMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseState,
    :schema_ns => "urn:vim25",
    :schema_type => "HttpNfcLeaseState"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseManagerState,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerState"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseManagerLicenseKey,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseManagerLicenseKey"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseFeatureInfoUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfoUnit"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseFeatureInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfoState"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseFeatureInfoSourceRestriction,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseFeatureInfoSourceRestriction"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseReservationInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseReservationInfoState"
  )

  LiteralRegistry.register(
    :class => VimWs25::ManagedEntityStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ManagedEntityStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfCreateImportSpecParamsDiskProvisioningType,
    :schema_ns => "urn:vim25",
    :schema_type => "OvfCreateImportSpecParamsDiskProvisioningType"
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfFormat,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfFormat"
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfSummaryType,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfSummaryType"
  )

  LiteralRegistry.register(
    :class => VimWs25::PerfStatsType,
    :schema_ns => "urn:vim25",
    :schema_type => "PerfStatsType"
  )

  LiteralRegistry.register(
    :class => VimWs25::PerformanceManagerUnit,
    :schema_ns => "urn:vim25",
    :schema_type => "PerformanceManagerUnit"
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateMigrationTestType,
    :schema_ns => "urn:vim25",
    :schema_type => "ValidateMigrationTestType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionCompatibilityType,
    :schema_ns => "urn:vim25",
    :schema_type => "VMotionCompatibilityType"
  )

  LiteralRegistry.register(
    :class => VimWs25::SharesLevel,
    :schema_ns => "urn:vim25",
    :schema_type => "SharesLevel"
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskFilterSpecRecursionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecRecursionOption"
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskFilterSpecTimeOption,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskFilterSpecTimeOption"
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskInfoState,
    :schema_ns => "urn:vim25",
    :schema_type => "TaskInfoState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualAppVAppState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualAppVAppState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskAdapterType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskAdapterType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachinePowerState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePowerState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineAppHeartbeatStatusType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineAppHeartbeatStatusType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConnectionState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConnectionState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineMovePriority,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMovePriority"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFaultToleranceState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFaultToleranceState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineRecordReplayState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRecordReplayState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineNeedSecondaryReason,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineNeedSecondaryReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineTicketType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTicketType"
  )

  LiteralRegistry.register(
    :class => VimWs25::ActionParameter,
    :schema_ns => "urn:vim25",
    :schema_type => "ActionParameter"
  )

  LiteralRegistry.register(
    :class => VimWs25::StateAlarmOperator,
    :schema_ns => "urn:vim25",
    :schema_type => "StateAlarmOperator"
  )

  LiteralRegistry.register(
    :class => VimWs25::EventAlarmExpressionComparisonOperator,
    :schema_ns => "urn:vim25",
    :schema_type => "EventAlarmExpressionComparisonOperator"
  )

  LiteralRegistry.register(
    :class => VimWs25::MetricAlarmOperator,
    :schema_ns => "urn:vim25",
    :schema_type => "MetricAlarmOperator"
  )

  LiteralRegistry.register(
    :class => VimWs25::ActionType,
    :schema_ns => "urn:vim25",
    :schema_type => "ActionType"
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsBehavior,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsBehavior"
  )

  LiteralRegistry.register(
    :class => VimWs25::DpmBehavior,
    :schema_ns => "urn:vim25",
    :schema_type => "DpmBehavior"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasAamNodeStateDasState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasAamNodeStateDasState"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasConfigInfoServiceState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasConfigInfoServiceState"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasConfigInfoVmMonitoringState,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasConfigInfoVmMonitoringState"
  )

  LiteralRegistry.register(
    :class => VimWs25::DasVmPriority,
    :schema_ns => "urn:vim25",
    :schema_type => "DasVmPriority"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasVmSettingsRestartPriority,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmSettingsRestartPriority"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterDasVmSettingsIsolationResponse,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterDasVmSettingsIsolationResponse"
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsRecommendationReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "DrsRecommendationReasonCode"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPowerOperationType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPowerOperationType"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterPowerOnVmOption,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterPowerOnVmOption"
  )

  LiteralRegistry.register(
    :class => VimWs25::RecommendationType,
    :schema_ns => "urn:vim25",
    :schema_type => "RecommendationType"
  )

  LiteralRegistry.register(
    :class => VimWs25::RecommendationReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "RecommendationReasonCode"
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortStatusVmDirectPathGen2InactiveReasonNetwork,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortStatusVmDirectPathGen2InactiveReasonNetwork"
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortStatusVmDirectPathGen2InactiveReasonOther,
    :schema_ns => "urn:vim25",
    :schema_type => "DVPortStatusVmDirectPathGen2InactiveReasonOther"
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualPortgroupPortgroupType,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPortgroupPortgroupType"
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualPortgroupMetaTagName,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualPortgroupMetaTagName"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDistributedVirtualSwitchManagerNetworkResourcePoolKey,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDistributedVirtualSwitchManagerNetworkResourcePoolKey"
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchHostMemberHostComponentState,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchHostMemberHostComponentState"
  )

  LiteralRegistry.register(
    :class => VimWs25::DistributedVirtualSwitchPortConnecteeConnecteeType,
    :schema_ns => "urn:vim25",
    :schema_type => "DistributedVirtualSwitchPortConnecteeConnecteeType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VmwareDistributedVirtualSwitchPvlanPortType,
    :schema_ns => "urn:vim25",
    :schema_type => "VmwareDistributedVirtualSwitchPvlanPortType"
  )

  LiteralRegistry.register(
    :class => VimWs25::EventEventSeverity,
    :schema_ns => "urn:vim25",
    :schema_type => "EventEventSeverity"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDisconnectedEventReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDisconnectedEventReasonCode"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDasErrorEventHostDasErrorReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDasErrorEventHostDasErrorReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::VmShutdownOnIsolationEventOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "VmShutdownOnIsolationEventOperation"
  )

  LiteralRegistry.register(
    :class => VimWs25::VmDasBeingResetEventReasonCode,
    :schema_ns => "urn:vim25",
    :schema_type => "VmDasBeingResetEventReasonCode"
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFailedStartingSecondaryEventFailureReason,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFailedStartingSecondaryEventFailureReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::EventCategory,
    :schema_ns => "urn:vim25",
    :schema_type => "EventCategory"
  )

  LiteralRegistry.register(
    :class => VimWs25::EventFilterSpecRecursionOption,
    :schema_ns => "urn:vim25",
    :schema_type => "EventFilterSpecRecursionOption"
  )

  LiteralRegistry.register(
    :class => VimWs25::AffinityType,
    :schema_ns => "urn:vim25",
    :schema_type => "AffinityType"
  )

  LiteralRegistry.register(
    :class => VimWs25::AgentInstallFailedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "AgentInstallFailedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotMoveFaultToleranceVmMoveType,
    :schema_ns => "urn:vim25",
    :schema_type => "CannotMoveFaultToleranceVmMoveType"
  )

  LiteralRegistry.register(
    :class => VimWs25::DasConfigFaultDasConfigFaultReason,
    :schema_ns => "urn:vim25",
    :schema_type => "DasConfigFaultDasConfigFaultReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceNotSupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "DeviceNotSupportedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::FtIssuesOnHostHostSelectionType,
    :schema_ns => "urn:vim25",
    :schema_type => "FtIssuesOnHostHostSelectionType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIncompatibleForFaultToleranceReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForFaultToleranceReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIncompatibleForRecordReplayReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIncompatibleForRecordReplayReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseAssignmentFailedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "LicenseAssignmentFailedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedDeviceForFTDeviceType,
    :schema_ns => "urn:vim25",
    :schema_type => "NotSupportedDeviceForFTDeviceType"
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusIncompatibleReason,
    :schema_ns => "urn:vim25",
    :schema_type => "NumVirtualCpusIncompatibleReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssueReasonForIssue,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceConfigIssueReasonForIssue"
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceInvalidFileBackingDeviceType,
    :schema_ns => "urn:vim25",
    :schema_type => "VmFaultToleranceInvalidFileBackingDeviceType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostActiveDirectoryInfoDomainMembershipStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostActiveDirectoryInfoDomainMembershipStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartAction,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartAction"
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartWaitHeartbeatSetting,
    :schema_ns => "urn:vim25",
    :schema_type => "AutoStartWaitHeartbeatSetting"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostReplayUnsupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostReplayUnsupportedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCapabilityFtUnsupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCapabilityFtUnsupportedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCapabilityVmDirectPathGen2UnsupportedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCapabilityVmDirectPathGen2UnsupportedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigChangeMode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigChangeMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigChangeOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "HostConfigChangeOperation"
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticPartitionStorageType,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticPartitionStorageType"
  )

  LiteralRegistry.register(
    :class => VimWs25::DiagnosticPartitionType,
    :schema_ns => "urn:vim25",
    :schema_type => "DiagnosticPartitionType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDiskPartitionInfoType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDiskPartitionInfoType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFeatureVersionKey,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFeatureVersionKey"
  )

  LiteralRegistry.register(
    :class => VimWs25::FileSystemMountInfoVStorageSupportStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "FileSystemMountInfoVStorageSupportStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCpuPowerManagementInfoPolicyType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPowerManagementInfoPolicyType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCpuPackageVendor,
    :schema_ns => "urn:vim25",
    :schema_type => "HostCpuPackageVendor"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostHardwareElementStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostHardwareElementStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::FibreChannelPortType,
    :schema_ns => "urn:vim25",
    :schema_type => "FibreChannelPortType"
  )

  LiteralRegistry.register(
    :class => VimWs25::InternetScsiSnsDiscoveryMethod,
    :schema_ns => "urn:vim25",
    :schema_type => "InternetScsiSnsDiscoveryMethod"
  )

  LiteralRegistry.register(
    :class => VimWs25::SlpDiscoveryMethod,
    :schema_ns => "urn:vim25",
    :schema_type => "SlpDiscoveryMethod"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaChapAuthenticationType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaChapAuthenticationType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInternetScsiHbaDigestType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostInternetScsiHbaDigestType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpConfigIpV6AddressConfigType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6AddressConfigType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIpConfigIpV6AddressStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostIpConfigIpV6AddressStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::LinkDiscoveryProtocolConfigProtocolType,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkDiscoveryProtocolConfigProtocolType"
  )

  LiteralRegistry.register(
    :class => VimWs25::LinkDiscoveryProtocolConfigOperationType,
    :schema_ns => "urn:vim25",
    :schema_type => "LinkDiscoveryProtocolConfigOperationType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostLowLevelProvisioningManagerReloadTarget,
    :schema_ns => "urn:vim25",
    :schema_type => "HostLowLevelProvisioningManagerReloadTarget"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineMemoryAllocationPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineMemoryAllocationPolicy"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostMountMode,
    :schema_ns => "urn:vim25",
    :schema_type => "HostMountMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::MultipathState,
    :schema_ns => "urn:vim25",
    :schema_type => "MultipathState"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNumericSensorHealthState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumericSensorHealthState"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNumericSensorType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostNumericSensorType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerIntegrityStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerIntegrityStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPatchManagerInstallState,
    :schema_ns => "urn:vim25",
    :schema_type => "HostPatchManagerInstallState"
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicVmDirectPathGen2SupportedMode,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicVmDirectPathGen2SupportedMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysicalNicResourcePoolSchedulerDisallowedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "PhysicalNicResourcePoolSchedulerDisallowedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::PortGroupConnecteeType,
    :schema_ns => "urn:vim25",
    :schema_type => "PortGroupConnecteeType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallRuleDirection,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRuleDirection"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostFirewallRuleProtocol,
    :schema_ns => "urn:vim25",
    :schema_type => "HostFirewallRuleProtocol"
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunType,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunType"
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunState,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunState"
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunDescriptorQuality,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunDescriptorQuality"
  )

  LiteralRegistry.register(
    :class => VimWs25::ScsiLunVStorageSupportStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ScsiLunVStorageSupportStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostServicePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "HostServicePolicy"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSnmpAgentCapability,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSnmpAgentCapability"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostSystemIdentificationInfoIdentifier,
    :schema_ns => "urn:vim25",
    :schema_type => "HostSystemIdentificationInfoIdentifier"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostDigestInfoDigestMethodType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostDigestInfoDigestMethodType"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsExtentUnresolvedReason,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsExtentUnresolvedReason"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostUnresolvedVmfsResolutionSpecVmfsUuidResolution,
    :schema_ns => "urn:vim25",
    :schema_type => "HostUnresolvedVmfsResolutionSpecVmfsUuidResolution"
  )

  LiteralRegistry.register(
    :class => VimWs25::HostVirtualNicManagerNicType,
    :schema_ns => "urn:vim25",
    :schema_type => "HostVirtualNicManagerNicType"
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpConfigInfoIpAddressOrigin,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfoIpAddressOrigin"
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpConfigInfoIpAddressStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpConfigInfoIpAddressStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpStackInfoEntryType,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoEntryType"
  )

  LiteralRegistry.register(
    :class => VimWs25::NetIpStackInfoPreference,
    :schema_ns => "urn:vim25",
    :schema_type => "NetIpStackInfoPreference"
  )

  LiteralRegistry.register(
    :class => VimWs25::NetBIOSConfigInfoMode,
    :schema_ns => "urn:vim25",
    :schema_type => "NetBIOSConfigInfoMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::ArrayUpdateOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "ArrayUpdateOperation"
  )

  LiteralRegistry.register(
    :class => VimWs25::ComplianceResultStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ComplianceResultStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileNumericComparator,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileNumericComparator"
  )

  LiteralRegistry.register(
    :class => VimWs25::ClusterProfileServiceType,
    :schema_ns => "urn:vim25",
    :schema_type => "ClusterProfileServiceType"
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileExecuteResultStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "ProfileExecuteResultStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::DayOfWeek,
    :schema_ns => "urn:vim25",
    :schema_type => "DayOfWeek"
  )

  LiteralRegistry.register(
    :class => VimWs25::WeekOfMonth,
    :schema_ns => "urn:vim25",
    :schema_type => "WeekOfMonth"
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppCloneSpecProvisioningType,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppCloneSpecProvisioningType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppAutoStartAction,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppAutoStartAction"
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfoIpAllocationPolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfoIpAllocationPolicy"
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfoAllocationSchemes,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfoAllocationSchemes"
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppIPAssignmentInfoProtocols,
    :schema_ns => "urn:vim25",
    :schema_type => "VAppIPAssignmentInfoProtocols"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfoNpivWwnType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfoNpivWwnType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigInfoSwapPlacementType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigInfoSwapPlacementType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineConfigSpecNpivWwnOp,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineConfigSpecNpivWwnOp"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachinePowerOpType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePowerOpType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineStandbyActionType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineStandbyActionType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFileLayoutExFileType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFileLayoutExFileType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineHtSharing,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineHtSharing"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachinePowerOffBehavior,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachinePowerOffBehavior"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfoMonitorType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfoMonitorType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfoVirtualMmuUsage,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfoVirtualMmuUsage"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineFlagInfoVirtualExecUsage,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineFlagInfoVirtualExecUsage"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineToolsStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineToolsStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineToolsVersionStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineToolsVersionStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineToolsRunningStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineToolsRunningStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineGuestState,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestState"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineGuestOsFamily,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestOsFamily"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineGuestOsIdentifier,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineGuestOsIdentifier"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineRelocateTransformation,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateTransformation"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineRelocateDiskMoveOptions,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineRelocateDiskMoveOptions"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineScsiPassthroughType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineScsiPassthroughType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineTargetInfoConfigurationTag,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineTargetInfoConfigurationTag"
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradePolicy,
    :schema_ns => "urn:vim25",
    :schema_type => "UpgradePolicy"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineUsbInfoSpeed,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsbInfoSpeed"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualMachineUsbInfoFamily,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualMachineUsbInfoFamily"
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckTestType,
    :schema_ns => "urn:vim25",
    :schema_type => "CheckTestType"
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSysprepRebootOption,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationSysprepRebootOption"
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationLicenseDataMode,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationLicenseDataMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationNetBIOSMode,
    :schema_ns => "urn:vim25",
    :schema_type => "CustomizationNetBIOSMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceConnectInfoStatus,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConnectInfoStatus"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceFileExtension,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceFileExtension"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceURIBackingOptionDirection,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceURIBackingOptionDirection"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceConfigSpecOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConfigSpecOperation"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDeviceConfigSpecFileOperation,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDeviceConfigSpecFileOperation"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskMode,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskCompatibilityMode,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualDiskCompatibilityMode"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardLegacyNetworkDeviceName,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardLegacyNetworkDeviceName"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardMacType,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualEthernetCardMacType"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualPointingDeviceHostChoice,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualPointingDeviceHostChoice"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSCSISharing,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSCSISharing"
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualSerialPortEndPoint,
    :schema_ns => "urn:vim25",
    :schema_type => "VirtualSerialPortEndPoint"
  )

  LiteralRegistry.register(
    :class => VimWs25::AddAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddAuthorizationRole",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddAuthorizationRoleResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddAuthorizationRoleResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAuthorizationRole",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["failIfUsed", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAuthorizationRoleResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAuthorizationRoleResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateAuthorizationRoleRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateAuthorizationRole",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["newName", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateAuthorizationRoleResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateAuthorizationRoleResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::MergePermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MergePermissions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["srcRoleId", "SOAP::SOAPInt"],
      ["dstRoleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MergePermissionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MergePermissionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveRolePermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveRolePermissions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["roleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveRolePermissionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveRolePermissionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Permission[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveEntityPermissions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveEntityPermissionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveEntityPermissionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Permission[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveAllPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveAllPermissions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveAllPermissionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveAllPermissionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Permission[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetEntityPermissions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["permission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetEntityPermissionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetEntityPermissionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetEntityPermissionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetEntityPermissions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["permission", "VimWs25::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetEntityPermissionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetEntityPermissionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveEntityPermissionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveEntityPermission",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["user", "SOAP::SOAPString"],
      ["isGroup", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveEntityPermissionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveEntityPermissionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureClusterRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureCluster_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ClusterConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureCluster_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureCluster_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ApplyRecommendation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyRecommendationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ApplyRecommendationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelRecommendation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelRecommendationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelRecommendationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RecommendHostsForVmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RecommendHostsForVm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RecommendHostsForVmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RecommendHostsForVmResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ClusterHostRecommendation[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostConnectSpec"],
      ["asConnected", "SOAP::SOAPBoolean"],
      ["resourcePool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveInto_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveInto_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveInto_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveHostIntoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveHostInto_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["resourcePool", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveHostInto_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveHostInto_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRecommendationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshRecommendation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRecommendationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshRecommendationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveDasAdvancedRuntimeInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveDasAdvancedRuntimeInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveDasAdvancedRuntimeInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveDasAdvancedRuntimeInfoResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ClusterDasAdvancedRuntimeInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureComputeResourceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureComputeResource_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ComputeResourceConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureComputeResource_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureComputeResource_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddCustomFieldDef",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["moType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPolicy", "VimWs25::PrivilegePolicyDef", [0, 1]],
      ["fieldPolicy", "VimWs25::PrivilegePolicyDef", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddCustomFieldDefResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddCustomFieldDefResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::CustomFieldDef"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveCustomFieldDef",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveCustomFieldDefResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveCustomFieldDefResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameCustomFieldDefRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameCustomFieldDef",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameCustomFieldDefResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameCustomFieldDefResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SetFieldRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetField",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetFieldResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetFieldResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DoesCustomizationSpecExistRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DoesCustomizationSpecExist",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DoesCustomizationSpecExistResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DoesCustomizationSpecExistResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "GetCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "GetCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::OverwriteCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "OverwriteCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OverwriteCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "OverwriteCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DuplicateCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DuplicateCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DuplicateCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DuplicateCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSpecItemToXmlRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CustomizationSpecItemToXml",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["item", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationSpecItemToXmlResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CustomizationSpecItemToXmlResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::XmlToCustomizationSpecItemRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "XmlToCustomizationSpecItem",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specItemXml", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::XmlToCustomizationSpecItemResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "XmlToCustomizationSpecItemResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCustomizationResourcesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCustomizationResources",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["guestOs", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCustomizationResourcesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCustomizationResourcesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConnectionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConnectionInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hostname", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["username", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConnectionInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConnectionInfoResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostConnectInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnMultiVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnMultiVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["option", "VimWs25::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnMultiVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnMultiVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDatastoreResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDatastoreStorageInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDatastoreStorageInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDatastoreStorageInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDatastoreStorageInfoResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFilesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVirtualMachineFiles_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["mountPathDatastoreMapping", "VimWs25::DatastoreMountPathDatastorePair[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualMachineFiles_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVirtualMachineFiles_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameDatastoreResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyDatastoreResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDescriptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDescriptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDescriptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDescriptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::DiagnosticManagerLogDescriptor[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BrowseDiagnosticLogRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "BrowseDiagnosticLog",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["start", "SOAP::SOAPInt", [0, 1]],
      ["lines", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BrowseDiagnosticLogResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "BrowseDiagnosticLogResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::DiagnosticManagerLogHeader"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenerateLogBundlesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "GenerateLogBundles_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["includeDefault", "SOAP::SOAPBoolean"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenerateLogBundles_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "GenerateLogBundles_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FetchDVPortKeysRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FetchDVPortKeys",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["criteria", "VimWs25::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FetchDVPortKeysResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FetchDVPortKeysResponse",
    :schema_element => [
      ["returnval", ["SOAP::SOAPString[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FetchDVPortsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FetchDVPorts",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["criteria", "VimWs25::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FetchDVPortsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FetchDVPortsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::DistributedVirtualPort[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUsedVlanIdInDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUsedVlanIdInDvs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUsedVlanIdInDvsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUsedVlanIdInDvsResponse",
    :schema_element => [
      ["returnval", ["SOAP::SOAPInt[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureDvs_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVSConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDvs_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureDvs_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerformDvsProductSpecOperationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PerformDvsProductSpecOperation_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["operation", "SOAP::SOAPString"],
      ["productSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PerformDvsProductSpecOperation_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PerformDvsProductSpecOperation_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MergeDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MergeDvs_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MergeDvs_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MergeDvs_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddDVPortgroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddDVPortgroup_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVPortgroupConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddDVPortgroup_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddDVPortgroup_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveDVPortRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveDVPort_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]],
      ["destinationPortgroupKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveDVPort_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveDVPort_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDvsCapabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDvsCapability",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["capability", "VimWs25::DVSCapability"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDvsCapabilityResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDvsCapabilityResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDVPortRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureDVPort_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["port", "VimWs25::DVPortConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDVPort_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureDVPort_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDVPortStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDVPortState",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portKeys", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDVPortStateResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDVPortStateResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RectifyDvsHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RectifyDvsHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hosts", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RectifyDvsHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RectifyDvsHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateNetworkResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateNetworkResourcePool",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configSpec", "VimWs25::DVSNetworkResourcePoolConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateNetworkResourcePoolResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateNetworkResourcePoolResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableNetworkResourceManagementRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableNetworkResourceManagement",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["enable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableNetworkResourceManagementResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableNetworkResourceManagementResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigOptionDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfigOptionDescriptor",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigOptionDescriptorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfigOptionDescriptorResponse",
    :schema_element => [
      ["returnval", ["VimWs25::VirtualMachineConfigOptionDescriptor[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfigOption",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigOptionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfigOptionResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::VirtualMachineConfigOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigTargetRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfigTarget",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfigTargetResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfigTargetResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ConfigTarget", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryTargetCapabilitiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryTargetCapabilities",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryTargetCapabilitiesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryTargetCapabilitiesResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetCustomValueRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "setCustomValue",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetCustomValueResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "setCustomValueResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UnregisterExtension",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterExtensionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UnregisterExtensionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::FindExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindExtension",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindExtensionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindExtensionResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::Extension", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RegisterExtension",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extension", "VimWs25::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterExtensionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RegisterExtensionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateExtensionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateExtension",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extension", "VimWs25::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateExtensionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateExtensionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::GetPublicKeyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "GetPublicKey",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetPublicKeyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "GetPublicKeyResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetPublicKeyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetPublicKey",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["publicKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetPublicKeyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetPublicKeyResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SetExtensionCertificateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetExtensionCertificate",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["certificatePem", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetExtensionCertificateResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetExtensionCertificateResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveDatastoreFile_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveDatastoreFile_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveDatastoreFile_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CopyDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CopyDatastoreFile_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CopyDatastoreFile_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CopyDatastoreFile_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteDatastoreFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteDatastoreFile_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteDatastoreFile_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteDatastoreFile_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MakeDirectoryRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MakeDirectory",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["createParentDirectories", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MakeDirectoryResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MakeDirectoryResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ChangeOwnerRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ChangeOwner",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["owner", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ChangeOwnerResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ChangeOwnerResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateFolder",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateFolderResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateFolderResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveIntoFolder_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["list", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoFolder_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveIntoFolder_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::VirtualMachineConfigSpec"],
      ["pool", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RegisterVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["asTemplate", "SOAP::SOAPBoolean"],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RegisterVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateClusterRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCluster",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ClusterConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateClusterResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateClusterResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateClusterExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateClusterEx",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ClusterConfigSpecEx"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateClusterExResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateClusterExResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddStandaloneHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddStandaloneHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostConnectSpec"],
      ["compResSpec", "VimWs25::ComputeResourceConfigSpec", [0, 1]],
      ["addConnected", "SOAP::SOAPBoolean"],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddStandaloneHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddStandaloneHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDatacenterRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDatacenter",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDatacenterResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDatacenterResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterAndDestroyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UnregisterAndDestroy_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterAndDestroy_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UnregisterAndDestroy_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDVSRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDVS_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVSCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDVS_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDVS_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  # StoragePod added from VIM 5.5
  LiteralRegistry.register(
    :class => VimWs25::CreateStoragePodRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateStoragePod",
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  # StoragePod added from VIM 5.5
  LiteralRegistry.register(
    :class => VimWs25::CreateStoragePodResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateStoragePodResponse",
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetCollectorPageSizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetCollectorPageSize",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetCollectorPageSizeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetCollectorPageSizeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RewindCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RewindCollector",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RewindCollectorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RewindCollectorResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetCollector",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetCollectorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetCollectorResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyCollector",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyCollectorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyCollectorResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostConnectionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryHostConnectionInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostConnectionInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryHostConnectionInfoResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostConnectInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSystemResourcesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateSystemResources",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resourceInfo", "VimWs25::HostSystemResourceInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSystemResourcesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateSystemResourcesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconnectHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconnectHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cnxSpec", "VimWs25::HostConnectSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconnectHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconnectHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisconnectHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DisconnectHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisconnectHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DisconnectHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnterMaintenanceModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnterMaintenanceMode_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeout", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnterMaintenanceMode_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnterMaintenanceMode_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitMaintenanceModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExitMaintenanceMode_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitMaintenanceMode_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExitMaintenanceMode_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RebootHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RebootHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShutdownHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ShutdownHost_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShutdownHost_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ShutdownHost_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerDownHostToStandByRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerDownHostToStandBy_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerDownHostToStandBy_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerDownHostToStandBy_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerUpHostFromStandByRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerUpHostFromStandBy_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerUpHostFromStandBy_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerUpHostFromStandBy_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryMemoryOverheadRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryMemoryOverhead",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["memorySize", "SOAP::SOAPLong"],
      ["videoRamSize", "SOAP::SOAPInt", [0, 1]],
      ["numVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryMemoryOverheadResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryMemoryOverheadResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryMemoryOverheadExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryMemoryOverheadEx",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmConfigInfo", "VimWs25::VirtualMachineConfigInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryMemoryOverheadExResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryMemoryOverheadExResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureHostForDASRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureHostForDAS_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureHostForDAS_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureHostForDAS_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateFlagsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateFlags",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["flagInfo", "VimWs25::HostFlagInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateFlagsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateFlagsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::EnterLockdownModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnterLockdownMode",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnterLockdownModeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnterLockdownModeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitLockdownModeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExitLockdownMode",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExitLockdownModeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExitLockdownModeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireCimServicesTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireCimServicesTicket",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireCimServicesTicketResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireCimServicesTicketResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostServiceTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpmiRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpmi",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ipmiInfo", "VimWs25::HostIpmiInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpmiResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpmiResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveHardwareUptimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveHardwareUptime",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveHardwareUptimeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveHardwareUptimeResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseGetManifestRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseGetManifest",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseGetManifestResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseGetManifestResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HttpNfcLeaseManifestEntry[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseCompleteRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseComplete",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseCompleteResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseCompleteResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseAbortRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseAbort",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseAbortResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseAbortResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseProgressRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseProgress",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["percent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HttpNfcLeaseProgressResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "HttpNfcLeaseProgressResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryIpPoolsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryIpPools",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryIpPoolsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryIpPoolsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::IpPool[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateIpPool",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateIpPoolResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateIpPoolResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpPool",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["pool", "VimWs25::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpPoolResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpPoolResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyIpPoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyIpPool",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dc", "VimWs25::ManagedObjectReference"],
      ["id", "SOAP::SOAPInt"],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyIpPoolResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyIpPoolResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateAssignedLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateAssignedLicense",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "SOAP::SOAPString"],
      ["licenseKey", "SOAP::SOAPString"],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateAssignedLicenseResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateAssignedLicenseResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAssignedLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAssignedLicense",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAssignedLicenseResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAssignedLicenseResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAssignedLicensesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAssignedLicenses",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entityId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAssignedLicensesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAssignedLicensesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::LicenseAssignmentManagerLicenseAssignment[]", XSD::QName.new("urn:vim25", "returnval")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QuerySupportedFeaturesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QuerySupportedFeatures",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QuerySupportedFeaturesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QuerySupportedFeaturesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::LicenseFeatureInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryLicenseSourceAvailabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryLicenseSourceAvailability",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryLicenseSourceAvailabilityResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryLicenseSourceAvailabilityResponse",
    :schema_element => [
      ["returnval", ["VimWs25::LicenseAvailabilityInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryLicenseUsageRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryLicenseUsage",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryLicenseUsageResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryLicenseUsageResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::LicenseUsageInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetLicenseEditionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetLicenseEdition",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetLicenseEditionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetLicenseEditionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckLicenseFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckLicenseFeature",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckLicenseFeatureResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckLicenseFeatureResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableFeature",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableFeatureResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableFeatureResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableFeatureRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableFeature",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableFeatureResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableFeatureResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureLicenseSourceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigureLicenseSource",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["licenseSource", "VimWs25::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureLicenseSourceResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigureLicenseSourceResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLicense",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLicenseResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLicenseResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddLicense",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddLicenseResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddLicenseResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveLicense",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveLicenseResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveLicenseResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DecodeLicenseRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DecodeLicense",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DecodeLicenseResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DecodeLicenseResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLicenseLabelRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLicenseLabel",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"],
      ["labelValue", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLicenseLabelResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLicenseLabelResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveLicenseLabelRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveLicenseLabel",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveLicenseLabelResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveLicenseLabelResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReloadRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "Reload",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReloadResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReloadResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "Rename_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Rename_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "Rename_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "Destroy_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Destroy_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "Destroy_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyNetworkRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyNetwork",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyNetworkResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyNetworkResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ValidateHost",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["vhp", "VimWs25::OvfValidateHostParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateHostResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ValidateHostResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::OvfValidateHostResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ParseDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ParseDescriptor",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["pdp", "VimWs25::OvfParseDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ParseDescriptorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ParseDescriptorResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::OvfParseDescriptorResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateImportSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateImportSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["resourcePool", "VimWs25::ManagedObjectReference"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["cisp", "VimWs25::OvfCreateImportSpecParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateImportSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateImportSpecResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::OvfCreateImportSpecResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDescriptorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDescriptor",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["cdp", "VimWs25::OvfCreateDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDescriptorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDescriptorResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::OvfCreateDescriptorResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfProviderSummaryRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfProviderSummary",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfProviderSummaryResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfProviderSummaryResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::PerfProviderSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailablePerfMetricRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailablePerfMetric",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailablePerfMetricResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailablePerfMetricResponse",
    :schema_element => [
      ["returnval", ["VimWs25::PerfMetricId[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCounterRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfCounter",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["counterId", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCounterResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfCounterResponse",
    :schema_element => [
      ["returnval", ["VimWs25::PerfCounterInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCounterByLevelRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfCounterByLevel",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["level", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCounterByLevelResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfCounterByLevelResponse",
    :schema_element => [
      ["returnval", ["VimWs25::PerfCounterInfo[]", XSD::QName.new("urn:vim25", "returnval")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerf",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["querySpec", "VimWs25::PerfQuerySpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfResponse",
    :schema_element => [
      ["returnval", ["VimWs25::PerfEntityMetricBase[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCompositeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfComposite",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["querySpec", "VimWs25::PerfQuerySpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPerfCompositeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPerfCompositeResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::PerfCompositeMetric"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreatePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreatePerfInterval",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["intervalId", "VimWs25::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreatePerfIntervalResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreatePerfIntervalResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemovePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemovePerfInterval",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["samplePeriod", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemovePerfIntervalResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemovePerfIntervalResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePerfIntervalRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePerfInterval",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["interval", "VimWs25::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePerfIntervalResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePerfIntervalResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::EstimateDatabaseSizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EstimateDatabaseSize",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dbSizeParam", "VimWs25::DatabaseSizeParam"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EstimateDatabaseSizeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EstimateDatabaseSizeResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::DatabaseSizeEstimate"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["config", "VimWs25::ResourceConfigSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveIntoResourcePool",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["list", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveIntoResourcePoolResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveIntoResourcePoolResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateChildResourceConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateChildResourceConfiguration",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ResourceConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateChildResourceConfigurationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateChildResourceConfigurationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateResourcePoolRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateResourcePool",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::ResourceConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateResourcePoolResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateResourcePoolResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyChildrenRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyChildren",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyChildrenResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyChildrenResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVApp",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["resSpec", "VimWs25::ResourceConfigSpec"],
      ["configSpec", "VimWs25::VAppConfigSpec"],
      ["vmFolder", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVAppResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVAppResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateChildVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateChildVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::VirtualMachineConfigSpec"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateChildVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateChildVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterChildVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RegisterChildVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RegisterChildVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RegisterChildVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImportVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ImportVApp",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ImportSpec"],
      ["folder", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImportVAppResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ImportVAppResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryResourceConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryResourceConfigOption",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryResourceConfigOptionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryResourceConfigOptionResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ResourceConfigOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRuntimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshRuntime",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRuntimeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshRuntimeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByUuid",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByUuidResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByUuidResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByDatastorePathRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByDatastorePath",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByDatastorePathResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByDatastorePathResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByDnsNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByDnsName",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByDnsNameResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByDnsNameResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByIpRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByIp",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByIpResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByIpResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByInventoryPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByInventoryPath",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["inventoryPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindByInventoryPathResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindByInventoryPathResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindChildRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindChild",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindChildResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindChildResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAllByUuid",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByUuidResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAllByUuidResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByDnsNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAllByDnsName",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByDnsNameResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAllByDnsNameResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByIpRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAllByIp",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAllByIpResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAllByIpResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CurrentTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CurrentTime",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CurrentTimeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CurrentTimeResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveServiceContentRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveServiceContent",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveServiceContentResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveServiceContentResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ServiceContent"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateMigrationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ValidateMigration",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ValidateMigrationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ValidateMigrationResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Event[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVMotionCompatibility",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVMotionCompatibilityResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostVMotionCompatibility[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveProductComponentsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveProductComponents",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveProductComponentsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveProductComponentsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ProductComponentInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServiceMessageRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateServiceMessage",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServiceMessageResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateServiceMessageResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "Login",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginBySSPIRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginBySSPI",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["base64Token", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginBySSPIResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginBySSPIResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogoutRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "Logout",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogoutResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LogoutResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireLocalTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireLocalTicket",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireLocalTicketResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireLocalTicketResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::SessionManagerLocalTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TerminateSessionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "TerminateSession",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sessionId", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TerminateSessionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "TerminateSessionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SetLocaleRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetLocale",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["locale", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetLocaleResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetLocaleResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginExtensionBySubjectNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginExtensionBySubjectName",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginExtensionBySubjectNameResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginExtensionBySubjectNameResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginExtensionByCertificateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginExtensionByCertificate",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LoginExtensionByCertificateResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LoginExtensionByCertificateResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImpersonateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ImpersonateUser",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ImpersonateUserResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ImpersonateUserResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SessionIsActiveRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SessionIsActive",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sessionID", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SessionIsActiveResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SessionIsActiveResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireCloneTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireCloneTicket",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireCloneTicketResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireCloneTicketResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneSessionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneSession",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cloneTicket", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneSessionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneSessionResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureDatastoreIORMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigureDatastoreIORM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::StorageIORMConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureDatastoreIORM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigureDatastoreIORM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryIORMConfigOptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryIORMConfigOption",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryIORMConfigOptionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryIORMConfigOptionResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::StorageIORMConfigOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelTaskResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateProgressRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateProgress",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["percentDone", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateProgressResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateProgressResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SetTaskStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetTaskState",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["state", "SOAP::SOAPString"],
      ["result", nil, [0, 1]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetTaskStateResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetTaskStateResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SetTaskDescriptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetTaskDescription",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["description", "VimWs25::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetTaskDescriptionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetTaskDescriptionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadNextTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadNextTasks",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadNextTasksResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadNextTasksResponse",
    :schema_element => [
      ["returnval", ["VimWs25::TaskInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadPreviousTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadPreviousTasks",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadPreviousTasksResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadPreviousTasksResponse",
    :schema_element => [
      ["returnval", ["VimWs25::TaskInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCollectorForTasksRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCollectorForTasks",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::TaskFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCollectorForTasksResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCollectorForTasksResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["taskTypeId", "SOAP::SOAPString"],
      ["initiatedBy", "SOAP::SOAPString", [0, 1]],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateTaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::TaskInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveUserGroupsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveUserGroups",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["domain", "SOAP::SOAPString", [0, 1]],
      ["searchStr", "SOAP::SOAPString"],
      ["belongsToGroup", "SOAP::SOAPString", [0, 1]],
      ["belongsToUser", "SOAP::SOAPString", [0, 1]],
      ["exactMatch", "SOAP::SOAPBoolean"],
      ["findUsers", "SOAP::SOAPBoolean"],
      ["findGroups", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveUserGroupsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveUserGroupsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::UserSearchResult[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVAppConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVAppConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VAppConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVAppConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVAppConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLinkedChildrenRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLinkedChildren",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["addChangeSet", "VimWs25::VirtualAppLinkInfo[]", [0, nil]],
      ["removeSet", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLinkedChildrenResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLinkedChildrenResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneVApp_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["target", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VAppCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneVApp_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneVApp_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExportVApp",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportVAppResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExportVAppResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnVApp_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnVApp_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnVApp_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOffVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOffVApp_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOffVApp_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOffVApp_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SuspendVApp_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendVApp_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SuspendVApp_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterVAppRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "unregisterVApp_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterVApp_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "unregisterVApp_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["spec", "VimWs25::VirtualDiskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MoveVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MoveVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CopyVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CopyVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["destSpec", "VimWs25::VirtualDiskSpec", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CopyVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CopyVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtendVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["newCapacityKb", "SOAP::SOAPLong"],
      ["eagerZero", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtendVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskFragmentationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVirtualDiskFragmentation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskFragmentationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVirtualDiskFragmentationResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DefragmentVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DefragmentVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DefragmentVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DefragmentVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShrinkVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ShrinkVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["copy", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShrinkVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ShrinkVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InflateVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "InflateVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InflateVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "InflateVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EagerZeroVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EagerZeroVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EagerZeroVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EagerZeroVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ZeroFillVirtualDiskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ZeroFillVirtualDisk_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ZeroFillVirtualDisk_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ZeroFillVirtualDisk_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetVirtualDiskUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetVirtualDiskUuid",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetVirtualDiskUuidResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetVirtualDiskUuidResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVirtualDiskUuid",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskUuidResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVirtualDiskUuidResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskGeometryRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVirtualDiskGeometry",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVirtualDiskGeometryResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVirtualDiskGeometryResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostDiskDimensionsChs"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshStorageInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshStorageInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshStorageInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshStorageInfoResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateSnapshot_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["memory", "SOAP::SOAPBoolean"],
      ["quiesce", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateSnapshot_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateSnapshot_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RevertToCurrentSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RevertToCurrentSnapshot_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RevertToCurrentSnapshot_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RevertToCurrentSnapshot_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAllSnapshotsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAllSnapshots_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAllSnapshots_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAllSnapshots_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtractOvfEnvironmentRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtractOvfEnvironment",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtractOvfEnvironmentResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtractOvfEnvironmentResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOffVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOffVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOffVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOffVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SuspendVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SuspendVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShutdownGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ShutdownGuest",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ShutdownGuestResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ShutdownGuestResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RebootGuest",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootGuestResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RebootGuestResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::StandbyGuestRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StandbyGuest",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StandbyGuestResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StandbyGuestResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AnswerVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AnswerVM",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["questionId", "SOAP::SOAPString"],
      ["answerChoice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AnswerVMResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AnswerVMResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizeVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CustomizeVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizeVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CustomizeVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCustomizationSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCustomizationSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCustomizationSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCustomizationSpecResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MigrateVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["priority", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrateVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MigrateVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RelocateVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RelocateVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineRelocateSpec"],
      ["priority", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RelocateVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RelocateVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["folder", "VimWs25::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["spec", "VimWs25::VirtualMachineCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportVmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExportVm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportVmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExportVmResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MarkAsTemplateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MarkAsTemplate",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MarkAsTemplateResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MarkAsTemplateResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::MarkAsVirtualMachineRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MarkAsVirtualMachine",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pool", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MarkAsVirtualMachineResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MarkAsVirtualMachineResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UnregisterVM",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnregisterVMResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UnregisterVMResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetGuestInformationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetGuestInformation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetGuestInformationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetGuestInformationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::MountToolsInstallerRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MountToolsInstaller",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MountToolsInstallerResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MountToolsInstallerResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UnmountToolsInstallerRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UnmountToolsInstaller",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnmountToolsInstallerResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UnmountToolsInstallerResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeToolsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeTools_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["installerOptions", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeTools_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeTools_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireMksTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireMksTicket",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireMksTicketResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireMksTicketResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::VirtualMachineMksTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireTicketRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireTicket",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcquireTicketResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AcquireTicketResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::VirtualMachineTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetScreenResolutionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetScreenResolution",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetScreenResolutionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetScreenResolutionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DefragmentAllDisksRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DefragmentAllDisks",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DefragmentAllDisksResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DefragmentAllDisksResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateSecondaryVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateSecondaryVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateSecondaryVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TurnOffFaultToleranceForVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "TurnOffFaultToleranceForVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TurnOffFaultToleranceForVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "TurnOffFaultToleranceForVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MakePrimaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "MakePrimaryVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MakePrimaryVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "MakePrimaryVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TerminateFaultTolerantVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "TerminateFaultTolerantVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TerminateFaultTolerantVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "TerminateFaultTolerantVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableSecondaryVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableSecondaryVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableSecondaryVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableSecondaryVMRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableSecondaryVM_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableSecondaryVM_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableSecondaryVM_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetDisplayTopologyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetDisplayTopology",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["displays", "VimWs25::VirtualMachineDisplayTopology[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetDisplayTopologyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetDisplayTopologyResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::StartRecordingRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StartRecording_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartRecording_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StartRecording_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopRecordingRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StopRecording_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopRecording_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StopRecording_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartReplayingRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StartReplaying_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["replaySnapshot", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartReplaying_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StartReplaying_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopReplayingRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StopReplaying_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopReplaying_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StopReplaying_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PromoteDisksRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PromoteDisks_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["unlink", "SOAP::SOAPBoolean"],
      ["disks", "VimWs25::VirtualDisk[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PromoteDisks_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PromoteDisks_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateScreenshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateScreenshot_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateScreenshot_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateScreenshot_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryChangedDiskAreasRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryChangedDiskAreas",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["snapshot", "VimWs25::ManagedObjectReference", [0, 1]],
      ["deviceKey", "SOAP::SOAPInt"],
      ["startOffset", "SOAP::SOAPLong"],
      ["changeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryChangedDiskAreasResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryChangedDiskAreasResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::DiskChangeInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnownedFilesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUnownedFiles",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnownedFilesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUnownedFilesResponse",
    :schema_element => [
      ["returnval", ["SOAP::SOAPString[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReloadVirtualMachineFromPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "reloadVirtualMachineFromPath_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configurationPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReloadVirtualMachineFromPath_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "reloadVirtualMachineFromPath_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryFaultToleranceCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryFaultToleranceCompatibility",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryFaultToleranceCompatibilityResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryFaultToleranceCompatibilityResponse",
    :schema_element => [
      ["returnval", ["VimWs25::LocalizedMethodFault[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAlarm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveAlarmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveAlarmResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureAlarm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureAlarmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureAlarmResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateAlarm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateAlarmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateAlarmResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "GetAlarm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetAlarmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "GetAlarmResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AreAlarmActionsEnabledRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AreAlarmActionsEnabled",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AreAlarmActionsEnabledResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AreAlarmActionsEnabledResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableAlarmActionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableAlarmActions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableAlarmActionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableAlarmActionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::GetAlarmStateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "GetAlarmState",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GetAlarmStateResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "GetAlarmStateResponse",
    :schema_element => [
      ["returnval", ["VimWs25::AlarmState[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcknowledgeAlarmRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AcknowledgeAlarm",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["alarm", "VimWs25::ManagedObjectReference"],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AcknowledgeAlarmResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AcknowledgeAlarmResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDVPortgroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureDVPortgroup_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::DVPortgroupConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureDVPortgroup_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureDVPortgroup_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableDvsSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailableDvsSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableDvsSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailableDvsSpecResponse",
    :schema_element => [
      ["returnval", ["VimWs25::DistributedVirtualSwitchProductSpec[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryCompatibleHostForNewDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryCompatibleHostForNewDvs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryCompatibleHostForNewDvsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryCompatibleHostForNewDvsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryCompatibleHostForExistingDvsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryCompatibleHostForExistingDvs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["dvs", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryCompatibleHostForExistingDvsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryCompatibleHostForExistingDvsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsCompatibleHostSpecRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsCompatibleHostSpec",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsCompatibleHostSpecResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsCompatibleHostSpecResponse",
    :schema_element => [
      ["returnval", ["VimWs25::DistributedVirtualSwitchHostProductSpec[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsFeatureCapabilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsFeatureCapability",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsFeatureCapabilityResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsFeatureCapabilityResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::DVSFeatureCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsByUuidRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsByUuid",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsByUuidResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsByUuidResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsConfigTargetRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsConfigTarget",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["dvs", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsConfigTargetResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsConfigTargetResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::DVSManagerDvsConfigTarget"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsCheckCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsCheckCompatibility",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hostContainer", "VimWs25::DistributedVirtualSwitchManagerHostContainer"],
      ["dvsProductSpec", "VimWs25::DistributedVirtualSwitchManagerDvsProductSpec", [0, 1]],
      ["hostFilterSpec", "VimWs25::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDvsCheckCompatibilityResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDvsCheckCompatibilityResponse",
    :schema_element => [
      ["returnval", ["VimWs25::DistributedVirtualSwitchManagerCompatibilityResult[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadNextEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadNextEvents",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadNextEventsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadNextEventsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Event[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadPreviousEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadPreviousEvents",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadPreviousEventsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadPreviousEventsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Event[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveArgumentDescriptionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveArgumentDescription",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["eventTypeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveArgumentDescriptionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveArgumentDescriptionResponse",
    :schema_element => [
      ["returnval", ["VimWs25::EventArgDesc[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCollectorForEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCollectorForEvents",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateCollectorForEventsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateCollectorForEventsResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogUserEventRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "LogUserEvent",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["msg", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogUserEventResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LogUserEventResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryEventsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryEvents",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["filter", "VimWs25::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryEventsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryEventsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::Event[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PostEventRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "PostEvent",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["eventToPost", "VimWs25::Event"],
      ["taskInfo", "VimWs25::TaskInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PostEventResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "PostEventResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ActiveDirectoryFault,
    :schema_ns => "urn:vim25",
    :schema_name => "ActiveDirectoryFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AdminDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "AdminDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AdminNotDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "AdminNotDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AffinityConfigured,
    :schema_ns => "urn:vim25",
    :schema_name => "AffinityConfiguredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["configuredAffinity", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AgentInstallFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "AgentInstallFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["statusCode", "SOAP::SOAPInt", [0, 1]],
      ["installerOutput", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyBeingManaged,
    :schema_ns => "urn:vim25",
    :schema_name => "AlreadyBeingManagedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyConnected,
    :schema_ns => "urn:vim25",
    :schema_name => "AlreadyConnectedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyExists,
    :schema_ns => "urn:vim25",
    :schema_name => "AlreadyExistsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AlreadyUpgraded,
    :schema_ns => "urn:vim25",
    :schema_name => "AlreadyUpgradedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplicationQuiesceFault,
    :schema_ns => "urn:vim25",
    :schema_name => "ApplicationQuiesceFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AuthMinimumAdminPermission,
    :schema_ns => "urn:vim25",
    :schema_name => "AuthMinimumAdminPermissionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BlockedByFirewall,
    :schema_ns => "urn:vim25",
    :schema_name => "BlockedByFirewallFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessFile,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessFileFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessLocalSource,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessLocalSourceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessNetwork,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessNetworkFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmComponent,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessVmComponentFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmConfig,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessVmConfigFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmDevice,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessVmDeviceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAccessVmDisk,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAccessVmDiskFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmAsStandalone,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAddHostWithFTVmAsStandaloneFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmToDifferentCluster,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAddHostWithFTVmToDifferentClusterFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotAddHostWithFTVmToNonHACluster,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotAddHostWithFTVmToNonHAClusterFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotChangeDrsBehaviorForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotChangeDrsBehaviorForFtSecondaryFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotChangeHaSettingsForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotChangeHaSettingsForFtSecondaryFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotCreateFile,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotCreateFileFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDecryptPasswords,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotDecryptPasswordsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDeleteFile,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotDeleteFileFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDisableDrsOnClustersWithVApps,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotDisableDrsOnClustersWithVAppsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDisableSnapshot,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotDisableSnapshotFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotDisconnectHostWithFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotDisconnectHostWithFaultToleranceVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotModifyConfigCpuRequirements,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotModifyConfigCpuRequirementsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotMoveFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotMoveFaultToleranceVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["moveType", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CannotMoveHostWithFaultToleranceVm,
    :schema_ns => "urn:vim25",
    :schema_name => "CannotMoveHostWithFaultToleranceVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClockSkew,
    :schema_ns => "urn:vim25",
    :schema_name => "ClockSkewFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloneFromSnapshotNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "CloneFromSnapshotNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConcurrentAccess,
    :schema_ns => "urn:vim25",
    :schema_name => "ConcurrentAccessFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConnectedIso,
    :schema_ns => "urn:vim25",
    :schema_name => "ConnectedIsoFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["cdrom", "VimWs25::VirtualCdrom"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuCompatibilityUnknown,
    :schema_ns => "urn:vim25",
    :schema_name => "CpuCompatibilityUnknownFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "CpuHotPlugNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuIncompatible,
    :schema_ns => "urn:vim25",
    :schema_name => "CpuIncompatibleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuIncompatible1ECX,
    :schema_ns => "urn:vim25",
    :schema_name => "CpuIncompatible1ECXFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["sse3", "SOAP::SOAPBoolean"],
      ["ssse3", "SOAP::SOAPBoolean"],
      ["sse41", "SOAP::SOAPBoolean"],
      ["sse42", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CpuIncompatible81EDX,
    :schema_ns => "urn:vim25",
    :schema_name => "CpuIncompatible81EDXFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["nx", "SOAP::SOAPBoolean"],
      ["ffxsr", "SOAP::SOAPBoolean"],
      ["rdtscp", "SOAP::SOAPBoolean"],
      ["lm", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationFault,
    :schema_ns => "urn:vim25",
    :schema_name => "CustomizationFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CustomizationPending,
    :schema_ns => "urn:vim25",
    :schema_name => "CustomizationPendingFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DVPortNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DVPortNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DasConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "DasConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["output", "SOAP::SOAPString", [0, 1]],
      ["event", "VimWs25::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatabaseError,
    :schema_ns => "urn:vim25",
    :schema_name => "DatabaseErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatacenterMismatch,
    :schema_ns => "urn:vim25",
    :schema_name => "DatacenterMismatchFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidArgument", "VimWs25::DatacenterMismatchArgument[]", [1, nil]],
      ["expectedDatacenter", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DatastoreNotWritableOnHost,
    :schema_ns => "urn:vim25",
    :schema_name => "DatastoreNotWritableOnHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestinationSwitchFull,
    :schema_ns => "urn:vim25",
    :schema_name => "DestinationSwitchFullFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceBackingNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceBackingNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceControllerNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceControllerNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["controller", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceHotPlugNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceUnsupportedForVmPlatform,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceUnsupportedForVmPlatformFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeviceUnsupportedForVmVersion,
    :schema_ns => "urn:vim25",
    :schema_name => "DeviceUnsupportedForVmVersionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["currentVersion", "SOAP::SOAPString"],
      ["expectedVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableAdminNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableAdminNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisallowedDiskModeChange,
    :schema_ns => "urn:vim25",
    :schema_name => "DisallowedDiskModeChangeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisallowedMigrationDeviceAttached,
    :schema_ns => "urn:vim25",
    :schema_name => "DisallowedMigrationDeviceAttachedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisallowedOperationOnFailoverHost,
    :schema_ns => "urn:vim25",
    :schema_name => "DisallowedOperationOnFailoverHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiskMoveTypeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DiskMoveTypeNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "DiskNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DomainNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "DomainNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]],
      ["domainName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsDisabledOnVm,
    :schema_ns => "urn:vim25",
    :schema_name => "DrsDisabledOnVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DrsVmotionIncompatibleFault,
    :schema_ns => "urn:vim25",
    :schema_name => "DrsVmotionIncompatibleFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DuplicateName,
    :schema_ns => "urn:vim25",
    :schema_name => "DuplicateNameFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["object", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsFault,
    :schema_ns => "urn:vim25",
    :schema_name => "DvsFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsNotAuthorized,
    :schema_ns => "urn:vim25",
    :schema_name => "DvsNotAuthorizedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sessionExtensionKey", "SOAP::SOAPString", [0, 1]],
      ["dvsExtensionKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsOperationBulkFault,
    :schema_ns => "urn:vim25",
    :schema_name => "DvsOperationBulkFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostFault", "VimWs25::DvsOperationBulkFaultFaultOnHost[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DvsScopeViolated,
    :schema_ns => "urn:vim25",
    :schema_name => "DvsScopeViolatedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["scope", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUFeaturesForMode,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedCPUFeaturesForModeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUModel,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedCPUModelFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUModelForMode,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedCPUModelForModeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUVendor,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedCPUVendorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["clusterCPUVendor", "SOAP::SOAPString"],
      ["hostCPUVendor", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedCPUVendorUnknown,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedCPUVendorUnknownFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostDisconnected,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedHostDisconnectedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostSoftware,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedHostSoftwareFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedHostSoftwareForMode,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedHostSoftwareForModeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EVCAdmissionFailedVmActive,
    :schema_ns => "urn:vim25",
    :schema_name => "EVCAdmissionFailedVmActiveFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EightHostLimitViolated,
    :schema_ns => "urn:vim25",
    :schema_name => "EightHostLimitViolatedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpiredAddonLicense,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpiredAddonLicenseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpiredEditionLicense,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpiredEditionLicenseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpiredFeatureLicense,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpiredFeatureLicenseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendedFault,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtendedFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["faultTypeId", "SOAP::SOAPString"],
      ["data", "VimWs25::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FailToLockFaultToleranceVMs,
    :schema_ns => "urn:vim25",
    :schema_name => "FailToLockFaultToleranceVMsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["alreadyLockedVm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceAntiAffinityViolated,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultToleranceAntiAffinityViolatedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceCannotEditMem,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultToleranceCannotEditMemFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceCpuIncompatible,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultToleranceCpuIncompatibleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["model", "SOAP::SOAPBoolean"],
      ["family", "SOAP::SOAPBoolean"],
      ["stepping", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceNeedsThickDisk,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultToleranceNeedsThickDiskFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceNotLicensed,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultToleranceNotLicensedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultToleranceNotSameBuild,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultToleranceNotSameBuildFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["build", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FaultTolerancePrimaryPowerOnNotAttempted,
    :schema_ns => "urn:vim25",
    :schema_name => "FaultTolerancePrimaryPowerOnNotAttemptedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["secondaryVm", "VimWs25::ManagedObjectReference"],
      ["primaryVm", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileAlreadyExists,
    :schema_ns => "urn:vim25",
    :schema_name => "FileAlreadyExistsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileBackedPortNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "FileBackedPortNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileFault,
    :schema_ns => "urn:vim25",
    :schema_name => "FileFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileLocked,
    :schema_ns => "urn:vim25",
    :schema_name => "FileLockedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "FileNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileNotWritable,
    :schema_ns => "urn:vim25",
    :schema_name => "FileNotWritableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FileTooLarge,
    :schema_ns => "urn:vim25",
    :schema_name => "FileTooLargeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FilesystemQuiesceFault,
    :schema_ns => "urn:vim25",
    :schema_name => "FilesystemQuiesceFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FtIssuesOnHost,
    :schema_ns => "urn:vim25",
    :schema_name => "FtIssuesOnHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString"],
      ["errors", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FullStorageVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "FullStorageVMotionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenericDrsFault,
    :schema_ns => "urn:vim25",
    :schema_name => "GenericDrsFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostFaults", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenericVmConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "GenericVmConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HAErrorsAtDest,
    :schema_ns => "urn:vim25",
    :schema_name => "HAErrorsAtDestFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "HostConfigFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["failure", "VimWs25::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "HostConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostConnectFault,
    :schema_ns => "urn:vim25",
    :schema_name => "HostConnectFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInDomain,
    :schema_ns => "urn:vim25",
    :schema_name => "HostInDomainFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_name => "HostIncompatibleForFaultToleranceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostIncompatibleForRecordReplay,
    :schema_ns => "urn:vim25",
    :schema_name => "HostIncompatibleForRecordReplayFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostInventoryFull,
    :schema_ns => "urn:vim25",
    :schema_name => "HostInventoryFullFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostPowerOpFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "HostPowerOpFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HotSnapshotMoveNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "HotSnapshotMoveNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IDEDiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "IDEDiskNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IORMNotSupportedHostOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_name => "IORMNotSupportedHostOnDatastoreFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InUseFeatureManipulationDisallowed,
    :schema_ns => "urn:vim25",
    :schema_name => "InUseFeatureManipulationDisallowedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InaccessibleDatastore,
    :schema_ns => "urn:vim25",
    :schema_name => "InaccessibleDatastoreFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncompatibleDefaultDevice,
    :schema_ns => "urn:vim25",
    :schema_name => "IncompatibleDefaultDeviceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncompatibleHostForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_name => "IncompatibleHostForFtSecondaryFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncompatibleSetting,
    :schema_ns => "urn:vim25",
    :schema_name => "IncompatibleSettingFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["conflictingProperty", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncorrectFileType,
    :schema_ns => "urn:vim25",
    :schema_name => "IncorrectFileTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IncorrectHostInformation,
    :schema_ns => "urn:vim25",
    :schema_name => "IncorrectHostInformationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IndependentDiskVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "IndependentDiskVMotionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientCpuResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientCpuResourcesFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientFailoverResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientFailoverResourcesFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientHostCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientHostCapacityFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientHostCpuCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientHostCpuCapacityFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientHostMemoryCapacityFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientHostMemoryCapacityFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientMemoryResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientMemoryResourcesFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientPerCpuCapacity,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientPerCpuCapacityFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientResourcesFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientResourcesFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientStandbyCpuResource,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientStandbyCpuResourceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientStandbyMemoryResource,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientStandbyMemoryResourceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InsufficientStandbyResource,
    :schema_ns => "urn:vim25",
    :schema_name => "InsufficientStandbyResourceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidAffinitySettingFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidAffinitySettingFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidBmcRole,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidBmcRoleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidBundle,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidBundleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidClientCertificate,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidClientCertificateFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidController,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidControllerFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["controllerKey", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDasRestartPriorityForFtVm,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDasRestartPriorityForFtVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDatastore,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDatastoreFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDatastorePath,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDatastorePathFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDeviceBacking,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDeviceBackingFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDeviceOperation,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDeviceOperationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["badOp", "SOAP::SOAPString", [0, 1]],
      ["badFileOp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDeviceSpec,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDeviceSpecFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDiskFormat,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDiskFormatFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidDrsBehaviorForFtVm,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidDrsBehaviorForFtVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidEditionLicense,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidEditionLicenseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidEvent,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidEventFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidFolder,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidFolderFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidFormat,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidFormatFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidHostName,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidHostNameFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidHostState,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidHostStateFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidIndexArgument,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidIndexArgumentFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidIpmiLoginInfo,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidIpmiLoginInfoFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidIpmiMacAddress,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidIpmiMacAddressFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["userProvidedMacAddress", "SOAP::SOAPString"],
      ["observedMacAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidLicense,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidLicenseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseContent", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidLocale,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidLocaleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidLogin,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidLoginFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidName,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidNameFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidNasCredentials,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidNasCredentialsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidNetworkInType,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidNetworkInTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidNetworkResource,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidNetworkResourceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidOperationOnSecondaryVm,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidOperationOnSecondaryVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPowerState,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidPowerStateFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["requestedState", "SOAP::SOAPString", [0, 1]],
      ["existingState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPrivilege,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidPrivilegeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["privilege", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPropertyType,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidPropertyTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidPropertyValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidResourcePoolStructureFault,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidResourcePoolStructureFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidSnapshotFormat,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidSnapshotFormatFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidState,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidStateFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidVmConfig,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidVmConfigFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InventoryHasStandardAloneHosts,
    :schema_ns => "urn:vim25",
    :schema_name => "InventoryHasStandardAloneHostsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hosts", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::IpHostnameGeneratorError,
    :schema_ns => "urn:vim25",
    :schema_name => "IpHostnameGeneratorErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LegacyNetworkInterfaceInUse,
    :schema_ns => "urn:vim25",
    :schema_name => "LegacyNetworkInterfaceInUseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseAssignmentFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseAssignmentFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseDowngradeDisallowed,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseDowngradeDisallowedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["edition", "SOAP::SOAPString"],
      ["entityId", "SOAP::SOAPString"],
      ["features", "VimWs25::KeyAnyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseEntityNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseEntityNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseExpired,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseExpiredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseKeyEntityMismatch,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseKeyEntityMismatchFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseRestricted,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseRestrictedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseServerUnavailable,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseServerUnavailableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LicenseSourceUnavailable,
    :schema_ns => "urn:vim25",
    :schema_name => "LicenseSourceUnavailableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["licenseSource", "VimWs25::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LimitExceeded,
    :schema_ns => "urn:vim25",
    :schema_name => "LimitExceededFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["limit", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LinuxVolumeNotClean,
    :schema_ns => "urn:vim25",
    :schema_name => "LinuxVolumeNotCleanFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LogBundlingFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "LogBundlingFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MaintenanceModeFileMove,
    :schema_ns => "urn:vim25",
    :schema_name => "MaintenanceModeFileMoveFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemoryHotPlugNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "MemoryHotPlugNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemorySizeNotRecommended,
    :schema_ns => "urn:vim25",
    :schema_name => "MemorySizeNotRecommendedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemorySizeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "MemorySizeNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MemorySnapshotOnIndependentDisk,
    :schema_ns => "urn:vim25",
    :schema_name => "MemorySnapshotOnIndependentDiskFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodAlreadyDisabledFault,
    :schema_ns => "urn:vim25",
    :schema_name => "MethodAlreadyDisabledFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sourceId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "MethodDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["source", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "MigrationDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationFault,
    :schema_ns => "urn:vim25",
    :schema_name => "MigrationFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationFeatureNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "MigrationFeatureNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MigrationNotReady,
    :schema_ns => "urn:vim25",
    :schema_name => "MigrationNotReadyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MismatchedBundle,
    :schema_ns => "urn:vim25",
    :schema_name => "MismatchedBundleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["bundleUuid", "SOAP::SOAPString"],
      ["hostUuid", "SOAP::SOAPString"],
      ["bundleBuildNumber", "SOAP::SOAPInt"],
      ["hostBuildNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MismatchedNetworkPolicies,
    :schema_ns => "urn:vim25",
    :schema_name => "MismatchedNetworkPoliciesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MismatchedVMotionNetworkNames,
    :schema_ns => "urn:vim25",
    :schema_name => "MismatchedVMotionNetworkNamesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["sourceNetwork", "SOAP::SOAPString"],
      ["destNetwork", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingBmcSupport,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingBmcSupportFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingController,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingControllerFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingLinuxCustResources,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingLinuxCustResourcesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingNetworkIpConfig,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingNetworkIpConfigFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingPowerOffConfiguration,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingPowerOffConfigurationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingPowerOnConfiguration,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingPowerOnConfigurationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MissingWindowsCustResources,
    :schema_ns => "urn:vim25",
    :schema_name => "MissingWindowsCustResourcesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MountError,
    :schema_ns => "urn:vim25",
    :schema_name => "MountErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["diskIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MultipleCertificatesVerifyFault,
    :schema_ns => "urn:vim25",
    :schema_name => "MultipleCertificatesVerifyFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["thumbprintData", "VimWs25::MultipleCertificatesVerifyFaultThumbprintData[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MultipleSnapshotsNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "MultipleSnapshotsNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "NasConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasConnectionLimitReached,
    :schema_ns => "urn:vim25",
    :schema_name => "NasConnectionLimitReachedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasSessionCredentialConflict,
    :schema_ns => "urn:vim25",
    :schema_name => "NasSessionCredentialConflictFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NasVolumeNotMounted,
    :schema_ns => "urn:vim25",
    :schema_name => "NasVolumeNotMountedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkCopyFault,
    :schema_ns => "urn:vim25",
    :schema_name => "NetworkCopyFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworkInaccessible,
    :schema_ns => "urn:vim25",
    :schema_name => "NetworkInaccessibleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NetworksMayNotBeTheSame,
    :schema_ns => "urn:vim25",
    :schema_name => "NetworksMayNotBeTheSameFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NicSettingMismatch,
    :schema_ns => "urn:vim25",
    :schema_name => "NicSettingMismatchFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numberOfNicsInSpec", "SOAP::SOAPInt"],
      ["numberOfNicsInVM", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoActiveHostInCluster,
    :schema_ns => "urn:vim25",
    :schema_name => "NoActiveHostInClusterFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["computeResource", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoAvailableIp,
    :schema_ns => "urn:vim25",
    :schema_name => "NoAvailableIpFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["network", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoClientCertificate,
    :schema_ns => "urn:vim25",
    :schema_name => "NoClientCertificateFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleHardAffinityHost,
    :schema_ns => "urn:vim25",
    :schema_name => "NoCompatibleHardAffinityHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleHost,
    :schema_ns => "urn:vim25",
    :schema_name => "NoCompatibleHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleHostWithAccessToDevice,
    :schema_ns => "urn:vim25",
    :schema_name => "NoCompatibleHostWithAccessToDeviceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["error", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoCompatibleSoftAffinityHost,
    :schema_ns => "urn:vim25",
    :schema_name => "NoCompatibleSoftAffinityHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDiskFound,
    :schema_ns => "urn:vim25",
    :schema_name => "NoDiskFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDiskSpace,
    :schema_ns => "urn:vim25",
    :schema_name => "NoDiskSpaceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoDisksToCustomize,
    :schema_ns => "urn:vim25",
    :schema_name => "NoDisksToCustomizeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoGateway,
    :schema_ns => "urn:vim25",
    :schema_name => "NoGatewayFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoGuestHeartbeat,
    :schema_ns => "urn:vim25",
    :schema_name => "NoGuestHeartbeatFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoHost,
    :schema_ns => "urn:vim25",
    :schema_name => "NoHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoHostSuitableForFtSecondary,
    :schema_ns => "urn:vim25",
    :schema_name => "NoHostSuitableForFtSecondaryFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoLicenseServerConfigured,
    :schema_ns => "urn:vim25",
    :schema_name => "NoLicenseServerConfiguredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPeerHostFound,
    :schema_ns => "urn:vim25",
    :schema_name => "NoPeerHostFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermission,
    :schema_ns => "urn:vim25",
    :schema_name => "NoPermissionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["object", "VimWs25::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermissionOnAD,
    :schema_ns => "urn:vim25",
    :schema_name => "NoPermissionOnADFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermissionOnHost,
    :schema_ns => "urn:vim25",
    :schema_name => "NoPermissionOnHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoPermissionOnNasVolume,
    :schema_ns => "urn:vim25",
    :schema_name => "NoPermissionOnNasVolumeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoSubjectName,
    :schema_ns => "urn:vim25",
    :schema_name => "NoSubjectNameFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoVcManagedIpConfigured,
    :schema_ns => "urn:vim25",
    :schema_name => "NoVcManagedIpConfiguredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoVirtualNic,
    :schema_ns => "urn:vim25",
    :schema_name => "NoVirtualNicFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NoVmInVApp,
    :schema_ns => "urn:vim25",
    :schema_name => "NoVmInVAppFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonADUserRequired,
    :schema_ns => "urn:vim25",
    :schema_name => "NonADUserRequiredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonHomeRDMVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "NonHomeRDMVMotionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NonPersistentDisksNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "NonPersistentDisksNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotAuthenticated,
    :schema_ns => "urn:vim25",
    :schema_name => "NotAuthenticatedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["object", "VimWs25::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughCpus,
    :schema_ns => "urn:vim25",
    :schema_name => "NotEnoughCpusFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughLogicalCpus,
    :schema_ns => "urn:vim25",
    :schema_name => "NotEnoughLogicalCpusFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "NotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedDeviceForFT,
    :schema_ns => "urn:vim25",
    :schema_name => "NotSupportedDeviceForFTFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString", [0, 1]],
      ["deviceType", "SOAP::SOAPString"],
      ["deviceLabel", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedHost,
    :schema_ns => "urn:vim25",
    :schema_name => "NotSupportedHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedHostInCluster,
    :schema_ns => "urn:vim25",
    :schema_name => "NotSupportedHostInClusterFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupportedHostInDvs,
    :schema_ns => "urn:vim25",
    :schema_name => "NotSupportedHostInDvsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["switchProductSpec", "VimWs25::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotUserConfigurableProperty,
    :schema_ns => "urn:vim25",
    :schema_name => "NotUserConfigurablePropertyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusExceedsLimit,
    :schema_ns => "urn:vim25",
    :schema_name => "NumVirtualCpusExceedsLimitFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusIncompatible,
    :schema_ns => "urn:vim25",
    :schema_name => "NumVirtualCpusIncompatibleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["numCpu", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NumVirtualCpusNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "NumVirtualCpusNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpusDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OutOfBounds,
    :schema_ns => "urn:vim25",
    :schema_name => "OutOfBoundsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["argumentName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfAttribute,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfAttributeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConnectedDevice,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfConnectedDeviceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConnectedDeviceFloppy,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfConnectedDeviceFloppyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConnectedDeviceIso,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfConnectedDeviceIsoFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfConstraint,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfConstraintFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDiskMappingNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfDiskMappingNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDiskOrderConstraint,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfDiskOrderConstraintFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDuplicateElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfDuplicateElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfDuplicatedElementBoundary,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfDuplicatedElementBoundaryFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfElementInvalidValue,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfElementInvalidValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfExport,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfExportFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfExportFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfExportFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfFault,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHardwareCheck,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfHardwareCheckFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHardwareExport,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfHardwareExportFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHostResourceConstraint,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfHostResourceConstraintFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfHostValueNotParsed,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfHostValueNotParsedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfImport,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfImportFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfImportFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfImportFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInternalError,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInternalErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidPackage,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidPackageFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValue,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueConfiguration,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidValueConfigurationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueEmpty,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidValueEmptyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueFormatMalformed,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidValueFormatMalformedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidValueReference,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidValueReferenceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfInvalidVmName,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfInvalidVmNameFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMappedOsId,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfMappedOsIdFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["ovfId", "SOAP::SOAPInt"],
      ["ovfDescription", "SOAP::SOAPString"],
      ["targetDescription", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingAttribute,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfMissingAttributeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfMissingElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingElementNormalBoundary,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfMissingElementNormalBoundaryFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfMissingHardware,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfMissingHardwareFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfNoHostNic,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfNoHostNicFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfNoSupportedHardwareFamily,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfNoSupportedHardwareFamilyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfProperty,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyExport,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyExportFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyNetwork,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyNetworkFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyQualifier,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyQualifierFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyQualifierDuplicate,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyQualifierDuplicateFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyQualifierIgnored,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyQualifierIgnoredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyType,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfPropertyValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfSystemFault,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfSystemFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfToXmlUnsupportedElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfToXmlUnsupportedElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnableToExportDisk,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnableToExportDiskFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["diskName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnexpectedElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnexpectedElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnknownDevice,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnknownDeviceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnknownDeviceBacking,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnknownDeviceBackingFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["backing", "VimWs25::VirtualDeviceBackingInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnknownEntity,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnknownEntityFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedAttribute,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedAttributeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedAttributeValue,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedAttributeValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceBackingInfo,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedDeviceBackingInfoFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceBackingOption,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedDeviceBackingOptionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDeviceExport,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedDeviceExportFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "VimWs25::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedDiskProvisioning,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedDiskProvisioningFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString"],
      ["supportedDiskProvisioning", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedElementValue,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedElementValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedPackage,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedPackageFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedSection,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedSectionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["info", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedSubType,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedSubTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"],
      ["deviceSubType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfUnsupportedType,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfUnsupportedTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfWrongElement,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfWrongElementFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfWrongNamespace,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfWrongNamespaceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["namespaceName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OvfXmlFormat,
    :schema_ns => "urn:vim25",
    :schema_name => "OvfXmlFormatFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchAlreadyInstalled,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchAlreadyInstalledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchBinariesNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchBinariesNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["binary", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchInstallFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchInstallFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"],
      ["rolledBack", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchIntegrityError,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchIntegrityErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMetadataCorrupted,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchMetadataCorruptedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMetadataInvalid,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchMetadataInvalidFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMetadataNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchMetadataNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchMissingDependencies,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchMissingDependenciesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["prerequisitePatch", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisiteLib", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchNotApplicable,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchNotApplicableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PatchSuperseded,
    :schema_ns => "urn:vim25",
    :schema_name => "PatchSupersededFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["supersede", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PhysCompatRDMNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "PhysCompatRDMNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PlatformConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "PlatformConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnFtSecondaryFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnFtSecondaryFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["hostSelectionBy", "SOAP::SOAPString"],
      ["hostErrors", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["rootCause", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::PowerOnFtSecondaryTimedout,
    :schema_ns => "urn:vim25",
    :schema_name => "PowerOnFtSecondaryTimedoutFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ProfileUpdateFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "ProfileUpdateFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["failure", "VimWs25::ProfileUpdateFailedUpdateFailure[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QuestionPending,
    :schema_ns => "urn:vim25",
    :schema_name => "QuestionPendingFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMConversionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "RDMConversionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMNotPreserved,
    :schema_ns => "urn:vim25",
    :schema_name => "RDMNotPreservedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "RDMNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMNotSupportedOnDatastore,
    :schema_ns => "urn:vim25",
    :schema_name => "RDMNotSupportedOnDatastoreFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RDMPointsToInaccessibleDisk,
    :schema_ns => "urn:vim25",
    :schema_name => "RDMPointsToInaccessibleDiskFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RawDiskNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "RawDiskNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReadOnlyDisksWithLegacyDestination,
    :schema_ns => "urn:vim25",
    :schema_name => "ReadOnlyDisksWithLegacyDestinationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["roDiskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RebootRequired,
    :schema_ns => "urn:vim25",
    :schema_name => "RebootRequiredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["patch", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RecordReplayDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "RecordReplayDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoteDeviceNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoteDeviceNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceInUse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResourceInUseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResourceNotAvailable,
    :schema_ns => "urn:vim25",
    :schema_name => "ResourceNotAvailableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["containerType", "SOAP::SOAPString", [0, 1]],
      ["containerName", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestrictedVersion,
    :schema_ns => "urn:vim25",
    :schema_name => "RestrictedVersionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RuleViolation,
    :schema_ns => "urn:vim25",
    :schema_name => "RuleViolationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["rule", "VimWs25::ClusterRuleInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SSLDisabledFault,
    :schema_ns => "urn:vim25",
    :schema_name => "SSLDisabledFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SSLVerifyFault,
    :schema_ns => "urn:vim25",
    :schema_name => "SSLVerifyFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["selfSigned", "SOAP::SOAPBoolean"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SSPIChallenge,
    :schema_ns => "urn:vim25",
    :schema_name => "SSPIChallengeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["base64Token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "SecondaryVmAlreadyDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyEnabled,
    :schema_ns => "urn:vim25",
    :schema_name => "SecondaryVmAlreadyEnabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmAlreadyRegistered,
    :schema_ns => "urn:vim25",
    :schema_name => "SecondaryVmAlreadyRegisteredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SecondaryVmNotRegistered,
    :schema_ns => "urn:vim25",
    :schema_name => "SecondaryVmNotRegisteredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SharedBusControllerNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SharedBusControllerNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotCloneNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotCloneNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotCopyNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotCopyNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotFault,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotIncompatibleDeviceInVm,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotIncompatibleDeviceInVmFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotLocked,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotLockedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotMoveFromNonHomeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotMoveFromNonHomeNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotMoveNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotMoveNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotMoveToNonHomeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotMoveToNonHomeNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotNoChange,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotNoChangeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SnapshotRevertIssue,
    :schema_ns => "urn:vim25",
    :schema_name => "SnapshotRevertIssueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["snapshotName", "SOAP::SOAPString", [0, 1]],
      ["event", "VimWs25::Event[]", [0, nil]],
      ["errors", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SoftRuleVioCorrectionDisallowed,
    :schema_ns => "urn:vim25",
    :schema_name => "SoftRuleVioCorrectionDisallowedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SoftRuleVioCorrectionImpact,
    :schema_ns => "urn:vim25",
    :schema_name => "SoftRuleVioCorrectionImpactFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StorageVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "StorageVMotionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SuspendedRelocateNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SuspendedRelocateNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwapDatastoreNotWritableOnHost,
    :schema_ns => "urn:vim25",
    :schema_name => "SwapDatastoreNotWritableOnHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwapDatastoreUnset,
    :schema_ns => "urn:vim25",
    :schema_name => "SwapDatastoreUnsetFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwapPlacementOverrideNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "SwapPlacementOverrideNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SwitchNotInUpgradeMode,
    :schema_ns => "urn:vim25",
    :schema_name => "SwitchNotInUpgradeModeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TaskInProgress,
    :schema_ns => "urn:vim25",
    :schema_name => "TaskInProgressFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["task", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::Timedout,
    :schema_ns => "urn:vim25",
    :schema_name => "TimedoutFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyConsecutiveOverrides,
    :schema_ns => "urn:vim25",
    :schema_name => "TooManyConsecutiveOverridesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyDevices,
    :schema_ns => "urn:vim25",
    :schema_name => "TooManyDevicesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyDisksOnLegacyHost,
    :schema_ns => "urn:vim25",
    :schema_name => "TooManyDisksOnLegacyHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["diskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManyHosts,
    :schema_ns => "urn:vim25",
    :schema_name => "TooManyHostsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::TooManySnapshotLevels,
    :schema_ns => "urn:vim25",
    :schema_name => "TooManySnapshotLevelsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsAlreadyUpgraded,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsAlreadyUpgradedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsAutoUpgradeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsAutoUpgradeNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsImageNotAvailable,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsImageNotAvailableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsImageSignatureCheckFailed,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsImageSignatureCheckFailedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsInstallationInProgress,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsInstallationInProgressFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsUnavailable,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsUnavailableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ToolsUpgradeCancelled,
    :schema_ns => "urn:vim25",
    :schema_name => "ToolsUpgradeCancelledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UncommittedUndoableDisk,
    :schema_ns => "urn:vim25",
    :schema_name => "UncommittedUndoableDiskFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnconfiguredPropertyValue,
    :schema_ns => "urn:vim25",
    :schema_name => "UnconfiguredPropertyValueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UncustomizableGuest,
    :schema_ns => "urn:vim25",
    :schema_name => "UncustomizableGuestFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uncustomizableGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnexpectedCustomizationFault,
    :schema_ns => "urn:vim25",
    :schema_name => "UnexpectedCustomizationFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnrecognizedHost,
    :schema_ns => "urn:vim25",
    :schema_name => "UnrecognizedHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsharedSwapVMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "UnsharedSwapVMotionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedDatastore,
    :schema_ns => "urn:vim25",
    :schema_name => "UnsupportedDatastoreFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedGuest,
    :schema_ns => "urn:vim25",
    :schema_name => "UnsupportedGuestFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["unsupportedGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedVimApiVersion,
    :schema_ns => "urn:vim25",
    :schema_name => "UnsupportedVimApiVersionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnsupportedVmxLocation,
    :schema_ns => "urn:vim25",
    :schema_name => "UnsupportedVmxLocationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnusedVirtualDiskBlocksNotScrubbed,
    :schema_ns => "urn:vim25",
    :schema_name => "UnusedVirtualDiskBlocksNotScrubbedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UserNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "UserNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["unresolved", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "VAppConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppNotRunning,
    :schema_ns => "urn:vim25",
    :schema_name => "VAppNotRunningFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppPropertyFault,
    :schema_ns => "urn:vim25",
    :schema_name => "VAppPropertyFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VAppTaskInProgress,
    :schema_ns => "urn:vim25",
    :schema_name => "VAppTaskInProgressFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["task", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMINotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "VMINotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMOnConflictDVPort,
    :schema_ns => "urn:vim25",
    :schema_name => "VMOnConflictDVPortFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMOnVirtualIntranet,
    :schema_ns => "urn:vim25",
    :schema_name => "VMOnVirtualIntranetFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionInterfaceIssue,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionInterfaceIssueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionLinkCapacityLow,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionLinkCapacityLowFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionLinkDown,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionLinkDownFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionNotConfigured,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionNotConfiguredFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionNotLicensed,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionNotLicensedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VMotionProtocolIncompatible,
    :schema_ns => "urn:vim25",
    :schema_name => "VMotionProtocolIncompatibleFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VimFault,
    :schema_ns => "urn:vim25",
    :schema_name => "VimFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskBlocksNotFullyProvisioned,
    :schema_ns => "urn:vim25",
    :schema_name => "VirtualDiskBlocksNotFullyProvisionedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualDiskModeNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "VirtualDiskModeNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualEthernetCardNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "VirtualEthernetCardNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualHardwareCompatibilityIssue,
    :schema_ns => "urn:vim25",
    :schema_name => "VirtualHardwareCompatibilityIssueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VirtualHardwareVersionNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "VirtualHardwareVersionNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmAlreadyExistsInDatacenter,
    :schema_ns => "urn:vim25",
    :schema_name => "VmAlreadyExistsInDatacenterFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["target", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigFault,
    :schema_ns => "urn:vim25",
    :schema_name => "VmConfigFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_name => "VmConfigIncompatibleForFaultToleranceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmConfigIncompatibleForRecordReplay,
    :schema_ns => "urn:vim25",
    :schema_name => "VmConfigIncompatibleForRecordReplayFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssue,
    :schema_ns => "urn:vim25",
    :schema_name => "VmFaultToleranceConfigIssueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceConfigIssueWrapper,
    :schema_ns => "urn:vim25",
    :schema_name => "VmFaultToleranceConfigIssueWrapperFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]],
      ["error", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceInvalidFileBacking,
    :schema_ns => "urn:vim25",
    :schema_name => "VmFaultToleranceInvalidFileBackingFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["backingType", "SOAP::SOAPString", [0, 1]],
      ["backingFilename", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceIssue,
    :schema_ns => "urn:vim25",
    :schema_name => "VmFaultToleranceIssueFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceOpIssuesList,
    :schema_ns => "urn:vim25",
    :schema_name => "VmFaultToleranceOpIssuesListFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["errors", "VimWs25::LocalizedMethodFault[]", [0, nil]],
      ["warnings", "VimWs25::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmFaultToleranceTooManyVMsOnHost,
    :schema_ns => "urn:vim25",
    :schema_name => "VmFaultToleranceTooManyVMsOnHostFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["maxNumFtVms", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmHostAffinityRuleViolation,
    :schema_ns => "urn:vim25",
    :schema_name => "VmHostAffinityRuleViolationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmLimitLicense,
    :schema_ns => "urn:vim25",
    :schema_name => "VmLimitLicenseFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["limit", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmMonitorIncompatibleForFaultTolerance,
    :schema_ns => "urn:vim25",
    :schema_name => "VmMonitorIncompatibleForFaultToleranceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmPowerOnDisabled,
    :schema_ns => "urn:vim25",
    :schema_name => "VmPowerOnDisabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmToolsUpgradeFault,
    :schema_ns => "urn:vim25",
    :schema_name => "VmToolsUpgradeFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmValidateMaxDevice,
    :schema_ns => "urn:vim25",
    :schema_name => "VmValidateMaxDeviceFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["max", "SOAP::SOAPInt"],
      ["count", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmWwnConflict,
    :schema_ns => "urn:vim25",
    :schema_name => "VmWwnConflictFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["vm", "VimWs25::ManagedObjectReference", [0, 1]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["wwn", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsAlreadyMounted,
    :schema_ns => "urn:vim25",
    :schema_name => "VmfsAlreadyMountedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsAmbiguousMount,
    :schema_ns => "urn:vim25",
    :schema_name => "VmfsAmbiguousMountFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmfsMountFault,
    :schema_ns => "urn:vim25",
    :schema_name => "VmfsMountFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VmotionInterfaceNotEnabled,
    :schema_ns => "urn:vim25",
    :schema_name => "VmotionInterfaceNotEnabledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::VolumeEditorError,
    :schema_ns => "urn:vim25",
    :schema_name => "VolumeEditorErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WakeOnLanNotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "WakeOnLanNotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WakeOnLanNotSupportedByVmotionNIC,
    :schema_ns => "urn:vim25",
    :schema_name => "WakeOnLanNotSupportedByVmotionNICFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WillModifyConfigCpuRequirements,
    :schema_ns => "urn:vim25",
    :schema_name => "WillModifyConfigCpuRequirementsFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::JoinDomainRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "JoinDomain_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["domainName", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::JoinDomain_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "JoinDomain_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LeaveCurrentDomainRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "LeaveCurrentDomain_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::LeaveCurrentDomain_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "LeaveCurrentDomain_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureAutostartRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureAutostart",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostAutoStartManagerConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureAutostartResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureAutostartResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerOnRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AutoStartPowerOn",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerOnResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AutoStartPowerOnResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerOffRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AutoStartPowerOff",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AutoStartPowerOffResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AutoStartPowerOffResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryBootDevicesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryBootDevices",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryBootDevicesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryBootDevicesResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostBootDeviceInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateBootDeviceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateBootDevice",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateBootDeviceResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateBootDeviceResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableHyperThreadingRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableHyperThreading",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableHyperThreadingResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableHyperThreadingResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableHyperThreadingRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableHyperThreading",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableHyperThreadingResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableHyperThreadingResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SearchDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SearchDatastore_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VimWs25::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SearchDatastore_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SearchDatastore_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SearchDatastoreSubFoldersRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SearchDatastoreSubFolders_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VimWs25::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SearchDatastoreSubFolders_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SearchDatastoreSubFolders_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteFileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteFile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeleteFileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DeleteFileResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLocalSwapDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLocalSwapDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateLocalSwapDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateLocalSwapDatastoreResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableDisksForVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailableDisksForVmfs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableDisksForVmfsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailableDisksForVmfsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostScsiDisk[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreCreateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVmfsDatastoreCreateOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreCreateOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVmfsDatastoreCreateOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::VmfsDatastoreOption[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVmfsDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VmfsDatastoreCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateVmfsDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateVmfsDatastoreResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExtendOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVmfsDatastoreExtendOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["devicePath", "SOAP::SOAPString"],
      ["suppressExpandCandidates", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExtendOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVmfsDatastoreExtendOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::VmfsDatastoreOption[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExpandOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVmfsDatastoreExpandOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVmfsDatastoreExpandOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVmfsDatastoreExpandOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::VmfsDatastoreOption[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtendVmfsDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VmfsDatastoreExtendSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExtendVmfsDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExtendVmfsDatastoreResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpandVmfsDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpandVmfsDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VmfsDatastoreExpandSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpandVmfsDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpandVmfsDatastoreResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateNasDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateNasDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostNasVolumeSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateNasDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateNasDatastoreResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateLocalDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateLocalDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateLocalDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateLocalDatastoreResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveDatastoreRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveDatastore",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["datastore", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveDatastoreResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveDatastoreResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureDatastorePrincipalRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigureDatastorePrincipal",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigureDatastorePrincipalResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigureDatastorePrincipalResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUnresolvedVmfsVolumes",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUnresolvedVmfsVolumesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostUnresolvedVmfsVolume[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResignatureUnresolvedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResignatureUnresolvedVmfsVolume_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resolutionSpec", "VimWs25::HostUnresolvedVmfsResignatureSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResignatureUnresolvedVmfsVolume_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResignatureUnresolvedVmfsVolume_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDateTimeConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDateTimeConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostDateTimeConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDateTimeConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDateTimeConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableTimeZonesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailableTimeZones",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailableTimeZonesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailableTimeZonesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostDateTimeSystemTimeZone[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDateTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDateTime",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryDateTimeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryDateTimeResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDateTimeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDateTime",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["dateTime", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDateTimeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDateTimeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDateTimeSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDateTimeSystem",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshDateTimeSystemResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshDateTimeSystemResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailablePartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailablePartition",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryAvailablePartitionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryAvailablePartitionResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostDiagnosticPartition[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectActivePartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SelectActivePartition",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["partition", "VimWs25::HostScsiDiskPartition", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectActivePartitionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SelectActivePartitionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPartitionCreateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPartitionCreateOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPartitionCreateOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPartitionCreateOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostDiagnosticPartitionCreateOption[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPartitionCreateDescRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPartitionCreateDesc",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["diskUuid", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPartitionCreateDescResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPartitionCreateDescResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostDiagnosticPartitionCreateDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDiagnosticPartitionRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDiagnosticPartition",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDiagnosticPartitionResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDiagnosticPartitionResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDefaultPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDefaultPolicy",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["defaultPolicy", "VimWs25::HostFirewallDefaultPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDefaultPolicyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDefaultPolicyResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableRulesetRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableRuleset",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableRulesetResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableRulesetResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableRulesetRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableRuleset",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableRulesetResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableRulesetResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshFirewallRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshFirewall",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshFirewallResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshFirewallResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetFirmwareToFactoryDefaultsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetFirmwareToFactoryDefaults",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetFirmwareToFactoryDefaultsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetFirmwareToFactoryDefaultsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::BackupFirmwareConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "BackupFirmwareConfiguration",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::BackupFirmwareConfigurationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "BackupFirmwareConfigurationResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryFirmwareConfigUploadURLRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryFirmwareConfigUploadURL",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryFirmwareConfigUploadURLResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryFirmwareConfigUploadURLResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestoreFirmwareConfigurationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RestoreFirmwareConfiguration",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestoreFirmwareConfigurationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RestoreFirmwareConfigurationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshHealthStatusSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshHealthStatusSystem",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshHealthStatusSystemResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshHealthStatusSystemResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetSystemHealthInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetSystemHealthInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetSystemHealthInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetSystemHealthInfoResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryModulesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryModules",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryModulesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryModulesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::KernelModuleInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateModuleOptionStringRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateModuleOptionString",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"],
      ["options", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateModuleOptionStringResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateModuleOptionStringResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfiguredModuleOptionStringRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfiguredModuleOptionString",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryConfiguredModuleOptionStringResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryConfiguredModuleOptionStringResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateUser",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "VimWs25::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateUserResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateUserResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateUser",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "VimWs25::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateUserResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateUserResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["group", "VimWs25::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveUserRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveUser",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveUserResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveUserResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["groupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AssignUserToGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AssignUserToGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AssignUserToGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AssignUserToGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UnassignUserFromGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UnassignUserFromGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnassignUserFromGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UnassignUserFromGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureServiceConsoleReservationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureServiceConsoleReservation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["cfgBytes", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureServiceConsoleReservationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureServiceConsoleReservationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureVirtualMachineReservationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureVirtualMachineReservation",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::VirtualMachineMemoryReservationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureVirtualMachineReservationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureVirtualMachineReservationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateNetworkConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateNetworkConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostNetworkConfig"],
      ["changeMode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateNetworkConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateNetworkConfigResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostNetworkConfigResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDnsConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDnsConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostDnsConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDnsConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDnsConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpRouteConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpRouteConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpRouteConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpRouteConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateConsoleIpRouteConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateConsoleIpRouteConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateConsoleIpRouteConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateConsoleIpRouteConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpRouteTableConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpRouteTableConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostIpRouteTableConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpRouteTableConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpRouteTableConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AddVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddVirtualSwitch",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddVirtualSwitchResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddVirtualSwitchResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveVirtualSwitch",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveVirtualSwitchResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveVirtualSwitchResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualSwitchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVirtualSwitch",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostVirtualSwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualSwitchResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVirtualSwitchResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AddPortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddPortGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgrp", "VimWs25::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddPortGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddPortGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemovePortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemovePortGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pgName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemovePortGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemovePortGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePortGroupRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePortGroup",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pgName", "SOAP::SOAPString"],
      ["portgrp", "VimWs25::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePortGroupResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePortGroupResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePhysicalNicLinkSpeedRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePhysicalNicLinkSpeed",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["linkSpeed", "VimWs25::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePhysicalNicLinkSpeedResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePhysicalNicLinkSpeedResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryNetworkHintRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryNetworkHint",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryNetworkHintResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryNetworkHintResponse",
    :schema_element => [
      ["returnval", ["VimWs25::PhysicalNicHintInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AddServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddServiceConsoleVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddServiceConsoleVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddServiceConsoleVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveServiceConsoleVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveServiceConsoleVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveServiceConsoleVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateServiceConsoleVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VimWs25::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServiceConsoleVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateServiceConsoleVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RestartServiceConsoleVirtualNicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RestartServiceConsoleVirtualNic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestartServiceConsoleVirtualNicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RestartServiceConsoleVirtualNicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshNetworkSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshNetworkSystem",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshNetworkSystemResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshNetworkSystemResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckHostPatch_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckHostPatch_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckHostPatch_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScanHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ScanHostPatch_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["repository", "VimWs25::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScanHostPatch_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ScanHostPatch_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScanHostPatchV2RequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ScanHostPatchV2_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ScanHostPatchV2_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ScanHostPatchV2_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StageHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StageHostPatch_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StageHostPatch_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StageHostPatch_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InstallHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "InstallHostPatch_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["repository", "VimWs25::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString"],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InstallHostPatch_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "InstallHostPatch_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InstallHostPatchV2RequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "InstallHostPatchV2_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InstallHostPatchV2_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "InstallHostPatchV2_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UninstallHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UninstallHostPatch_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["bulletinIds", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UninstallHostPatch_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UninstallHostPatch_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostPatchRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryHostPatch_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostPatch_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryHostPatch_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "Refresh",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePassthruConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePassthruConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostPciPassthruConfig[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdatePassthruConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdatePassthruConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigurePowerPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigurePowerPolicy",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ConfigurePowerPolicyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ConfigurePowerPolicyResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServicePolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateServicePolicy",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateServicePolicyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateServicePolicyResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::StartServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StartService",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StartServiceResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StartServiceResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::StopServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "StopService",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::StopServiceResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "StopServiceResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RestartServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RestartService",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RestartServiceResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RestartServiceResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UninstallServiceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UninstallService",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UninstallServiceResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UninstallServiceResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshServicesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshServices",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshServicesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshServicesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureSnmpAgentRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureSnmpAgent",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::HostSnmpConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureSnmpAgentResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureSnmpAgentResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SendTestNotificationRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SendTestNotification",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SendTestNotificationResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SendTestNotificationResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveDiskPartitionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveDiskPartitionInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveDiskPartitionInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveDiskPartitionInfoResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostDiskPartitionInfo[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ComputeDiskPartitionInfo",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["layout", "VimWs25::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ComputeDiskPartitionInfoResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostDiskPartitionInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoForResizeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ComputeDiskPartitionInfoForResize",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["partition", "VimWs25::HostScsiDiskPartition"],
      ["blockRange", "VimWs25::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ComputeDiskPartitionInfoForResizeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ComputeDiskPartitionInfoForResizeResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostDiskPartitionInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDiskPartitionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDiskPartitions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["spec", "VimWs25::HostDiskPartitionSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateDiskPartitionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateDiskPartitionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::FormatVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FormatVmfs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["createSpec", "VimWs25::HostVmfsSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FormatVmfsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FormatVmfsResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostVmfsVolume"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RescanVmfs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanVmfsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RescanVmfsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AttachVmfsExtentRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AttachVmfsExtent",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AttachVmfsExtentResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AttachVmfsExtentResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpandVmfsExtentRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpandVmfsExtent",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VimWs25::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExpandVmfsExtentResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExpandVmfsExtentResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVmfsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeVmfs",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVmfsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeVmfsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVmLayoutRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeVmLayout",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpgradeVmLayoutResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpgradeVmLayoutResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUnresolvedVmfsVolume",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryUnresolvedVmfsVolumeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryUnresolvedVmfsVolumeResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostUnresolvedVmfsVolume[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResolveMultipleUnresolvedVmfsVolumesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResolveMultipleUnresolvedVmfsVolumes",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["resolutionSpec", "VimWs25::HostUnresolvedVmfsResolutionSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResolveMultipleUnresolvedVmfsVolumesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResolveMultipleUnresolvedVmfsVolumesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostUnresolvedVmfsResolutionResult[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnmountForceMountedVmfsVolumeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UnmountForceMountedVmfsVolume",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vmfsUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnmountForceMountedVmfsVolumeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UnmountForceMountedVmfsVolumeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanHbaRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RescanHba",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["hbaDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanHbaResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RescanHbaResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanAllHbaRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RescanAllHba",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RescanAllHbaResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RescanAllHbaResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSoftwareInternetScsiEnabledRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateSoftwareInternetScsiEnabled",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateSoftwareInternetScsiEnabledResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateSoftwareInternetScsiEnabledResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiDiscoveryPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiDiscoveryProperties",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["discoveryProperties", "VimWs25::HostInternetScsiHbaDiscoveryProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiDiscoveryPropertiesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiDiscoveryPropertiesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAuthenticationPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiAuthenticationProperties",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["authenticationProperties", "VimWs25::HostInternetScsiHbaAuthenticationProperties"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAuthenticationPropertiesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiAuthenticationPropertiesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiDigestPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiDigestProperties",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]],
      ["digestProperties", "VimWs25::HostInternetScsiHbaDigestProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiDigestPropertiesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiDigestPropertiesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAdvancedOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiAdvancedOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VimWs25::HostInternetScsiHbaTargetSet", [0, 1]],
      ["options", "VimWs25::HostInternetScsiHbaParamValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAdvancedOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiAdvancedOptionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiIPPropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiIPProperties",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["ipProperties", "VimWs25::HostInternetScsiHbaIPProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiIPPropertiesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiIPPropertiesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiName",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiNameResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiNameResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAliasRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiAlias",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateInternetScsiAliasResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateInternetScsiAliasResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AddInternetScsiSendTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddInternetScsiSendTargets",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddInternetScsiSendTargetsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddInternetScsiSendTargetsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveInternetScsiSendTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveInternetScsiSendTargets",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveInternetScsiSendTargetsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveInternetScsiSendTargetsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AddInternetScsiStaticTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AddInternetScsiStaticTargets",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AddInternetScsiStaticTargetsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AddInternetScsiStaticTargetsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveInternetScsiStaticTargetsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveInternetScsiStaticTargets",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VimWs25::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveInternetScsiStaticTargetsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveInternetScsiStaticTargetsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableMultipathPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableMultipathPath",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::EnableMultipathPathResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "EnableMultipathPathResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableMultipathPathRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableMultipathPath",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DisableMultipathPathResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DisableMultipathPathResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SetMultipathLunPolicyRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SetMultipathLunPolicy",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["lunId", "SOAP::SOAPString"],
      ["policy", "VimWs25::HostMultipathInfoLogicalUnitPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SetMultipathLunPolicyResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SetMultipathLunPolicyResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPathSelectionPolicyOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPathSelectionPolicyOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPathSelectionPolicyOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPathSelectionPolicyOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostPathSelectionPolicyOption[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryStorageArrayTypePolicyOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryStorageArrayTypePolicyOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryStorageArrayTypePolicyOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryStorageArrayTypePolicyOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::HostStorageArrayTypePolicyOption[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateScsiLunDisplayNameRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateScsiLunDisplayName",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["lunUuid", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateScsiLunDisplayNameResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateScsiLunDisplayNameResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshStorageSystemRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshStorageSystem",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RefreshStorageSystemResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RefreshStorageSystemResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["ipConfig", "VimWs25::HostIpConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateIpConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateIpConfigResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectVnicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SelectVnic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectVnicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SelectVnicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DeselectVnicRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DeselectVnic",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeselectVnicResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DeselectVnicResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryNetConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryNetConfig",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryNetConfigResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryNetConfigResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::VirtualNicManagerNetConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectVnicForNicTypeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "SelectVnicForNicType",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SelectVnicForNicTypeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "SelectVnicForNicTypeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DeselectVnicForNicTypeRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DeselectVnicForNicType",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DeselectVnicForNicTypeResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DeselectVnicForNicTypeResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryOptionsResponse",
    :schema_element => [
      ["returnval", ["VimWs25::OptionValue[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateOptionsRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateOptions",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["changedValue", "VimWs25::OptionValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateOptionsResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateOptionsResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckComplianceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCompliance_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCompliance_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCompliance_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryComplianceStatusRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryComplianceStatus",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryComplianceStatusResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryComplianceStatusResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ComplianceResult[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClearComplianceStatusRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ClearComplianceStatus",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profile", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ClearComplianceStatusResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ClearComplianceStatusResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryExpressionMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryExpressionMetadata",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["expressionName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryExpressionMetadataResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryExpressionMetadataResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ProfileExpressionMetadata[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyProfileResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::AssociateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "AssociateProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::AssociateProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "AssociateProfileResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DissociateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DissociateProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DissociateProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DissociateProfileResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckProfileComplianceRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckProfileCompliance_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckProfileCompliance_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckProfileCompliance_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExportProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExportProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExportProfileResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["createSpec", "VimWs25::ProfileCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateProfileResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPolicyMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPolicyMetadata",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["policyName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryPolicyMetadataResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryPolicyMetadataResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ProfilePolicyMetadata[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAssociatedProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAssociatedProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::FindAssociatedProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "FindAssociatedProfileResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateClusterProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateClusterProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::ClusterProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateClusterProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateClusterProfileResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateReferenceHostRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateReferenceHost",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateReferenceHostResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateReferenceHostResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateHostProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateHostProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["config", "VimWs25::HostProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UpdateHostProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "UpdateHostProfileResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ExecuteHostProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ExecuteHostProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["deferredParam", "VimWs25::ProfileDeferredPolicyOptionParameter[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ExecuteHostProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ExecuteHostProfileResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ProfileExecuteResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyHostConfigRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ApplyHostConfig_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference"],
      ["configSpec", "VimWs25::HostConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ApplyHostConfig_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ApplyHostConfig_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenerateConfigTaskListRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "GenerateConfigTaskList",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["configSpec", "VimWs25::HostConfigSpec"],
      ["host", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::GenerateConfigTaskListResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "GenerateConfigTaskListResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::HostProfileManagerConfigTaskList"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostProfileMetadataRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryHostProfileMetadata",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profileName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryHostProfileMetadataResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryHostProfileMetadataResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ProfileMetadata[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDefaultProfileRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDefaultProfile",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["profileType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateDefaultProfileResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateDefaultProfileResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ApplyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveScheduledTaskResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ReconfigureScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ReconfigureScheduledTaskResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::RunScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RunScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RunScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RunScheduledTaskResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateScheduledTaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveEntityScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveEntityScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveEntityScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveEntityScheduledTaskResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateObjectScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateObjectScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateObjectScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateObjectScheduledTaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveObjectScheduledTaskRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveObjectScheduledTask",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrieveObjectScheduledTaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveObjectScheduledTaskResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OpenInventoryViewFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "OpenInventoryViewFolder",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::OpenInventoryViewFolderResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "OpenInventoryViewFolderResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloseInventoryViewFolderRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CloseInventoryViewFolder",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["entity", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CloseInventoryViewFolderResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CloseInventoryViewFolderResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ModifyListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ModifyListView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["add", "VimWs25::ManagedObjectReference[]", [0, nil]],
      ["remove", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ModifyListViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ModifyListViewResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetListView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetListViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetListViewResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ManagedObjectReference[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetListViewFromViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetListViewFromView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["view", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ResetListViewFromViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ResetListViewFromViewResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyViewResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateInventoryViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateInventoryView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateInventoryViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateInventoryViewResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateContainerViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateContainerView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["container", "VimWs25::ManagedObjectReference"],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateContainerViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateContainerViewResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateListViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateListView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["obj", "VimWs25::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateListViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateListViewResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateListViewFromViewRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateListViewFromView",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["view", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateListViewFromViewResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateListViewFromViewResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RevertToSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RevertToSnapshot_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RevertToSnapshot_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RevertToSnapshot_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveSnapshot_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["removeChildren", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RemoveSnapshot_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RemoveSnapshot_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameSnapshotRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameSnapshot",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RenameSnapshotResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RenameSnapshotResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCompatibilityRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCompatibility_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckCompatibility_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckCompatibility_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVMotionCompatibilityEx_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference[]", [1, nil]],
      ["host", "VimWs25::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::QueryVMotionCompatibilityEx_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "QueryVMotionCompatibilityEx_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckMigrateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckMigrate_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["host", "VimWs25::ManagedObjectReference", [0, 1]],
      ["pool", "VimWs25::ManagedObjectReference", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckMigrate_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckMigrate_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckRelocateRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckRelocate_Task",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["vm", "VimWs25::ManagedObjectReference"],
      ["spec", "VimWs25::VirtualMachineRelocateSpec"],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckRelocate_TaskResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckRelocate_TaskResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidCollectorVersion,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidCollectorVersionFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidProperty,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidPropertyFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyPropertyFilterRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyPropertyFilter",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyPropertyFilterResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyPropertyFilterResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateFilterRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateFilter",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["spec", "VimWs25::PropertyFilterSpec"],
      ["partialUpdates", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreateFilterResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreateFilterResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrievePropertiesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrieveProperties",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specSet", "VimWs25::PropertyFilterSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrievePropertiesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrievePropertiesResponse",
    :schema_element => [
      ["returnval", ["VimWs25::ObjectContent[]", XSD::QName.new("urn:vim25", "returnval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckForUpdates",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CheckForUpdatesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CheckForUpdatesResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UpdateSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "WaitForUpdates",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitForUpdatesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "WaitForUpdatesResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UpdateSet"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelWaitForUpdatesRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelWaitForUpdates",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelWaitForUpdatesResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelWaitForUpdatesResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitForUpdatesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "WaitForUpdatesEx",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["options", "VimWs25::WaitOptions", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::WaitForUpdatesExResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "WaitForUpdatesExResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::UpdateSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrievePropertiesEx",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["specSet", "VimWs25::PropertyFilterSpec[]", [1, nil]],
      ["options", "VimWs25::RetrieveOptions"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RetrievePropertiesExResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "RetrievePropertiesExResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::RetrieveResult", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ContinueRetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "ContinueRetrievePropertiesEx",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ContinueRetrievePropertiesExResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "ContinueRetrievePropertiesExResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::RetrieveResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelRetrievePropertiesExRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelRetrievePropertiesEx",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CancelRetrievePropertiesExResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CancelRetrievePropertiesExResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::CreatePropertyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "CreatePropertyCollector",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::CreatePropertyCollectorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "CreatePropertyCollectorResponse",
    :schema_qualified => true,
    :schema_element => [
      ["returnval", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyPropertyCollectorRequestType,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyPropertyCollector",
    :schema_qualified => true,
    :schema_element => [
      ["v__this", ["VimWs25::ManagedObjectReference", XSD::QName.new("urn:vim25", "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::DestroyPropertyCollectorResponse,
    :schema_ns => "urn:vim25",
    :schema_name => "DestroyPropertyCollectorResponse",
    :schema_qualified => true,
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VimWs25::HostCommunication,
    :schema_ns => "urn:vim25",
    :schema_name => "HostCommunicationFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNotConnected,
    :schema_ns => "urn:vim25",
    :schema_name => "HostNotConnectedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::HostNotReachable,
    :schema_ns => "urn:vim25",
    :schema_name => "HostNotReachableFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidArgument,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidArgumentFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidRequest,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidRequestFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::InvalidType,
    :schema_ns => "urn:vim25",
    :schema_name => "InvalidTypeFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::ManagedObjectNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "ManagedObjectNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["obj", "VimWs25::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodNotFound,
    :schema_ns => "urn:vim25",
    :schema_name => "MethodNotFoundFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["receiver", "VimWs25::ManagedObjectReference"],
      ["method", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotEnoughLicenses,
    :schema_ns => "urn:vim25",
    :schema_name => "NotEnoughLicensesFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotImplemented,
    :schema_ns => "urn:vim25",
    :schema_name => "NotImplementedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::NotSupported,
    :schema_ns => "urn:vim25",
    :schema_name => "NotSupportedFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RequestCanceled,
    :schema_ns => "urn:vim25",
    :schema_name => "RequestCanceledFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::C_SecurityError,
    :schema_ns => "urn:vim25",
    :schema_name => "SecurityErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::SystemError,
    :schema_ns => "urn:vim25",
    :schema_name => "SystemErrorFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::UnexpectedFault,
    :schema_ns => "urn:vim25",
    :schema_name => "UnexpectedFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]],
      ["faultName", "SOAP::SOAPString"],
      ["fault", "VimWs25::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::MethodFault,
    :schema_ns => "urn:vim25",
    :schema_name => "MethodFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VimWs25::RuntimeFault,
    :schema_ns => "urn:vim25",
    :schema_name => "RuntimeFaultFault",
    :schema_qualified => true,
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VimWs25::DynamicProperty[]", [0, nil]],
      ["faultCause", "VimWs25::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VimWs25::LocalizableMessage[]", [0, nil]]
    ]
  )
# end

# end
