#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'
include FileUtils

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../', __FILE__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def load_rakefile
  chdir APP_ROOT do
    load 'Rakefile'
  end

  Rake.application.in_namespace('db:migrate') do |namespace|
    ([Rake::Task['db:migrate']] + namespace.tasks).each do |task|
      task.prerequisites.delete "good_migrations:disable_autoload"
    end
  end
end

chdir APP_ROOT do
  # This script is a way to update your development environment automatically.
  # Add necessary update steps to this file.

  puts '== Installing dependencies =='
  # Run bower in a thread and continue to do the non-js stuff
  puts "Updating bower assets in parallel..."
  bower_thread = Thread.new do
    system! "bower update --allow-root -F --silent --config.analytics=false"
  end
  system! 'gem install bundler --conservative'

  # TODO: This unlocks your dependencies and installs all updates.
  # From: https://github.com/ManageIQ/manageiq/pull/11137
  # It should be system('bundle check') || system!('bundle install').
  # If we need a "reset all the things" script, we should call it bin/reset.
  system! 'bundle update'

  # load 'Rakefile'
  load_rakefile
  puts "\n== Updating database =="
  Rake::Task["db:migrate"].invoke

  puts "\n== Seeding database =="
  Rake::Task["db:seed"].invoke

  puts "\n== Resetting tests =="
  system! "bin/rails test:vmdb:setup"

  unless ENV["SKIP_AUTOMATE_RESET"]
    puts "\n== Resetting Automate Domains =="
    Rake::Task["evm:automate:reset"].invoke
  end

  # Make sure bower is done before compiling assets
  bower_thread.join
  puts "Done running `bower update`."

  if ENV['RAILS_ENV'] == 'production'
    puts "\n== Recompiling assets =="
    Rake::Task["evm:compile_assets"].invoke
  end

  puts "\n== Removing old logs and tempfiles =="
  Rake::Task["log:clear"].invoke
  Rake::Task["tmp:clear"].invoke
end
