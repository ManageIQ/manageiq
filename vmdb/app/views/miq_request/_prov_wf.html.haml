- # wf					The workflow object currently in use
- # dialog			The name (symbol) of the selected dialog
- if (@options && @options[:wf]) || (@edit && @edit[:wf])
  #prov_wf_div
    - options = @options     || @edit[:new]
    - wf      = options[:wf] || @edit[:wf]
    - tabname = @tabactive   || "#{options[:current_tab_key]}_div"
    #prov_tabs{:style => "display:none;"}
      %ul.tab
        - wf.provisioning_tab_list.each do |dialog|
          %li(id="#{dialog[:name]}_li")
            %a(href="##{dialog[:name]}_div")
              = dialog[:description]

      - current_tab = @edit && @edit[:new] ? @edit[:new][:current_tab_key] : @options[:current_tab_key]
      - wf.get_dialog_order.each do |dialog_name|
        %div{:id => "#{dialog_name}_div", :width => "150px", :name => wf.instance_variable_get(:@dialogs).fetch_path(:dialogs, dialog_name, :description)}
          - if dialog_name == current_tab
            - dialog = wf.get_dialog(dialog_name)
            - unless dialog.blank? || dialog[:display] == :ignore
              - if wf.kind_of?(MiqProvisionWorkflow)
                = render :partial => "/shared/views/prov_dialog", :locals => {:wf => wf, :dialog => dialog_name}
              - elsif wf.kind_of?(VmMigrateWorkflow)
                = render :partial => "/miq_request/prov_vm_migrate_dialog", :locals => {:wf => wf, :dialog => dialog_name}
              - else
                = render :partial => "/miq_request/prov_host_dialog", :locals => {:wf => wf, :dialog => dialog_name}

:javascript
  // method takes hash that can have 4 keys: tabs div id, active_tab label,
  // url to go to when tab is changed, and whether to check for abandon changes or not
  miq_jquery_tabs_init({tabs_div: "prov_tabs", url: "/miq_request/prov_field_changed/", active_tab: "#{tabname}"});
  $("#hardware").css("display","none")
