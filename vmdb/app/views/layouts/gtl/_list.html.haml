- # New code to use DHTMLXGRID below
- if @grid_xml
  - url = @showlinks == false ? nil : view_to_url(view, @parent)
  - if @explorer
    #list_grid{:style => "cursor: hand;"}
    - ajax_url = !(%w(OntapStorageSystem OntapLogicalDisk OntapStorageVolume OntapFileShare SecurityGroup).include?(view.db) || (request.parameters[:controller] == "service" && view.db == "Vm"))
    - # don't need a row url to be AJAX when displaying a list of other CI's inside explorer
    = render(:partial => 'layouts/dhtmlxgrid',
      :locals         => {:options => {:grid_id => "list_grid",
        :grid_name                              => "gtl_list_grid",
        :grid_xml                               => @grid_xml,
        :row_url                                => url,
        :row_url_ajax                           => ajax_url,
        :action_url                             => action_url,
        :save_col_widths                        => true,
        :autosize                               => true,
        :skin                                   => "style3",
        :sortcol                                => @sortcol ? @sortcol + 2 : nil,
        :sortdir                                => @sortdir ? @sortdir[0..2] : nil,
        :alt_row                                => true}})
  - else
    - # substracting leftcol 219 from @winW to calculate width of div
    #list_grid{:style => "width: #{@winW - 219}; height: #{center_div_height}px; cursor: hand; overflow-x: auto; overflow-y: auto;"}
    = render(:partial => 'layouts/dhtmlxgrid',
      :locals  => {:options => {:grid_id => "list_grid",
        :grid_name                       => "gtl_list_grid",
        :grid_xml                        => @grid_xml,
        :row_url                         => url,
        :action_url                      => action_url,
        :save_col_widths                 => true,
        :skin                            => "style3",
        :sortcol                         => @sortcol ? @sortcol + 2 : nil,
        :sortdir                         => @sortdir ? @sortdir[0..2] : nil,
        :alt_row                         => true}})
- else
  %table.style3
    %thead
      %tr
        - unless @embedded || @no_checkboxes
          %th.checkbox
            &nbsp;
        - unless @no_listicon
          %th.icon
            &nbsp;
        - view.headers.each_with_index do |h, i|
          - if !@embedded && @pages
            - # Replaced to exclude non-view table fields from sorting
            - if i == @sortcol
              %th{:nowrap => 1, :class => (@sortdir == "ASC") ? "sorting_asc" : "sorting_desc"}
                = link_to(h(h),
                  {:action => action_url, :sort_choice => h},
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  :remote                => true)
            - else
              %th{:nowrap => 1}
                = link_to(h(h),
                  {:action => action_url, :sort_choice => h},
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  :remote                => true)
          - else
            - # Disable column sorting when embedded, for now
            %th{:nowrap => 1}
              = h(h)
      - if get_vmdb_config[:product][:vmdb_connections_filter] && view.db == "VmdbDatabaseConnection"
        %tr
          - unless @embedded || @no_checkboxes
            %th.checkbox
              &nbsp;
          - unless @no_listicon
            %th.icon
              &nbsp;
          - view.col_order.each do |col|
            %th{:nowrap => 1}
              - if %w(zone.name miq_worker.type address).include?(col)
                - url = url_for(:action => 'list_view_filter')
                - if col == "zone.name"
                  = select_tag('zone_name',
                    options_for_select([["<#{_('All')}>", "all"]] + @zones, @sb[:zone_name]),
                    "data-miq_observe" => {:url => url}.to_json)
    %tbody
      - table.data[@first_item..@last_item].each do |row|
        - @id = to_cid(row['id'])
        - cls = view.db == "MiqWorker" && @sb[:selected_worker_id].to_i == row['id'].to_i ? "row3" : cycle('row0', 'row1')
        %tr{:class => cls}
          - cursor = %w(MiqEvent MiqTask VmdbDatabaseConnection VmdbDatabaseSetting).include?(view.db) || @embedded ? "default" : "pointer"
          - unless @embedded || @no_checkboxes
            %td{:class => "checkbox", :style => "cursor: #{cursor}"}
              = check_box_tag("check_#{@id}", 1, false,
                :id      => "listcheckbox",
                :onclick => "miqUpdateButtons(this, '#{button_div}');")
          - unless @no_listicon
            - title = ""
            - click = ""
            - unless (@embedded || @no_checkboxes) && ! @showlinks
              - # Don't put a td URL for the server_build list view
              - case view.db
              - when "ProductUpdate", "ServerBuild", "MiqTask", "MiqEvent", "VmdbDatabaseConnection", "VmdbDatabaseSetting"
              - when "MiqProvision"
                - rec = @targets_hash[row['id']] if @targets_hash
                - unless rec.destination_id.blank?
                  - click = "DoNav('/vm/show/#{to_cid(rec.destination_id)}');"
                  - title = _("Click to view this VM")
              - when "Job"
                - click = "DoNav('/vm/show/#{to_cid(row["target_id"])}');"
              - when @vm && view.db
                - click = "DoNav('/vm/#{@listicon.pluralize}/#{@vm.id}?show=#{@id}');"
              - when "Action"
                - click = "DoNav('#{url_for_db("miq_action")}');"
              - when "LdapRegion"
                - click = "cfmeDynatree_activateNode('settings_tree', 'lr-#{to_cid(row['id'])}');"
              - when "MiqAction"
                - click = "cfmeDynatree_activateNode('action_tree', 'a-#{to_cid(row['id'])}');"
              - when "MiqAlert"
                - click = "cfmeDynatree_activateNode('alert_tree', 'al-#{to_cid(row['id'])}');"
              - when "MiqPolicy"
                - click = "cfmeDynatree_activateNode('policy_tree', '#{x_node}_p-#{to_cid(row['id'])}');"
              - when  "User"
                - click = "cfmeDynatree_activateNode('rbac_tree', 'u-<%= to_cid(row['id'])%>');"
              - when "MiqGroup"
                - click = "cfmeDynatree_activateNode('rbac_tree', 'g-#{to_cid(row['id'])}');"
              - when "MiqUserRole"
                - click = "cfmeDynatree_activateNode('rbac_tree', 'ur-#{to_cid(row['id'])}');"
              - when "VmdbTableEvm"
                - click = "cfmeDynatree_activateNode('vmdb_tree', 'tb-#{to_cid(row['id'])}');"
              - when "VmdbIndex"
                - click = remote_function(:url => "/ops/x_show/#{to_cid(row['id'])}?list=true")
              - when "MiqServer"
                - click = "cfmeDynatree_activateNode('diagnostics_tree', 'svr-#{to_cid(row['id'])}');"
              - when "MiqSchedule"
                - if x_active_tree == :settings_tree
                  - click = "cfmeDynatree_activateNode('settings_tree', 'msc-#{to_cid(row['id'])}');"
                - elsif x_active_tree == "schedule"
                  - click = "cfmeDynatree_activateNode('schedules_tree','msc-#{to_cid(row['id'])}');"
              - when "MiqReportResult"
                - if x_active_tree == :savedreports_tree
                  - if x_node .split('-').length == 1
                    - click = remote_function(:loading => "miqSparkle(true);",
                      :complete => "miqSparkle(false);",
                      :url      => {:action => 'get_report', :id => "rr-#{to_cid(row['id'])}"})
                  - else
                    - click = "cfmeDynatree_activateNode('savedreports_tree', 'rr-#{to_cid(row['id'])}');"
                - elsif x_active_tree == :reports_tree
                  - click = "cfmeDynatree_activateNode('reports_tree', '#{x_node}_rr-#{to_cid(row['id'])}');"
              - when "MiqWidget"
                - typ = WIDGET_CONTENT_TYPE.invert[row['content_type']]
                - click = "cfmeDynatree_activateNode('widgets_tree', 'xx-#{typ}_-#{to_cid(row['id'])}');"
              - when "IsoDatastore"
                - click = "cfmeDynatree_activateNode('iso_datastores_tree', 'isd-#{to_cid(row['id'])}');"
              - when "PxeServer"
                - click = "cfmeDynatree_activateNode('pxe_servers_tree', 'ps-#{to_cid(row['id'])}');"
              - when "PxeImageType"
                - click = "cfmeDynatree_activateNode('pxe_image_types_tree', 'pit-#{to_cid(row['id'])}');"
              - when "CustomizationTemplate"
                - click = "cfmeDynatree_activateNode('customization_templates_tree', 'ct-#{to_cid(row['id'])}');"
              - when "ScanItemSet"
                - click = "cfmeDynatree_activateNode('settings_tree', 'sis-#{to_cid(row['id'])}');"
              - when "ChargebackRate"
                - click = "cfmeDynatree_activateNode('#{x_active_tree}', '#{x_node}_cr-#{to_cid(row['id'])}');"
              - when "MiqDialog"
                - click = "cfmeDynatree_activateNode('old_dialogs_tree', '#{X_TREE_NODE_PREFIXES.invert["MiqDialog"]}-#{to_cid(row['id'])}');"
              - when "MiqWorker"
                - click = remote_function(:url => {:action => 'diagnostics_worker_selected', :id => "#{row['id']}"})
              - else
                - click = "DoNav('#{url_for_db(view.db)}');"
            %td.icon{:title => title, :onclick => click, :nowrap => true,
              :onmouseover  => "ChangeColor(this, true); this.style.cursor='#{cursor}';",
              :onmouseout   => "ChangeColor(this, false);"}
              = render :partial => "layouts/listicon", :locals => {:db => view.db, :row => row, :icon_image => listicon_image}
          - view.col_order.each do |col|
            - title = ""
            - click = ""
            - nowrap = false
            - unless (@embedded || @no_checkboxes) && ! @showlinks
              - if %w(MiqTask MiqEvent).include?(view.db)
              - elsif view.db == "MiqProvision"
                - rec = @targets_hash[row['id']] if @targets_hash
                - unless rec.destination_id.blank?
                  - click = "DoNav('/vm/show/#{to_cid(rec.destination_id)}');"
                  - title = _("Click to view this VM")
              - elsif view.db == "Job"
                - if col.include?("agent_")
                  - if !row['agent_class'].nil? && row['agent_class'] != ""
                    - a_rec = @targets_hash[row['agent_id']] if @targets_hash
                    - if a_rec.nil?
                      - title = _("%s record no longer exists") % row['agent_class']
                    - else
                      - if row['agent_class'] != "MiqServer"
                        - click = "DoNav('/#{row['agent_class'].underscore}/show/#{to_cid(row['agent_id'])}');"
                        - title = _("Click to view %s") % h("#{row['agent_class']}<#{a_rec.name}>")
                - else
                  - if row['target_id'].blank?
                    - title = _("No task target captured")
                  - else
                    - target_class = row['target_class']
                    - action = target_class.to_s == "VmOrTemplate" ? "vm_show" : "show"
                    - click = "DoNav('/#{target_class.constantize.base_class.name.underscore.downcase}/#{action}/#{to_cid(row['target_id'])}');"
                    - title = _("Click to view target %s") % h(ui_lookup(:model => target_class.constantize.base_class.name))
              - elsif %w(total_space free_space).include?(col)
                - title = _("%s bytes") % number_with_delimiter(h(row[col]), :delimiter => ",", :separator => ".")
              - else
                - if (row[col].kind_of?(Time) || %w(updated_on created_on started_on finished_on).include?(col)) && !row[col].nil? && row[col] != ""
                  - row[col] = row[col].to_time if row[col].kind_of?(String)
                - if row[col].kind_of?(Time)
                  - title = h(format_timezone(row[col], Time.zone, "gtl"))
                - else
                  - title = h(row[col])
                - if @vm
                  - click = "DoNav('/vm/#{@listicon.pluralize}/#{@vm.id}?show=#{@id}');"
                - else
                  - case view.db
                  - when "VmdbDatabaseConnection", "VmdbDatabaseSetting"
                    - # No onclick for DB settings
                  - when "LdapRegion"
                    - click = "cfmeDynatree_activateNode('settings_tree', 'lr-#{to_cid(row['id'])}');"
                  - when "MiqAction"
                    - click = "cfmeDynatree_activateNode('action_tree', 'a-#{to_cid(row['id'])}');"
                  - when "MiqAlert"
                    - click = "cfmeDynatree_activateNode('alert_tree', 'al-#{to_cid(row['id'])}');"
                  - when "MiqPolicy"
                    - click = "cfmeDynatree_activateNode('policy_tree', '#{x_node}_p-#{to_cid(row['id'])}');"
                  - when "User"
                    - click = "cfmeDynatree_activateNode('rbac_tree', 'u-#{to_cid(row['id'])}');"
                  - when "MiqGroup"
                    - click = "cfmeDynatree_activateNode('rbac_tree', 'g-#{to_cid(row['id'])}');"
                  - when "MiqUserRole"
                    - click = "cfmeDynatree_activateNode('rbac_tree', 'ur-#{to_cid(row['id'])}');"
                  - when "VmdbTableEvm"
                    - click = "cfmeDynatree_activateNode('vmdb_tree', 'tb-#{to_cid(row['id'])}');"
                  - when "VmdbIndex"
                    - click = remote_function(:url => "/ops/x_show/#{to_cid(row['id'])}?list=true")
                  - when "MiqServer"
                    - click = "cfmeDynatree_activateNode('diagnostics_tree', 'svr-#{to_cid(row['id'])}');"
                  - when "MiqSchedule"
                    - rec = @targets_hash[row['id']] if @targets_hash
                    - if x_active_tree == :settings_tree
                      - click = "cfmeDynatree_activateNode('settings_tree', 'msc-#{to_cid(row['id'])}');"
                    - elsif x_active_tree == :schedules_tree
                      - click = "cfmeDynatree_activateNode('schedules_tree', 'msc-#{to_cid(row['id'])}');"
                  - when "MiqReportResult"
                    - if x_active_tree == :savedreports_tree
                      - if x_node .split('-').length == 1
                        - click = remote_function(:loading => "miqSparkle(true);",
                          :complete => "miqSparkle(false);",
                          :url      => {:action => 'get_report', :id => "rr-#{to_cid(row['id'])}"})
                      - else
                        - click = "cfmeDynatree_activateNode('savedreports_tree', 'rr-#{to_cid(row['id'])}');"
                    - elsif x_active_tree == :reports_tree
                      - click = "cfmeDynatree_activateNode('reports_tree', '#{x_node}_rr-#{to_cid(row['id'])}');"
                  - when "MiqWidget"
                    - typ = WIDGET_CONTENT_TYPE.invert[row['content_type']]
                    - click = "cfmeDynatree_activateNode('widgets_tree', 'xx-#{typ}_-#{to_cid(row['id'])}');"
                  - when "IsoDatastore"
                    - click = "cfmeDynatree_activateNode('iso_datastores_tree', 'isd-#{to_cid(row['id'])}');"
                  - when "PxeServer"
                    - click = "cfmeDynatree_activateNode('pxe_servers_tree', 'ps-#{to_cid(row['id'])}');"
                  - when "PxeImageType"
                    - click = "cfmeDynatree_activateNode('pxe_image_types_tree', 'pit-#{to_cid(row['id'])}');"
                  - when "CustomizationTemplate"
                    - click = "cfmeDynatree_activateNode('customization_templates_tree', 'ct-#{to_cid(row['id'])}');"
                  - when "ScanItemSet"
                    - click = "cfmeDynatree_activateNode('settings_tree', 'sis-#{to_cid(row['id'])}');"
                  - when "ChargebackRate"
                    - click = "cfmeDynatree_activateNode('#{x_active_tree}', '#{x_node}_cr-#{to_cid(row['id'])}');"
                  - when "MiqDialog"
                    - click = "cfmeDynatree_activateNode('old_dialogs_tree', '#{X_TREE_NODE_PREFIXES.invert["MiqDialog"]}-#{to_cid(row['id'])}');"
                  - when "MiqWorker"
                    - click = remote_function(:url => {:action => 'diagnostics_worker_selected', :id => "#{row['id']}"})
                  - else
                    - if view.db == "Action"
                      - click = "DoNav('#{url_for_db("miq_action")}');"
                    - else
                      - if @edit && @edit[:hostitems]
                        - click = "DoNav('/host/edit/?selected_host=#{@id}');"
                      - else
                        - click = "DoNav('#{url_for_db(view.db)}');"
            - if %w(message comment).include?(col)
              - nowrap = false
            - elsif %w(data name).include?(col) && row[col].nil? && view.db == "RegistryItems"
              - nowrap = false
            - elsif col == "name" && row[col].nil? && view.db == "MiqReportResult"
              - nowrap = false
            - else
              - nowrap = true
            %td{:onclick => click, :title => title, :nowrap => nowrap,
              :onmouseover => "ChangeColor(this, true); this.style.cursor = '#{cursor}';",
              :onmouseout  => "ChangeColor(this, false);"}
              - if %w(updated_on created_on started_on last_scan_on finished_on).include?(col) && !row[col].blank?
                - row[col] = row[col].to_time if row[col].kind_of?(String)
              - if %w(state status).include?(col) && row[col].nil? && view.db == "Job"
                %center
                  = h(row[col].capitalize)
              - elsif col == "agent_class" && row[col].nil? && view.db == "Job"
                - unless row['agent_class'].blank?
                  - if a_rec.nil?
                    = _("%s record no longer exists") % row['agent_class']
                  - else
                    %center
                      = h(a_rec.name)
              - elsif %w(free_space total_space size).include?(col) && row[col].nil?
                %center
                  = h(number_to_human_size(row[col], :precision => 2))
              - elsif col == "group_count" && row[col].nil?
                %center
                  = h(row[col])
              - elsif row[col].is_a?(Time) && row[col].nil?
                %center
                  - unless row[col].blank?
                    - if view.db == "MiqSchedule"
                      - celltz = rec.run_at[:tz] if rec && rec.run_at
                    = h(format_timezone(row[col], celltz || Time.zone, "gtl"))
              - else
                - if %w(Account SystemService Patch GuestApplication).include?(view.db)
                  = h(row[col].to_s.length < 18 ? row[col] : row[col].to_s[0..13] + "...")
                - elsif view.db == "RegistryItems" && col == "data"
                  = h(row[col].to_s.length < 50 ? row[col] : row[col].to_s[0..50] + "...")
                - elsif view.db == "Filesystem" && col == "name"
                  = h(row[col].to_s.length < 50 ? row[col] : row[col].to_s[0..50] + "...")
                - else
                  - if row[col].kind_of?(Time) && row[col].nil? && row[col] != ""
                    = h(format_timezone(row[col], Time.zone, "gtl"))
                  - else
                    - tz = view.db.downcase == "miqschedule" ? MiqServer.my_server.get_config("vmdb").config.fetch_path(:server, :timezone) || "UTC" : Time.zone
                    - col_data = view.format(col, row[col], :tz => celltz || tz).gsub(/\\/, '\&')
                    = h(col_data)
