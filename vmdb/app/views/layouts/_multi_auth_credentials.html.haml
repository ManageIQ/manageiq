- url = url_for(:action => 'form_field_changed', :id     => "#{record.id || "new"}")
- validate_url ||= (record.id || @edit[:hostitems]) ? "update" : "create"
- change_url   ||= "form_field_changed"
- settab = @tabnum.nil? ? "" : "a_tabbar.setTabActive('a#{@tabnum}');"
- legendtext   ||= _("Credentials")

%p.legend= legendtext
#auth_tabs{:style => "display:none;"}
  %ul.tab
    %li
      %a{:href => "#default"}= _("Default")
    - if %w(ems_cloud ems_infra).include?(params[:controller])
      - display = @edit[:new][:emstype] == "rhevm" ? "" : "none"
      %li#metrics_li{:style => "display:#{display};"}
        %a{:href => "#metrics"}= _("C & U Database")
      - display = %w(openstack openstack_infra).include?(@edit[:new][:emstype]) ? "" : "none"
      %li#amqp_li{:style => "display:#{display};"}
        %a{:href => "#amqp"}= _("AMQP")
    - else
      %li
        %a{:href => "#remote"}= _("Remote Login")
      %li
        %a{:href => "#web"}= _("Web Services")
      %li
        %a{:href => "#ipmi"}= _("IPMI")
  #default{:name => "Default"}
    %table.style1
      %tbody
        = render(:partial => "/layouts/auth_credentials",
                 :locals  => {:pfx => "default",
                              :change_url   => change_url,
                              :validate_url => validate_url,
                              :ujs_button   => true,
                              :uid_label    => @edit[:new][:emstype] == "ec2" ? _("Access Key ID") : nil,
                              :pwd_label    => @edit[:new][:emstype] == "ec2" ? _("Secret Access Key") : nil,
                              :record       => record})
    %span{:style => "color:black"}= _("Required. Should have privileged access, such as root or administrator.")
  - if %w(ems_cloud ems_infra).include?(params[:controller])
    #metrics{:name => _("C & U Database")}
      %table.style1
        %tbody
          = render(:partial => "/layouts/auth_credentials",
                   :locals   => {:pfx          => "metrics",
                                 :change_url   => change_url,
                                 :validate_url => validate_url,
                                 :ujs_button   => true,
                                 :uid_label    => @edit[:new][:emstype] == "ec2" ? _("Access Key ID") : nil,
                                 :pwd_label    => @edit[:new][:emstype] == "ec2" ? _("Secret Access Key") : nil,
                                 :record       => record})
      %span{:style => "color:black"}= _("Used to gather Capacity & Utilization metrics.")
    #amqp{:name => _("AMQP Messaging")}
      %table.style1
        %tbody
          = render(:partial => "/layouts/auth_credentials",
                   :locals  => {:pfx          => "amqp",
                                :change_url   => change_url,
                                :validate_url => validate_url,
                                :ujs_button   => true,
                                :record       => record})
      %span{:style => "color:black"}= _("Used to authenticate with OpenStack AMQP Messaging Bus for event handling.")
  - else
    #remote{:name => _("Remote Login")}
      %table.style1
        %tbody
          = render(:partial => "/layouts/auth_credentials",
                   :locals  => {:pfx          => "remote",
                                :change_url   => change_url,
                                :validate_url => validate_url,
                                :ujs_button   => true,
                                :record       => record})
      %span{:style => "color:black"}= _("Required if SSH login is disabled for the Default account.")
    #web{:name => _("Web Services")}
      %table.style1
        %tbody
          = render(:partial => "/layouts/auth_credentials",
                   :locals  => {:pfx          => "ws",
                                :change_url   => change_url,
                                :validate_url => validate_url,
                                :ujs_button   => true,
                                :record       => record})
      %span{:style => "color:black"}= _("Used for access to Web Services.")
    #ipmi{:name => _("IPMI")}
      %table.style1
        %tbody
          = render(:partial => "/layouts/auth_credentials",
                   :locals  => {:pfx          => "ipmi",
                                :change_url   => change_url,
                                :validate_url => validate_url,
                                :ujs_button   => true,
                                :record       => record})
      %span{:style => "color:black"}= _("Used for access to IPMI.")
- unless session[:host_items].nil?
  %table.admintable
    %tbody
      %tr
        %td.key= _("Select Host to validate against")
        %td
          = select_tag('validate_id',
                       options_for_select(@edit[:selected_hosts].invert.sort,
                                          @edit[:validate_against].to_i),
                       "data-miq_observe" => {:url => url_for(:action => 'form_field_changed',
                                                              :id     => "#{record.id || "new"}")}.to_json)
%hr
%script{:type => "text/javascript"}
  -# method takes hash that can have 4 keys: tabs div id, active tab label,
  -# url to go to when tab is changed, and whether to check for abandon changes or not
  miq_jquery_tabs_init({tabs_div: "auth_tabs"})
