describe "Files and directories that shouldn't exist" do
  let(:all_paths) { Dir.chdir(Rails.root) { Dir.glob("**/*") } }
  let(:basenames) { all_paths.collect { |f| File.basename(f) } }

  it "fully qualified paths" do
    expect(all_paths).not_to include(
      "app/models/manageiq/providers/amazon",
      "app/models/manageiq/providers/ansible_tower",
      "app/models/manageiq/providers/azure",
      "app/models/manageiq/providers/foreman",
      "app/models/manageiq/providers/google",
      "app/models/manageiq/providers/hawkular",
      "app/models/manageiq/providers/kubernetes",
      "app/models/manageiq/providers/lenovo",
      "app/models/manageiq/providers/microsoft",
      "app/models/manageiq/providers/nuage",
      "app/models/manageiq/providers/openshift",
      "app/models/manageiq/providers/openstack",
      "app/models/manageiq/providers/redhat",
      "app/models/manageiq/providers/vmware",
      "content",
      "db/migrate",
      "db/schema.yml",
      "spec/migrations",
      "spec/models/manageiq/providers/amazon",
      "spec/models/manageiq/providers/ansible_tower",
      "spec/models/manageiq/providers/azure",
      "spec/models/manageiq/providers/foreman",
      "spec/models/manageiq/providers/google",
      "spec/models/manageiq/providers/hawkular",
      "spec/models/manageiq/providers/kubernetes",
      "spec/models/manageiq/providers/lenovo",
      "spec/models/manageiq/providers/microsoft",
      "spec/models/manageiq/providers/nuage",
      "spec/models/manageiq/providers/openshift",
      "spec/models/manageiq/providers/openstack",
      "spec/models/manageiq/providers/redhat",
      "spec/models/manageiq/providers/vmware",
      "spec/tools/openstack_data",
      "spec/tools/scvmm_data",
      "spec/tools/vim_data",
      "spec/vcr_casettes",
    )
  end

  it "basenames" do
    expect(basenames).not_to include(
      "miq_ae_browser.rb",
      "miq_ae_browser_spec.rb",
      "miq_ae_class_compare_fields.rb",
      "miq_ae_class_compare_fields_spec.rb",
      "miq_ae_class_copy.rb",
      "miq_ae_class_copy_spec.rb",
      "miq_ae_class_yaml.rb",
      "miq_ae_class_yaml_spec.rb",
      "miq_ae_copy_mixin.rb",
      "miq_ae_copy_mixin_spec.rb",
      "miq_ae_datastore.rb",
      "miq_ae_datastore_spec.rb",
      "miq_ae_domain_spec.rb",
      "miq_ae_export.rb",
      "miq_ae_export_spec.rb",
      "miq_ae_git_import.rb",
      "miq_ae_git_import_spec.rb",
      "miq_ae_import.rb",
      "miq_ae_import_spec.rb",
      "miq_ae_instance_compare_values.rb",
      "miq_ae_instance_compare_values_spec.rb",
      "miq_ae_instance_copy.rb",
      "miq_ae_instance_copy_spec.rb",
      "miq_ae_instance_yaml.rb",
      "miq_ae_instance_yaml_spec.rb",
      "miq_ae_method_compare.rb",
      "miq_ae_method_compare_spec.rb",
      "miq_ae_method_copy.rb",
      "miq_ae_method_copy_spec.rb",
      "miq_ae_method_yaml.rb",
      "miq_ae_method_yaml_spec.rb",
      "miq_ae_mock_object.rb",
      "miq_ae_mock_service.rb",
      "miq_ae_password.rb",
      "miq_ae_password_spec.rb",
      "miq_ae_yaml_export.rb",
      "miq_ae_yaml_export_consolidated.rb",
      "miq_ae_yaml_export_consolidated_spec.rb",
      "miq_ae_yaml_export_fs.rb",
      "miq_ae_yaml_export_fs_spec.rb",
      "miq_ae_yaml_export_spec.rb",
      "miq_ae_yaml_export_zipfs.rb",
      "miq_ae_yaml_export_zipfs_spec.rb",
      "miq_ae_yaml_import.rb",
      "miq_ae_yaml_import_consolidated.rb",
      "miq_ae_yaml_import_consolidated_spec.rb",
      "miq_ae_yaml_import_fs.rb",
      "miq_ae_yaml_import_fs_spec.rb",
      "miq_ae_yaml_import_gitfs.rb",
      "miq_ae_yaml_import_gitfs_spec.rb",
      "miq_ae_yaml_import_spec.rb",
      "miq_ae_yaml_import_zipfs.rb",
      "miq_ae_yaml_import_zipfs_spec.rb",
      "miq_automate_helper.rb",
      "miq_ae_builtin_method_spec.rb",
      "miq_ae_state_machine_multi_spec.rb",
      "miq_ae_state_machine_retry_spec.rb",
      "miq_ae_state_machine_steps_spec.rb",
      "miq_ae_workspace_runtime_spec.rb",
      # "miq_ae_domain.rb", #because the factory still lives here...
    )
  end

  it "partial path matching" do
    all_paths.each do |path_from_root|
      expect(path_from_root).not_to include(
        "miq_ae_service",
        "engine/miq_ae_method_spec.rb",
        "SPEC_DOMAIN",
        "method_validation",
      )
    end
  end
end
