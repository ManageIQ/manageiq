class TreeBuilderChargebackReports  < TreeBuilder

  private

  def tree_init_options(tree_name)
    {:full_ids => true, :leaf => "MiqReportResult"}
  end

  def set_locals_for_render
    locals = super
    temp = {
      :id_prefix      => "cbrpt_",
      :autoload       => true
    }
    locals.merge!(temp)
  end

  # Get root nodes count/array for explorer tree
  def x_get_tree_roots(options)
    count_only = options[:count_only]
    items = MiqReportResult.all(:conditions => ["db=? AND userid=? AND report_source!=?",
                                                "Chargeback",
                                                User.current_user.userid,
                                                "Generated by user"],
                                :select => "miq_report_id, name",
                                :group  => "miq_report_id, name")
    if count_only
      items.length
    else
      objects = []
      items.sort{|a,b| a.name.downcase <=> b.name.downcase}.each_with_index do |item, idx|
        objects.push(
                      :id     => "#{to_cid(item.miq_report_id)}-#{idx}",
                      :text   => item.name,
                      :image  => "report",
                      :tip    => item.name
        )
      end
      objects
    end
  end

  # Handle custom tree nodes (object is a Hash)
  def x_get_tree_custom_kids(object, options)
    count_only = options[:count_only]
    objects = MiqReportResult.all(:order => "created_on DESC",
                                  :conditions => ["miq_report_id = ? AND userid=? AND report_source!=?",
                                                  from_cid(object[:id].split('-').first),
                                                  User.current_user.userid,
                                                  "Generated by user"],
                                  :select => "id, miq_report_id, name, last_run_on")
    count_only_or_objects(options[:count_only], objects, "name")
  end
end
