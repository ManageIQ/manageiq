- if @grid_hash
  - url = @showlinks == false ? nil : view_to_url(view, @parent)
  - grid_options = {:grid_id         => "list_grid",
                    :grid_name       => "gtl_list_grid",
                    :grid_hash       => @grid_hash,
                    :button_div      => button_div,
                    :action_url      => action_url}

  - if @explorer
    -# used for most gtl lists
    #list_grid
      - ajax_url = ! %w(OntapStorageSystem OntapLogicalDisk OntapStorageVolume OntapFileShare SecurityGroup FloatingIp NetworkRouter CloudSubnet CloudNetwork NetworkPort).include?(view.db)
      - ajax_url = false if request.parameters[:controller] == "service" && view.db == "Vm"
      -# don't need a row url to be AJAX when displaying a list of other CI's inside explorer
      = render(:partial => 'layouts/list_grid',
        :locals => {:options    => grid_options,
                    :js_options => {:sortcol         => @sortcol ? @sortcol : nil,
                                    :sortdir         => @sortdir ? @sortdir[0..2] : nil,
                                    :row_url         => url,
                                    :row_url_ajax    => ajax_url}})
  - else
    -# TODO: is this still even relevant? haven't seen it yet (--mhradil)
    -# substracting leftcol 219 from @winW to calculate width of div
    #list_grid
      = render(:partial => 'layouts/list_grid',
        :locals  => {:options    => grid_options,
                     :js_options => {:sortcol         => @sortcol ? @sortcol : nil,
                                     :sortdir         => @sortdir ? @sortdir[0..2] : nil,
                                     :row_url         => url}})
- else
  -# used for Saved Reports, ...
  %table.table.table-striped.table-bordered.table-hover.table-selectable
    %thead
      %tr
        - unless @embedded || @no_checkboxes
          %th.narrow
        %th.narrow
        - view.headers.each_with_index do |h, i|
          - if !@embedded && @pages
            -# Replaced to exclude non-view table fields from sorting
            - if i == @sortcol
              %th{:class => (@sortdir == "ASC") ? "sorting_asc" : "sorting_desc"}
                = link_to(h(_(h)),
                  {:action => action_url, :sort_choice => h},
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-method"          => :post,
                  :remote                => true)
            - else
              %th
                = link_to(h(_(h)),
                  {:action => action_url, :sort_choice => h},
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-method"          => :post,
                  :remote                => true)
          - else
            -# Disable column sorting when embedded, for now
            %th
              = h(h)
      - if get_vmdb_config[:product][:vmdb_connections_filter] && view.db == "VmdbDatabaseConnection"
        %tr
          - unless @embedded || @no_checkboxes
            %th
          %th
          - view.col_order.each do |col|
            %th
              - if %w(zone.name miq_worker.type address).include?(col)
                - url = url_for(:action => 'list_view_filter')
                - if col == "zone.name"
                  = select_tag('zone_name',
                    options_for_select([["<#{_('All')}>", "all"]] + @zones, @sb[:zone_name]),
                    "data-miq_observe" => {:url => url}.to_json)
    %tbody
      - table.data.each do |row|
        - @id = to_cid(row['id'])
        - classes = []
        - if view.db == "MiqWorker" && @sb[:selected_worker_id].to_i == row['id'].to_i
          - classes.append("selected")
        - if %w(MiqEventDefinition MiqTask VmdbDatabaseConnection VmdbDatabaseSetting).include?(view.db) || @embedded
          - classes.append("no-hover")
        %tr{:class => classes.join(' ')}
          - unless @embedded || @no_checkboxes
            %td.narrow
              = check_box_tag("check_#{@id}", 1, false,
                :id      => "listcheckbox",
                :class   => "list-grid-checkbox",
                :onclick => "miqGridOnCheck(this, '#{button_div}', 'gtl_div');")
          - title = ""
          - click = ""
          - unless (@embedded || @no_checkboxes) && ! @showlinks
            -# Don't put a td URL for the server_build list view
            - case view.db
            - when "ServerBuild", "MiqTask", "MiqEventDefinition", "VmdbDatabaseConnection", "VmdbDatabaseSetting"
            - when "MiqProvision"
              - rec = @targets_hash[row['id']] if @targets_hash
              - unless rec.destination_id.blank?
                - click = "DoNav('/vm/show/#{to_cid(rec.destination_id)}');"
                - title = _("Click to view this VM")
            - when "Job"
              - click = "DoNav('/#{row['target_class'].underscore}/show/#{to_cid(row["target_id"])}');"
            - when @vm && view.db
              - click = "DoNav('/vm/#{@listicon.pluralize}/#{@vm.id}?show=#{@id}');"
            - when "Action"
              - click = "DoNav('#{url_for_db("miq_action")}');"
            - when "LdapRegion"
              - click = "miqDynatreeActivateNode('settings_tree', 'lr-#{to_cid(row['id'])}');"
            - when "MiqAction"
              - click = "miqDynatreeActivateNode('action_tree', 'a-#{to_cid(row['id'])}');"
            - when "MiqAlert"
              - click = "miqDynatreeActivateNode('alert_tree', 'al-#{to_cid(row['id'])}');"
            - when "MiqPolicy"
              - click = "miqDynatreeActivateNode('policy_tree', '#{x_node}_p-#{to_cid(row['id'])}');"
            - when  "User"
              - click = "miqDynatreeActivateNode('rbac_tree', 'u-#{to_cid(row['id'])}');"
            - when "MiqGroup"
              - click = "miqDynatreeActivateNode('rbac_tree', 'g-#{to_cid(row['id'])}');"
            - when "MiqUserRole"
              - click = "miqDynatreeActivateNode('rbac_tree', 'ur-#{to_cid(row['id'])}');"
            - when "Tenant"
              - click = "miqDynatreeActivateNode('rbac_tree', 'tn-#{to_cid(row['id'])}');"
            - when "VmdbTableEvm"
              - click = "miqDynatreeActivateNode('vmdb_tree', 'tb-#{to_cid(row['id'])}');"
            - when "VmdbIndex"
              - click = remote_function(:url => "/ops/x_show/#{to_cid(row['id'])}?list=true")
            - when "MiqServer"
              - click = "miqDynatreeActivateNode('diagnostics_tree', 'svr-#{to_cid(row['id'])}');"
            - when "MiqSchedule"
              - if x_active_tree == :settings_tree
                - click = "miqDynatreeActivateNode('settings_tree', 'msc-#{to_cid(row['id'])}');"
              - elsif x_active_tree == "schedule"
                - click = "miqDynatreeActivateNode('schedules_tree','msc-#{to_cid(row['id'])}');"
            - when "MiqReportResult"
              - if x_active_tree == :savedreports_tree
                - if x_node.split('-').length == 1
                  - click = remote_function(:loading => "miqSparkle(true);",
                    :complete => "miqSparkle(false);",
                    :url      => {:action => 'get_report', :id => "xx-#{to_cid(row['miq_report_id'])}_rr-#{to_cid(row['id'])}"})
                - else
                  - click = "miqDynatreeActivateNode('savedreports_tree', 'xx-#{to_cid(row['miq_report_id'])}_rr-#{to_cid(row['id'])}');"
              - elsif x_active_tree == :reports_tree
                - click = "miqDynatreeActivateNode('reports_tree', '#{x_node}_rr-#{to_cid(row['id'])}');"
            - when "MiqWidget"
              - typ = WIDGET_CONTENT_TYPE.invert[row['content_type']]
              - click = "miqDynatreeActivateNode('widgets_tree', 'xx-#{typ}_-#{to_cid(row['id'])}');"
            - when "IsoDatastore"
              - click = "miqDynatreeActivateNode('iso_datastores_tree', 'isd-#{to_cid(row['id'])}');"
            - when "PxeServer"
              - click = "miqDynatreeActivateNode('pxe_servers_tree', 'ps-#{to_cid(row['id'])}');"
            - when "PxeImageType"
              - click = "miqDynatreeActivateNode('pxe_image_types_tree', 'pit-#{to_cid(row['id'])}');"
            - when "CustomizationTemplate"
              - click = "miqDynatreeActivateNode('customization_templates_tree', 'ct-#{to_cid(row['id'])}');"
            - when "ScanItemSet"
              - click = "miqDynatreeActivateNode('settings_tree', 'sis-#{to_cid(row['id'])}');"
            - when "ChargebackRate"
              - click = "miqDynatreeActivateNode('#{x_active_tree}', '#{x_node}_cr-#{to_cid(row['id'])}');"
            - when "MiqDialog"
              - click = "miqDynatreeActivateNode('old_dialogs_tree', '#{TreeBuilder.get_prefix_for_model("MiqDialog")}-#{to_cid(row['id'])}');"
            - when "MiqWorker"
              - click = remote_function(:url => {:action => 'diagnostics_worker_selected', :id => "#{row['id']}"})
            - else
              - click = "DoNav('#{url_for_db(view.db)}');"
          %td.narrow{:title => title, :onclick => click}
            = listicon_tag(view.db, row)
          - view.col_order.each do |col|
            - title = ""
            - click = ""
            - unless (@embedded || @no_checkboxes) && ! @showlinks
              - if %w(MiqTask MiqEventDefinition).include?(view.db)
              - elsif view.db == "MiqProvision"
                - rec = @targets_hash[row['id']] if @targets_hash
                - unless rec.destination_id.blank?
                  - click = "DoNav('/vm/show/#{to_cid(rec.destination_id)}');"
                  - title = _("Click to view this VM")
              - elsif view.db == "Job"
                - if col.include?("agent_")
                  - if !row['agent_class'].nil? && row['agent_class'] != ""
                    - a_rec = @targets_hash[row['agent_id']] if @targets_hash
                    - if a_rec.nil?
                      - title = _("%s record no longer exists") % row['agent_class']
                    - else
                      - if row['agent_class'] != "MiqServer"
                        - click = "DoNav('/#{row['agent_class'].underscore}/show/#{to_cid(row['agent_id'])}');"
                        - title = _("Click to view %s") % h("#{row['agent_class']}<#{a_rec.name}>")
                - else
                  - if row['target_id'].blank?
                    - title = _("No task target captured")
                  - else
                    - target_class = row['target_class']
                    - action = target_class.to_s == "VmOrTemplate" ? "vm_show" : "show"
                    - click = "DoNav('/#{target_class.constantize.base_class.name.underscore.downcase}/#{action}/#{to_cid(row['target_id'])}');"
                    - title = _("Click to view target %s") % h(ui_lookup(:model => target_class.constantize.base_class.name))
              - elsif %w(total_space free_space).include?(col)
                - title = _("%s bytes") % number_with_delimiter(h(row[col]), :delimiter => ",", :separator => ".")
              - else
                - if (row[col].kind_of?(Time) || %w(updated_on created_on started_on finished_on).include?(col)) && !row[col].nil? && row[col] != ""
                  - row[col] = row[col].to_time if row[col].kind_of?(String)
                - if row[col].kind_of?(Time)
                  - title = h(format_timezone(row[col], Time.zone, "gtl"))
                - else
                  - title = h(row[col])
                - if @vm
                  - click = "DoNav('/vm/#{@listicon.pluralize}/#{@vm.id}?show=#{@id}');"
                - else
                  - case view.db
                  - when "VmdbDatabaseConnection", "VmdbDatabaseSetting"
                    -# No onclick for DB settings
                  - when "LdapRegion"
                    - click = "miqDynatreeActivateNode('settings_tree', 'lr-#{to_cid(row['id'])}');"
                  - when "MiqAction"
                    - click = "miqDynatreeActivateNode('action_tree', 'a-#{to_cid(row['id'])}');"
                  - when "MiqAlert"
                    - click = "miqDynatreeActivateNode('alert_tree', 'al-#{to_cid(row['id'])}');"
                  - when "MiqPolicy"
                    - click = "miqDynatreeActivateNode('policy_tree', '#{x_node}_p-#{to_cid(row['id'])}');"
                  - when "User"
                    - click = "miqDynatreeActivateNode('rbac_tree', 'u-#{to_cid(row['id'])}');"
                  - when "MiqGroup"
                    - click = "miqDynatreeActivateNode('rbac_tree', 'g-#{to_cid(row['id'])}');"
                  - when "MiqUserRole"
                    - click = "miqDynatreeActivateNode('rbac_tree', 'ur-#{to_cid(row['id'])}');"
                  - when "Tenant"
                    - click = "miqDynatreeActivateNode('rbac_tree', 'tn-#{to_cid(row['id'])}');"
                  - when "VmdbTableEvm"
                    - click = "miqDynatreeActivateNode('vmdb_tree', 'tb-#{to_cid(row['id'])}');"
                  - when "VmdbIndex"
                    - click = remote_function(:url => "/ops/x_show/#{to_cid(row['id'])}?list=true")
                  - when "MiqServer"
                    - click = "miqDynatreeActivateNode('diagnostics_tree', 'svr-#{to_cid(row['id'])}');"
                  - when "MiqSchedule"
                    - rec = @targets_hash[row['id']] if @targets_hash
                    - if x_active_tree == :settings_tree
                      - click = "miqDynatreeActivateNode('settings_tree', 'msc-#{to_cid(row['id'])}');"
                    - elsif x_active_tree == :schedules_tree
                      - click = "miqDynatreeActivateNode('schedules_tree', 'msc-#{to_cid(row['id'])}');"
                  - when "MiqReportResult"
                    - if x_active_tree == :savedreports_tree
                      - if x_node.split('-').length == 1
                        - click = remote_function(:loading => "miqSparkle(true);",
                          :complete => "miqSparkle(false);",
                          :url      => {:action => 'get_report', :id => "xx-#{to_cid(row['miq_report_id'])}_rr-#{to_cid(row['id'])}"})
                      - else
                        - click = "miqDynatreeActivateNode('savedreports_tree', 'xx-#{to_cid(row['miq_report_id'])}_rr-#{to_cid(row['id'])}');"
                    - elsif x_active_tree == :reports_tree
                      - click = "miqDynatreeActivateNode('reports_tree', '#{x_node}_rr-#{to_cid(row['id'])}');"
                  - when "MiqWidget"
                    - typ = WIDGET_CONTENT_TYPE.invert[row['content_type']]
                    - click = remote_function(:loading  => "miqSparkle(true);",
                                              :complete => "miqSparkle(false);",
                                              :url      => {:action => 'x_show', :id => "xx-#{typ}_-#{to_cid(row['id'])}"})
                    -#- click = "miqDynatreeActivateNode('widgets_tree', 'xx-#{typ}_-#{to_cid(row['id'])}');"
                  - when "IsoDatastore"
                    - click = "miqDynatreeActivateNode('iso_datastores_tree', 'isd-#{to_cid(row['id'])}');"
                  - when "PxeServer"
                    - click = "miqDynatreeActivateNode('pxe_servers_tree', 'ps-#{to_cid(row['id'])}');"
                  - when "PxeImageType"
                    - click = "miqDynatreeActivateNode('pxe_image_types_tree', 'pit-#{to_cid(row['id'])}');"
                  - when "CustomizationTemplate"
                    - click = "miqDynatreeActivateNode('customization_templates_tree', 'ct-#{to_cid(row['id'])}');"
                  - when "ScanItemSet"
                    - click = "miqDynatreeActivateNode('settings_tree', 'sis-#{to_cid(row['id'])}');"
                  - when "ChargebackRate"
                    - click = "miqDynatreeActivateNode('#{x_active_tree}', '#{x_node}_cr-#{to_cid(row['id'])}');"
                  - when "MiqDialog"
                    - click = "miqDynatreeActivateNode('old_dialogs_tree', '#{TreeBuilder.get_prefix_for_model("MiqDialog")}-#{to_cid(row['id'])}');"
                  - when "MiqWorker"
                    - click = remote_function(:url => {:action => 'diagnostics_worker_selected', :id => "#{row['id']}"})
                  - else
                    - if view.db == "Action"
                      - click = "DoNav('#{url_for_db("miq_action")}');"
                    - else
                      - if @edit && @edit[:hostitems]
                        - click = "DoNav('/host/edit/?selected_host=#{@id}');"
                      - else
                        - click = "DoNav('#{url_for_db(view.db)}');"
            %td{:onclick => click, :title => title}
              - if %w(updated_on created_on started_on last_scan_on finished_on).include?(col) && !row[col].blank?
                - row[col] = row[col].to_time if row[col].kind_of?(String)
              - if %w(state status).include?(col) && row[col].nil? && view.db == "Job"
                %center
                  = h(row[col].capitalize)
              - elsif col == "enabled" && row[col].nil? && view.db == "MiqSchedule"
                = (!!row[col]).to_s.capitalize
              - elsif col == "agent_class" && row[col].nil? && view.db == "Job"
                - unless row['agent_class'].blank?
                  - if a_rec.nil?
                    = _("%s record no longer exists") % row['agent_class']
                  - else
                    %center
                      = h(a_rec.name)
              - elsif %w(free_space total_space size).include?(col) && row[col].nil?
                %center
                  = h(number_to_human_size(row[col], :precision => 2))
              - elsif col == "group_count" && row[col].nil?
                %center
                  = h(row[col])
              - elsif row[col].kind_of?(Time) && row[col].nil?
                %center
                  - unless row[col].blank?
                    - if view.db == "MiqSchedule"
                      - celltz = rec.run_at[:tz] if rec && rec.run_at
                    = h(format_timezone(row[col], celltz || Time.zone, "gtl"))
              - else
                - if %w(Account SystemService Patch GuestApplication).include?(view.db)
                  = h(row[col].to_s.length < 18 ? row[col] : row[col].to_s[0..13] + "...")
                - elsif view.db == "RegistryItems" && col == "data"
                  = h(row[col].to_s.length < 50 ? row[col] : row[col].to_s[0..50] + "...")
                - elsif view.db == "Filesystem" && col == "name"
                  = h(row[col].to_s.length < 50 ? row[col] : row[col].to_s[0..50] + "...")
                - else
                  - if row[col].kind_of?(Time) && row[col].nil? && row[col] != ""
                    = h(format_timezone(row[col], Time.zone, "gtl"))
                  - else
                    - tz = view.db.downcase == "miqschedule" ? server_timezone : Time.zone
                    - col_data = view.format(col, row[col], :tz => celltz || tz).gsub(/\\/, '\&')
                    = h(col_data)
