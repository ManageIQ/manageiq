- field_changed_url ||= "form_field_changed"
- ae_sim_form       ||= false
- ae_custom_button  ||= false
- rec_id = @edit && @edit[:action_id].present? ? @edit[:action_id] : "new"
- url    = url_for(:action => field_changed_url, :id => rec_id)
%hr
%h3= _("Object Details")
%table.style1
  - if form_action == "ae_resolve"
    %tr
      %td.key= _("System/Process/")
      %td
        = select_tag('instance_name',
                     options_for_select(resolve[:instance_names].sort_by(&:downcase),
                     resolve[:new][:instance_name]),
                     "data-miq_sparkle_on"  => true,
                     "data-miq_sparkle_off" => true,
                     "data-miq_observe"     => {:url => url}.to_json)
    %tr
      %td.key= _("Message")
      %td
        = text_field_tag("object_message",
                         resolve[:new][:object_message],
                         :maxlength         => MAX_NAME_LEN,
                         "data-miq_observe" => {:interval => '.5',
                                                :url      => url}.to_json)
        - if !is_browser_ie?
          = javascript_tag("if (!$('#description').length) #{javascript_focus('object_message')}")
    %tr
      %td.key= _("Request")
      %td
        = text_field_tag("object_request",
                         resolve[:new][:object_request],
                         :maxlength         => MAX_NAME_LEN,
                         "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
- if form_action != "miq_action"
  - unless ae_custom_button
    %fieldset
      %h3= _("Object Attribute")
      %table.style1
        %tr
          %td.key= _("Type")
          %td
            = select_tag('target_class',
                         options_for_select([["<None>", nil]] + resolve[:target_classes],
                         resolve[:new][:target_class]),
                         "data-miq_sparkle_on"  => true,
                         "data-miq_sparkle_off" => true,
                         "data-miq_observe"     => {:url => url}.to_json)
        - if resolve[:new][:target_class] && !resolve[:new][:target_class].blank? && resolve[:targets]
          %tr
            %td.key= _("Selection")
            %td
              = select_tag('target_id',
                           options_for_select([["<Choose>", nil]] + resolve[:targets],
                                              resolve[:new][:target_id]),
                           "data-miq_sparkle_on"  => true,
                           "data-miq_sparkle_off" => true,
                           "data-miq_observe"     => {:url => url}.to_json)
  - else
    %hr
    %h3= _("Object Attribute")
    %table.style1
      %tr
        %td.key= _("Type")
        %td
          = ui_lookup(:model => @resolve[:target_class])
- if ae_sim_form
  %hr
  %h3= _("Simulation Parameters")
  %table.style1
    %tr
      %td.key= _("Execute Methods")
      %td
        = check_box_tag("readonly",
                        "1",
                        resolve[:new][:readonly] != true,
                        "data-miq_observe_checkbox" => {:url => url}.to_json)
%hr
%h3= _("Attribute/Value Pairs")
%table.style1
  - AE_MAX_RESOLUTION_FIELDS.times do |i|
    - f = "attribute_" + (i + 1).to_s
    - v = "value_" + (i + 1).to_s
    %tr
      %td.key= (i + 1).to_s
      %td.wide
        = text_field_tag(f,
                         resolve[:new][:attrs][i][0],
                         :maxlength         => MAX_NAME_LEN,
                         "data-miq_observe" => {:interval => '.5',
                                                :url => url}.to_json)
      %td.wide
        = text_field_tag(v,
                         resolve[:new][:attrs][i][1],
                         :maxlength         => MAX_NAME_LEN,
                         "data-miq_observe" => {:interval => '.5',
                                                :url => url}.to_json)
