-# Set the JS type vars if a saved expression atom already exists when first showing the editor
- if @edit && @edit.fetch_path(@expkey, :val1, :type)
  = javascript_tag("ManageIQ.expEditor.first.type = '#{@edit[@expkey][:val1][:type]}';")
  = javascript_tag("ManageIQ.expEditor.first.title = '#{@edit[@expkey][:val1][:title]}';")
- if @edit && @edit.fetch_path(@expkey, :val2, :type)
  = javascript_tag("ManageIQ.expEditor.second.type = '#{@edit[@expkey][:val2][:type]}';")
  = javascript_tag("ManageIQ.expEditor.second.title = '#{@edit[@expkey][:val2][:title]}';")

#exp_editor_div
  %fieldset{:style => "width: auto; padding-left: 6px; padding-top: 6px"}
    %ul.searchtoolbar
      - if @edit[@expkey][:exp_idx] > 0
        %li
          = link_to(image_tag(image_path('toolbars/undo.png'),
                              :alt => 'Undo the last change'),
                    {:action  => 'exp_button',
                     :pressed => 'undo'},
                    "data-miq_sparkle_on"  => true,
                    "data-miq_sparkle_off" => true,
                    :remote                => true,
                    "data-method"          => :post,
                    :title                 => _('Undo the last change'))
      - else
        %li.dimmed
          = image_tag(image_path('toolbars/undo.png'))

      - if @edit[@expkey][:exp_idx] < @edit[@expkey][:exp_array].length - 1
        %li
          = link_to(image_tag(image_path('toolbars/redo.png'),
                              :alt => 'Re-apply the previous change'),
                    {:action  => 'exp_button',
                     :pressed => 'redo'},
                    "data-miq_sparkle_on"  => true,
                    "data-miq_sparkle_off" => true,
                    :remote                => true,
                    "data-method"          => :post,
                    :title                 => _('Re-apply the previous change'))
      - else
        %li.dimmed
          = image_tag(image_path('toolbars/redo.png'))

      %span#exp_buttons_off
        - %w(and or not discard).each do |image|
          %li.dimmed
            = image_tag(image_path("toolbars/#{image}.png"))

      %span#exp_buttons_not{:style => "display: none"}
        - [[_("AND with a new expression element"), 'and',     'and'],
           [_("OR with a new expression element"),  'or',      'or'],
           ["",                                     'not',     ''],
           [_("Remove this expression element"),    'discard', 'remove']].each do |title, image, pressed|
          - if title.empty?
            %li.dimmed
              = link_to(image_tag(image_path("toolbars/#{image}.png")))
          - else
            %li
              = link_to(image_tag(image_path("toolbars/#{image}.png"),
                                  :alt => title),
                        {:action  => "exp_button",
                         :pressed => pressed},
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true,
                        :remote                => true,
                        "data-method"          => :post,
                        :title                 => title)

      %span#exp_buttons_on{:style => "display: none"}
        - [[_("AND with a new expression element"),       'and',     'and'],
           [_("OR with a new expression element"),        'or',      'or'],
           [_("Wrap this expression element with a NOT"), 'not',     'not'],
           [_("Remove this expression element"),          'discard', 'remove']].each do |title, image, pressed|
          %li
            = link_to(image_tag(image_path("toolbars/#{image}.png"), :alt => title), {:action => 'exp_button', :pressed => pressed},
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      :remote                => true,
                      "data-method"          => :post,
                      :title                 => title)

    %div{:style => "padding: 10px"}
      - @edit[@expkey][:exp_table].each do |token|
        - if ! %w(AND OR ( ) ???).include?([token].flatten.first)
          = link_to(token.first,
                    {:action => 'exp_token_pressed',
                     :token  => token.last},
                    :style                 => "color: black",
                    "data-miq_sparkle_on"  => true,
                    "data-miq_sparkle_off" => true,
                    :remote                => true,
                    "data-method"          => :post,
                    :id                    => "exp_#{token.last}")
        - elsif [token].flatten.first == "???"
          = link_to(token.first,
                    {:action => 'exp_token_pressed',
                     :token  => token.last},
                    :style                 => "color: black; background-color: yellow",
                    "data-miq_sparkle_on"  => true,
                    "data-miq_sparkle_off" => true,
                    :remote                => true,
                    "data-method"          => :post,
                    :id                    => "exp_#{token.last}")
        - else
          %font{:color => "red"}
            %b
              = token

  - if @edit[@expkey][:exp_token]
    = render(:partial => 'layouts/exp_atom/editor')
