- url = url_for(:action => 'perf_chart_chooser',
                :id     => @record.id)
#perf_options_div{:onclick => "if (typeof miqMenu != 'undefined') miqMenu.hideContextMenu();"}
  - if @charts || @perf_options[:chart_type] != :performance
    %h3= _("Options %{model}") % {:model => (@record != @perf_record ? "(#{ui_lookup(:model => @perf_record.class.to_s)}: #{@perf_record.name})" : "")}
    %dl.dl-horizontal
      %dt
        = _("Interval")
      %dd
        :javascript
           miqInitSelectPicker();
        - if @perf_options[:index] && %w(host vm).include?(request.parameters["controller"])
          - rt_chart = YAML.load(File.open("#{CHARTS_LAYOUTS_FOLDER}/realtime_perf_charts/#{@perf_options[:model]}.yaml"))
          - @rt_hide = rt_chart[@perf_options[:index].to_i][:type] == "None"
        - if request.parameters["controller"] == "storage" && @perf_options[:cat]
          = select("perf", "typ", %w(Hourly Daily), {:selected => @perf_options[:typ]},
                                                      :disabled => "")
        - elsif %(Host VmOrTemplate ContainerNode Container ContainerGroup MiddlewareServer MiddlewareDatasource).include?(@perf_options[:model]) && !@rt_hide
          = select_tag("perf_typ",
                        options_for_select(["Hourly", "Daily", ["Most Recent Hour", "realtime"]], @perf_options[:typ]),
                        "data-miq_sparkle_on" => true,
                        :class    => "selectpicker")
          :javascript
             miqSelectPickerEvent("perf_typ", "#{url}")
        - else
          = select_tag("perf_typ",
                        options_for_select(%w(Hourly Daily), @perf_options[:typ]),
                        "data-miq_sparkle_on" => true,
                        :class    => "selectpicker")
          :javascript
             miqSelectPickerEvent("perf_typ", "#{url}")

      - if @perf_options[:typ] == "realtime"
        %dt
          = _("Show")
        %dd
          = select_tag("perf_minutes",
                       options_for_select(REALTIME_CHOICES.map { |k, v| [_(v), k] }.sort_by(&:last),
                       @perf_options[:rt_minutes]),
                       "data-miq_sparkle_on" => true,
                       :class    => "selectpicker")
          :javascript
             miqSelectPickerEvent("perf_minutes", "#{url}")
          = _("back")
        %dt
          = _("Range")
        %dd= @perf_options[:range]

      - unless @perf_options[:typ] == "realtime"
        %dt
          = _("Date")
          %dd
            = datepicker_input_tag("miq_date_1",
              h(@perf_options[:typ] == "Hourly" ? @perf_options[:hourly_date] : @perf_options[:daily_date]),
              :readonly               => "true",
              "data-miq_sparkle_on"   => true,
              :class    => "selectpicker")
          :javascript
             miqSelectPickerEvent("miq_date_1", "#{url}")

        - unless @perf_options[:typ] == "Hourly"
          %dt
            = _("Show")
          %dd
            = select_tag("perf_days",
                          options_for_select(WEEK_CHOICES.map { |k, v| [_(v), k] }.sort,
                            @perf_options[:days].to_i),
                          "data-miq_sparkle_on" => true,
                          :class    => "selectpicker")
            :javascript
               miqSelectPickerEvent("perf_days", "#{url}")
            = _("back")
      - unless @perf_options[:typ] == "realtime"
        - unless @perf_options[:typ] == "Hourly" && request.parameters["controller"] == "storage"
          - if @perf_options[:cats]
            %dt
              = _("Group by")
            %dd
              = select_tag("perf_cat",
                           options_for_select(Array(@perf_options[:cats].invert).sort_by { |name, _value| name },
                                              "#{@perf_options[:cat_model]}:#{@perf_options[:cat]}"),
                           "data-miq_sparkle_on" => true,
                           :class    => "selectpicker")
              :javascript
                miqSelectPickerEvent("perf_cat", "#{url}")
        - unless @perf_options[:cat]
          - if @perf_options[:vmtypes] && (@perf_options[:index].nil? || @charts.first[:title].include?("by Type"))
            %dt
              = _("Show VM Types")
            %dd
              = select_tag("perf_vmtype",
                           options_for_select(@perf_options[:vmtypes],
                           @perf_options[:vmtype]),
                           "data-miq_sparkle_on" => true,
                           :class    => "selectpicker")
              :javascript
                miqSelectPickerEvent("perf_vmtype", "#{url}")

      - unless @perf_options[:typ] == "realtime"
        %dt
          = _("Time Profile")
        %dd
          - if session[:time_profiles].blank?
            = _("No Time Profiles found")
          - elsif session[:time_profiles].length == 1
            = session[:time_profiles][@perf_options[:time_profile].to_i]
          - else
            = select_tag("time_profile",
                         options_for_select(Array(session[:time_profiles].invert).sort_by(&:first),
                         @perf_options[:time_profile]),
                         "data-miq_sparkle_on" => true,
                         :class    => "selectpicker")
            :javascript
              miqSelectPickerEvent("time_profile", "#{url}")

      - if @perf_options[:model] == "VmOrTemplate" && @perf_options[:typ] != "realtime"
        - compare_choices = []
        - compare_choices.push(["Parent '#{title_for_host}'", "Host"]) if @perf_record.host
        - compare_choices.push(["Parent '#{title_for_cluster}'", "EmsCluster"]) if @perf_record.ems_cluster

        - unless compare_choices.empty?
          %dt
            = _("Compare To")
          %dd
            = select_tag("compare_to",
                           options_for_select([["<Nothing>", nil]] + compare_choices,
                           @perf_options[:parent]),
                           "data-miq_sparkle_on" => true,
                           :class    => "selectpicker")
            :javascript
              miqSelectPickerEvent("compare_to", "#{url}")

      - elsif @perf_options[:model] == "OntapLogicalDisk" && @perf_options[:typ] != "realtime"
        - compare_choices = @perf_record.vms.sort_by(&:name).collect { |v| [v.name, v.id] }
        - unless compare_choices.empty?
          %dt
            = _("Show VM")
          %dd
            = select_tag("compare_vm",
                         options_for_select([["<None>", nil]] + compare_choices,
                         @perf_options[:compare_vm]),
                         "data-miq_sparkle_on" => true,
                         :class    => "selectpicker")
          :javascript
            miqSelectPickerEvent("compare_vm", "#{url}")
      - if @perf_options[:typ] == "Daily"
        %dt
        %dd= _("* Daily charts only include days for which all 24 hours of data has been collected.")
  %hr
