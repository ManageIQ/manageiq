- url = url_for(:action => 'policy_sim_add')
#main_div

  #flash_msg_div
    = render :partial => "layouts/flash_msg"

  %h3= _("Choose Policies")
  #tab_div
    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th{:colspan => "2"}
            %strong= _("Select a Policy Profile to add:")
            = select_tag("profile_id",
                         options_for_select(@all_profs.invert.sort_by { |desc, _id| desc.downcase }, "select"),
                         "data-miq_observe" => {:url => url}.to_json,
                         "class"            => "selectpicker")
            :javascript
              miqInitSelectPicker();
              miqSelectPickerEvent("profile_id", "#{url}", {beforeSend: true, complete: true});
        %tr
          %th.narrow
          %th= _("Policy Profiles in Effect")
      %tbody
        - if session[:policies].length == 0
          %tr
            %td
            %td
              = _("No policies have been chosen yet")
        - else
          - session[:policies].invert.sort.each do |desc, id|
            %tr{:id => "#{desc}_tr"}
              %td{:onclick => "#{remote_function(:loading  => "miqSparkle(true);",
                                                 :complete => "miqSparkle(false);",
                                                 :url      => {:action  => 'policy_sim_remove', :del_pol => id})}",
                  :title => t = _("Click to remove this policy")}
                = image_tag(image_path('toolbars/delete.png'), :alt => t)
              %td
                = h(desc)
  %hr
  %h3= _("Policy Simulation for %{items}") % {:items => pluralize(@tagitems.length, 'Item')}
  %table.admintable{:height => "75"}
    %tbody
      %tr
        %td
          - if @tagitems
            - @embedded = true
            - @policy_sim = true
            = render :partial => "layouts/gtl", 
                     :locals  => {:view => @pol_view} 
