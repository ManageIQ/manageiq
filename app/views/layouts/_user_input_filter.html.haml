- url = url_for(:action => 'quick_search')
#user_input_filter
  - if @edit
    .modal-dialog.modal-lg
      .modal-content
        .modal-header
          %button.close{"data-dismiss" => "modal"}
            %span{"aria-hidden" => "true"}
              &times;
            %span.sr-only
              Close
          %h4.modal-title#exampleModalLabel
            = @edit.fetch_path(@expkey, :selected, :description)
        .modal-body
          - if @qs_exp_table
            - @qs_exp_table.each do |part|
              - if !%w(AND OR NOT ( )).include?([part].flatten.first)
                - if part.kind_of?(Array) && part.first == :user_input
                  - token = part.last
                  - if @edit[:qs_tokens][token].key?(:field)
                    - if @edit[:qs_tokens][token][:value_type] == :boolean
                      - values = [["<Choose>", ""], %w(true true), %w(false false)]
                      = select_tag("value_#{token}",
                                   options_for_select(["<Choose>"] + MiqExpression.get_entry_details(@edit[:qs_tokens][token][:tag]).sort_by { |desc, _name| desc.downcase },
                                                       nil),
                                   :multiple              => false,
                                   :class                 => "widthed",
                                   "data-miq_sparkle_on"  => true,
                                   "data-miq_sparkle_off" => true,
                                   "data-miq_observe"     => {:url => url}.to_json)
                    - else
                      = text_field_tag("value_#{token}", nil,
                                       :maxlength         => 500,
                                       :onkeyup           => "miqQsEnterEscape(event);",
                                       "data-miq_observe" => {:interval => '.5',
                                                              :url      => url}.to_json)
                      - if @edit[:qs_tokens][token][:value_type] == :percent
                        = "%"
                      - elsif @edit[:qs_tokens][token][:value_type] == :megabytes
                        = "MB"
                      - elsif FORMAT_SUB_TYPES[@edit[:qs_tokens][token][:value_type]][:units]
                        = select_tag("suffix_#{token}",
                                     options_for_select(FORMAT_SUB_TYPES[@edit[:qs_tokens][token][:value_type]][:units],
                                                        nil),
                                     :multiple              => false,
                                     :class                 => "widthed",
                                     "data-miq_sparkle_on"  => true,
                                     "data-miq_sparkle_off" => true,
                                     "data-miq_observe"     => {:url => url}.to_json)

                  - elsif @edit[:qs_tokens][token].key?(:tag)
                    = select_tag("value_#{token}",
                                 options_for_select(["<Choose>"] + MiqExpression.get_entry_details(@edit[:qs_tokens][token][:tag]).sort { |a, b| a.first.downcase <=> b.first.downcase },
                                                     nil),
                                 :multiple              => false,
                                 :class                 => "widthed",
                                 "data-miq_sparkle_on"  => true,
                                 "data-miq_sparkle_off" => true,
                                 "data-miq_observe"     => {:url => url}.to_json)
                  - elsif @edit[:qs_tokens][token].key?(:count)
                    = text_field_tag("value_#{token}", nil,
                                     :maxlength         => 500,
                                     :onkeyup           => "miqQsEnterEscape(event);",
                                     "data-miq_observe" => {:interval => '.5',
                                                            :url      => url}.to_json)
                - else
                  = h([part].flatten.first)
              - else
                %font{:color => "red"}
                  %b= h([part].flatten.first)

        .modal-footer
          %div#buttons
            %span#quick_search_buttons_off
              = button_tag(t = _("Apply"), :class => "btn btn-primary btn-disabled")
            %span#quick_search_buttons_on{:style => "display:none;"}
              = link_to(t,
                        {:action => "quick_search",
                         :button => "apply"},
                        :class                 => "btn btn-primary",
                        :alt                   => t = _("Apply the current filter (Enter)"),
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true,
                        :remote                => true,
                        :method                => :post,
                        :id                    => "apply_button",
                        :title                 => t)
            = link_to(_('Cancel'),
                      {:action => "quick_search",
                       :button => "cancel"},
                      :class  => "btn btn-default",
                      :alt    => t = _('Cancel (Esc)'),
                      :remote => true,
                      :method => :post,
                      :id     => "cancel_button",
                      :title  => t)
:javascript
  $(function(){
    $('#quicksearchbox').on('shown.bs.modal', function () {
      if (miqDomElementExists('value_1')) $('#value_1').focus();
    })
    $('#quicksearchbox').off("click");
    $('#quicksearchbox').on('click', '[data-dismiss="modal"]', function() {
      miqJqueryRequest("quick_search?button=cancel", {beforeSend: true});
      return true;
    });
  });
