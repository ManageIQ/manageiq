= render :partial => "layouts/flash_msg", :locals => {:div_num => "_report_list"}
- if @sb[:active_tab] == "report_info"
  - if @sb[:miq_report_id] && @miq_report
    .form-horizontal.static
      .form-group
        %label.control-label.col-sm-2= _('Title')
        .col-sm-10
          %p.form-control-static= @miq_report.title
      - if @miq_report.conditions
        .form-group
          %label.control-label.col-sm-2= _('Primary (Record) Filter')
          .col-sm-10
            %p.form-control-static= @miq_report.conditions.to_human
      - if @miq_report.display_filter
        .form-group
          %label.control-label.col-sm-2= _('Secondary (Display) Filter')
          .col-sm-10
            %p.form-control-static= @miq_report.display_filter.to_human
      - if @miq_report.sortby
        - sortby = []
        - @miq_report.sortby.each do |s|
          - sortby.push(Dictionary.gettext(s, :type => :column, :notfound => :titleize))
        .form-group
          %label.control-label.col-sm-2= _('Sort By')
          .col-sm-10
            %p.form-control-static= sortby.join(", ")
      - if @miq_report.graph
        .form-group
          %label.control-label.col-sm-2= _('Chart')
          .col-sm-10
            %p.form-control-static= @miq_report.graph[:type]
      .form-group
        %label.control-label.col-sm-2= _('Based On')
        .col-sm-10
          %p.form-control-static= Dictionary.gettext(@miq_report.db, :type => :model, :notfound => :titleize)
      .form-group
        %label.control-label.col-sm-2= _('User')
        .col-sm-10
          %p.form-control-static= @miq_report.user ? @miq_report.user.userid : ""
      .form-group
        %label.control-label.col-sm-2= Dictionary.gettext("MiqGroup", :type => :model, :notfound => :titleize)
        .col-sm-10
          %p.form-control-static= @miq_report.miq_group ? @miq_report.miq_group.description : ""
      .form-group
        %label.control-label.col-sm-2= _('Updated On')
        .col-sm-10
          %p.form-control-static= format_timezone(@miq_report.updated_on, Time.zone, "gtl")
    %hr
  %h3
    = _('Schedules')
  - if @schedules.blank?
    = render :partial => 'layouts/info_msg', :locals => {:message => _("Report is not Scheduled.")}
  - else
    %table.table.table-striped.table-bordered.table-hover
      %thead
        %th.narrow
        %th
          = _('Name')
        %th
          = _('Description')
        %th
          = _('Active')
        %th
          = _('Interval')
        %th
          = _('Last Run Time')
        %th
          = _('Next Run Time')
        - if session[:userrole] == "super_administrator"
          %th
            = _('Username')
        %th
          = _('Zone')
      %tbody
        - @schedules.each do |s|
          - tz = s.run_at && s.run_at[:tz] ? s.run_at[:tz] : session[:user_tz]
          - if role_allows(:feature => "miq_report_schedules")
            - params = {:title => _("View this Schedule"), :onclick => remote_function(:url => "/report/x_show/msc-#{to_cid(s.id)}?accord=schedules")}
          - else
            - params = {}
          %tr{params}
            %td.narrow
              %img{:src => "/images/icons/new/miq_schedule.png"}
            %td
              = s.name
            %td
              = s.description
            %td
              = s.enabled
            %td
              = s.run_at[:interval][:unit]
            %td
              - unless s.last_run_on.blank?
                %center
                  = h(format_timezone(s.last_run_on, tz, "gtl"))
            %td
              - unless s.next_run_on.blank?
                %center
                  = h(format_timezone(s.next_run_on, tz, "gtl"))
            - if session[:userrole] == "super_administrator"
              %td
                = s.userid
            %td
              = s.v_zone_name
  %h3
    = _('Widgets')
  - if @widget_nodes.blank?
    = render :partial => 'layouts/info_msg', :locals => {:message => _("Report doesn't belong to Widgets.")}
  - else
    %table.table.table-striped.table-bordered.table-hover
      %thead
        %th.narrow
        %th
          = _('Title')
        %th
          = _('Description')
        %th
          = _('Enabled')
      %tbody
        - @widget_nodes.each do |w|
          - if role_allows(:feature => "miq_report_widget_editor")
            - params = {:title => _("Click to view selected widget"),
              :onclick => remote_function(:url => "/report/x_show/xx-#{WIDGET_CONTENT_TYPE.invert[w.content_type]}_-#{to_cid(w.id)}?accord=widgets")}
          - else
            - params = {}
          %tr{params}
            %td.narrow
              %img{:src => "/images/icons/new/report_widget.png"}
            %td
              = h(w.title)
            %td
              = h(w.description)
            %td
              = h(w.enabled)
