- url = url_for(:action => 'form_field_changed', :id => "#{@edit[:rpt_id] || 'new'}")
-# JSON hash to hold text fields and types for miqValueStylePrefill
= javascript_tag("ManageIQ.reportEditor.valueStyles = {};")

#styling_div
  %h3
    = _('Specify Column Styles')
  %table.table.table-striped.table-bordered
    %thead
      %tr
        %th
          = _('Column Name')
        %th
          = _('Style')
        %th
          = _('If')
        %th
    %tbody
      - @edit[:new][:field_order].each_with_index do |f, f_idx|
        - field_type = MiqExpression.get_col_info(f.last.split("__").first)[:format_sub_type]
        - col_name = f.last.include?(".") ? f.last.split(".").last.gsub("-", ".") : f.last.split("-").last
        - styles = @edit.fetch_path(:new, :col_options, col_name, :style) || []
        %tr
          %td
            = h(f.first)
          %td
            - 3.times do |s_idx|
              - break if s_idx > 0 && (styles[s_idx - 1].blank? || styles[s_idx - 1][:operator] == "DEFAULT")
              - if s_idx > 0
                %br
              - opts = [[styles[s_idx] ? "<#{_('Remove')}>" : "<#{_('Normal')}>", nil]] + ReportHelper::STYLE_CLASSES.invert.to_a.sort_by { |a| a.first.downcase }
              = select_tag("style_#{f_idx}_#{s_idx}",
                options_for_select(opts, styles[s_idx] ? styles[s_idx][:class] : nil),
                "data-miq_sparkle_on" => true,
                "data-miq_observe"    => {:url => url}.to_json)
          %td
            - 3.times do |s_idx|
              - break if s_idx > 0 && (styles[s_idx - 1].blank? || styles[s_idx - 1][:operator] == "DEFAULT")
              - if s_idx > 0
                %br
              - if styles[s_idx] && styles[s_idx][:class]
                - opts = [["#{_('Default')}", "DEFAULT"]] + MiqExpression.get_col_style_operators(f.last)
                = select_tag("styleop_#{f_idx}_#{s_idx}",
                  options_for_select(opts, styles[s_idx].nil? ? nil : styles[s_idx][:operator]),
                  :multiple             => false,
                  :class                => "widthed",
                  "data-miq_sparkle_on" => true,
                  "data-miq_observe"    => {:url => url}.to_json)
                - unless styles[s_idx][:operator].nil? || styles[s_idx][:operator] == "DEFAULT" || styles[s_idx][:operator].include?("NULL") || styles[s_idx][:operator].include?("EMPTY")
                  - if field_type == :boolean
                    - values = [["#{_('true')}", "true"], ["#{_('false')}", "false"]]
                    = select_tag("styleval_#{f_idx}_#{s_idx}",
                      options_for_select(values, styles[s_idx][:value]),
                      :multiple              => false,
                      :class                 => "widthed",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      "data-miq_observe"     => {:url => url}.to_json)
                  - elsif [:datetime, :date].include?(field_type)
                    - opts = (field_type == :datetime ? FROM_HOURS : []) + FROM_DAYS + FROM_WEEKS + FROM_MONTHS + FROM_QUARTERS + FROM_YEARS
                    = select_tag("styleval_#{f_idx}_#{s_idx}",
                      options_for_select(Hash[opts.map {|x| [_(x), x]}], styles[s_idx][:value]),
                      :multiple              => false,
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      "data-miq_observe"     => {:url => url}.to_json)
                  - else
                    -# Add the text field id and type into the JSON valueStyles hash for miqValueStylePrefill
                    = javascript_tag("ManageIQ.reportEditor.valueStyles['#styleval_#{f_idx}_#{s_idx}'] = '#{field_type}';")
                    = text_field_tag("styleval_#{f_idx}_#{s_idx}", styles[s_idx][:value],
                      :maxlength         => 50,
                      "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
                    - if field_type == :percent
                      \%
                    - elsif MiqExpression::FORMAT_SUB_TYPES.fetch_path(field_type, :units)
                      = select_tag("stylesuffix_#{f_idx}_#{s_idx}",
                        options_for_select(MiqExpression::FORMAT_SUB_TYPES[field_type][:units], styles[s_idx][:value_suffix]),
                        :multiple              => false,
                        :class                 => "widthed",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true,
                        "data-miq_observe"     => {:url => url}.to_json)
              - elsif !styles[s_idx]
                = _('Default')
          - 3.times do |s_idx|
            - break if s_idx > 0 && (styles[s_idx - 1].blank? || styles[s_idx - 1][:operator] == "DEFAULT")
            - if styles[s_idx] && styles[s_idx][:class]
              %td{:class => styles[s_idx][:class].to_s}
                &nbsp;
                = _('Sample')
                &nbsp;
            - else
              %td
  %br
  = _('* Style "If" conditions are evaluated top to bottom for each column')

-# Initiate the prefill function to show text field background images when empty
= javascript_tag("miqValueStylePrefill();")
