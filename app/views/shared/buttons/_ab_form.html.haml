- url = url_for(:action => 'automate_button_field_changed')
#ab_form
  #policy_bar
    - if @resolve[:uri] && Hash[*@resolve[:target_classes].flatten].invert[@resolve[:new][:target_class]] == @edit[:new][:target_class]

      %li
        - t = _("Paste object details for use in a Button.")
        = link_to(image_tag("/images/toolbars/paste.png", :border => "0", :class  => "", :alt => t),
          {:action => "resolve", :button => "paste"},
          "data-miq_sparkle_on"  => true,
          "data-miq_sparkle_off" => true,
          :remote                => true,
          :title                 => t)
    - else
      = image_tag("/images/toolbars/paste.png",
        :class => "dimmed",
        :title => _("Paste is not available, no object information has been copied from the Simulation screen"))
  = render :partial => "layouts/flash_msg"
  %h3
    = _('Action')
  .form-horizontal
    .form-group
      %label.control-label.col-md-2
        = _('Button Text')
      .col-md-6
        = text_field_tag("name", @edit[:new][:name],
                        :maxlength         => 30,
                        :class             => "form-control",
                        "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
      %label.checkbox-inline
        = check_box_tag("display", "1", @edit[:new][:display],
                         "data-miq_observe_checkbox" => {:interval => '.5', :url => url}.to_json)
        = _('Display on Button')
      - unless is_browser_ie?
        = javascript_tag(javascript_focus('name'))
    .form-group
      %label.control-label.col-md-2
        = _('Button Hover Text')
      .col-md-8
        = text_field_tag("description", @edit[:new][:description],
                          :maxlength         => 50,
                          :class             => "form-control",
                          "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
    .form-group
      %label.control-label.col-md-2
        = _('Button Image')
      .col-md-8
        #form-group
          = select_tag('button_image',
                        options_for_select([["No Image", nil]] + @edit[:new][:button_images], @edit[:new][:button_image].to_s),
                        :class => "selectpicker")
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent('button_image', '#{url}')
    .form-group
      %label.control-label.col-md-2
        = _('Dialog')
      .col-md-8
        = select_tag('dialog_id',
                      options_for_select(([["<None>", nil]]) + Array(@edit[:new][:available_dialogs].invert).sort_by { |a| a.first.downcase }, @edit[:new][:dialog_id]),
                      "data-miq_sparkle_on" => true,
                      :class => "selectpicker")
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent('dialog_id', '#{url}')

  = render(:partial => "layouts/ae_resolve_options",
    :locals         => {:resolve => @edit,
      :form_action               => "ae_resolve",
      :ae_custom_button          => true,
      :field_changed_url         => "automate_button_field_changed"})
  = render(:partial => "layouts/role_visibility",
           :locals  => {:rec_id => @custom_button ? @custom_button.id : 'new', :action => "automate_button_field_changed"})
:javascript
  miqInitSelectPicker();
  miqSelectPickerEvent("button_image", "#{url}")
