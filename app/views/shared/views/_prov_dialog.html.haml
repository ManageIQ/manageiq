-# Used by CatalogController and MiqRequestController
-# wf          The workflow object currently in use
-# dialog      The name (symbol) of the selected dialog

- current_tab = @edit && @edit[:new] ? @edit[:new][:current_tab_key] : @options[:current_tab_key]
- if dialog == current_tab
  - case current_tab
  - when :requester
    - keys = [:owner_email, :owner_first_name, :owner_last_name, :owner_address, :owner_city, :owner_state, :owner_zip, :owner_country, :owner_title, :owner_company, :owner_department, :owner_office, :owner_phone, :owner_phone_mobile, :request_notes]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Request Information"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})

    - keys = [:owner_manager, :owner_manager_mail, :owner_manager_phone]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Manager"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})
  - when :purpose
    - keys = [:vm_tags]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Select Tags to apply"),
        :prefix                     => "/miq_request/",
        :keys                       => keys,
        :table_class                => "tagstable",
        :extra_table_attributes     => "cellspacing=1"})
  - when :service
    - keys = wf.kind_of?(ManageIQ::Providers::Redhat::InfraManager::ProvisionWorkflow) ? [:src_vm_id, :provision_type, :linked_clone] : [:vm_filter, :src_vm_id, :provision_type, :linked_clone, :snapshot]
    - label = wf.kind_of?(ManageIQ::Providers::Redhat::InfraManager::ProvisionWorkflow) ? _("Selected VM") : _("Select")
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => label,
        :prefix                     => "/miq_request/",
        :keys                       => keys,
        :extra_table_attributes     => "width=100%"})
    - if wf.supports_pxe?
      - keys = [:pxe_server_id, :pxe_image_id, :windows_image_id]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("PXE"),
          :prefix                     => "/miq_request/",
          :keys                       => keys,
          :extra_table_attributes     => "width=100%"})
    - if wf.supports_iso?
      - keys = [:iso_image_id]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("ISO"),
          :prefix                     => "/miq_request/",
          :keys                       => keys,
          :extra_table_attributes     => "width=100%"})
    - keys = [:number_of_vms]
    - label = wf.kind_of?(ManageIQ::Providers::CloudManager::ProvisionWorkflow) ? _("Number of Instances") : _("Number of VMs")
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => label,
        :prefix                     => "/miq_request/",
        :keys                       => keys})
    - keys = [:vm_name, :vm_description, :vm_prefix]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Naming"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})
  - when :environment
    - keys = [:placement_auto]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Placement"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})
    - if (@edit && @edit[:new] && @edit[:new][:placement_auto] && !@edit[:new][:placement_auto][0]) || (@options && !@options[:placement_auto][0])
      - unless wf.kind_of?(ManageIQ::Providers::CloudManager::ProvisionWorkflow)
        - keys = [:placement_dc_name]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Datacenter"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
        - keys = [:cluster_filter, :placement_cluster_name]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => title_for_cluster,
            :prefix                     => "/miq_request/",
            :keys                       => keys})
      - if wf.kind_of?(ManageIQ::Providers::Vmware::InfraManager::ProvisionWorkflow)
        - keys = [:rp_filter, :placement_rp_name]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Resource Pool"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
        - keys = [:placement_folder_name]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Folder"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
      - keys = [:host_filter, :placement_host_name]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => title_for_host,
          :prefix                     => "/miq_request/",
          :keys                       => keys,
          :extra_table_attributes     => "width=100%"})
      - unless wf.kind_of?(ManageIQ::Providers::CloudManager::ProvisionWorkflow)
        - keys = [:ds_filter, :placement_ds_name]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Datastore"),
            :prefix                     => "/miq_request/",
            :keys                       => keys,
            :extra_table_attributes     => "width=100%"})
      - if wf.kind_of?(ManageIQ::Providers::CloudManager::ProvisionWorkflow)
        - keys = [:cloud_tenant, :availability_zone_filter, :placement_availability_zone, :cloud_network, :cloud_subnet, :security_groups, :floating_ip_address]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Placement - Options"),
            :prefix                     => "/miq_request/",
            :keys                       => keys,
            :extra_table_attributes     => "width=100%"})
  - when :hardware
    - keys = [:instance_type, :number_of_cpus, :number_of_sockets, :cores_per_socket,
              :vm_memory, :network_adapters, :disk_format, :guest_access_key_pair, :monitoring,
              :vm_dynamic_memory, :vm_minimum_memory, :vm_maximum_memory, :boot_disk_size]
    - label = wf.kind_of?(ManageIQ::Providers::CloudManager::ProvisionWorkflow) ? "Properties" : "Hardware"
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => label,
        :prefix                     => "/miq_request/",
        :keys                       => keys})
    - unless wf.kind_of?(ManageIQ::Providers::CloudManager::ProvisionWorkflow)
      - keys = [:cpu_limit, :memory_limit]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog       => dialog,
          :label        => _("VM Limits"),
          :prefix       => "/miq_request/",
          :keys         => keys})
      - keys = [:cpu_reserve, :memory_reserve]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog       => dialog,
          :label        => _("VM Reservations"),
          :prefix       => "/miq_request/",
          :keys         => keys})
    - if wf.kind_of?(ManageIQ::Providers::Openstack::CloudManager::ProvisionWorkflow)
      = render(:partial => "/miq_request/prov_dialog_cloud_quota",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :prefix                     => "/miq_request/",
          :keys                       => keys})
  - when :network
    - keys = [:vlan, :mac_address]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Network Adapter Information"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})
  - when :customize
    - if wf.kind_of?(ManageIQ::Providers::Vmware::InfraManager::ProvisionWorkflow) && !wf.supports_pxe? && !wf.supports_iso?
      - keys = [:sysprep_enabled]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("Basic Options"),
          :prefix                     => "/miq_request/",
          :keys                       => keys})
      - if (@edit && @edit[:new] && @edit[:new][:sysprep_enabled] && @edit[:new][:sysprep_enabled][0] == "fields") || (@options && @options[:sysprep_enabled] && @options[:sysprep_enabled][0] == "fields")
        - keys = [:sysprep_custom_spec, :sysprep_spec_override]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Custom Specification"),
            :prefix                     => "/miq_request/",
            :keys                       => keys,
            :extra_table_attributes     => "width=100%"})
        - if @sb[:vm_os] == "windows"
          - keys = [:sysprep_timezone, :sysprep_auto_logon, :sysprep_auto_logon_count, :sysprep_password]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("Unattended GUI"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
          - keys = [:sysprep_identification]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("Identification"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
          - if (@edit && @edit[:new] && @edit[:new][:sysprep_identification][0] == "domain") || (@options && @options[:sysprep_identification][0] == "domain")
            - keys = [:sysprep_domain_name, @ldap_ous_tree ? :ldap_ous : nil, :sysprep_domain_admin, :sysprep_domain_password].compact
            = render(:partial => "/miq_request/prov_dialog_fieldset",
              :locals         => {:workflow => wf,
                :dialog                     => dialog,
                :label                      => _("Domain Information"),
                :prefix                     => "/miq_request/",
                :keys                       => keys})
          - else
            - keys = [:sysprep_workgroup_name]
            = render(:partial => "/miq_request/prov_dialog_fieldset",
              :locals         => {:workflow => wf,
                :dialog                     => dialog,
                :label                      => _("Workgroup Information"),
                :prefix                     => "/miq_request/",
                :keys                       => keys})
          - keys = [:sysprep_full_name, :sysprep_organization, :sysprep_product_id, :sysprep_computer_name]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("User Data"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
          - keys = [:sysprep_change_sid, :sysprep_delete_accounts]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("Windows Options"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
          - keys = [:sysprep_server_license_mode, :sysprep_per_server_max_connections]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("Server License"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
        - elsif @sb[:vm_os] == "linux"
          - keys = [:linux_host_name, :linux_domain_name]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("Naming"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
      - elsif (@edit && @edit[:new] && @edit[:new][:sysprep_enabled] && @edit[:new][:sysprep_enabled][0] == "file") || (@options && @options[:sysprep_enabled] && @options[:sysprep_enabled][0] == "file")
        - keys = [:sysprep_custom_spec, :sysprep_spec_override]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Custom Specification"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
        - keys = [:sysprep_change_sid, :sysprep_delete_accounts]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Windows Options"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
        - if @edit && @edit[:new]
          - keys = [:sysprep_upload_file]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("Upload File"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
        - if (@edit && @edit[:new] && @edit[:new][:sysprep_upload_text]) || (@options && @options[:sysprep_upload_text])
          - file_name = (@edit && @edit[:new]) ? @edit[:new][:sysprep_upload_file] : @options[:sysprep_upload_file]
          - label = _("Uploaded File '%s'") % file_name
          - keys = [:sysprep_upload_text]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => label,
              :prefix                     => "/miq_request/",
              :keys                       => keys})
      - elsif (@edit && @edit[:new] && @edit[:new][:sysprep_enabled] && @edit[:new][:sysprep_enabled][0] == "customspec") || (@options && @options[:sysprep_enabled] && @options[:sysprep_enabled][0] == "customspec")
        - keys = [:sysprep_custom_spec]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("Custom Specification"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
      - if (!@options && @edit && @edit[:new] && @edit[:new][:sysprep_enabled] && @edit[:new][:sysprep_enabled][0] && @edit[:new][:sysprep_enabled][0] != "disabled") || (!@edit && @options && @options[:sysprep_enabled] && @options[:sysprep_enabled][0] && @options[:sysprep_enabled][0] != "disabled")
        - keys = [:addr_mode, :ip_addr, :subnet_mask, :gateway]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("IP Address Information"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
        - keys = [:dns_servers, :dns_suffixes]
        = render(:partial => "/miq_request/prov_dialog_fieldset",
          :locals         => {:workflow => wf,
            :dialog                     => dialog,
            :label                      => _("DNS"),
            :prefix                     => "/miq_request/",
            :keys                       => keys})
        - if @sb[:vm_os] == "windows"
          - keys = [:wins_servers]
          = render(:partial => "/miq_request/prov_dialog_fieldset",
            :locals         => {:workflow => wf,
              :dialog                     => dialog,
              :label                      => _("WINS Server"),
              :prefix                     => "/miq_request/",
              :keys                       => keys})
    - else
      - keys = [:root_password]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("Credentials"),
          :prefix                     => "/miq_request/",
          :keys                       => keys})
      - keys = [:addr_mode, :hostname, :ip_addr, :subnet_mask, :gateway]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("IP Address Information"),
          :prefix                     => "/miq_request/",
          :keys                       => keys})
      - keys = [:dns_servers, :dns_suffixes]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("DNS"),
          :prefix                     => "/miq_request/",
          :keys                       => keys})
      - keys = [:customization_template_id]
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("Customize Template"),
          :prefix                     => "/miq_request/",
          :keys                       => keys})
      - show_customization_template_script = (@edit && @edit[:new] && @edit[:new][:customization_template_script]) || (@options && @options[:customization_template_script])
      - keys = [show_customization_template_script ? :customization_template_script : nil].compact
      = render(:partial => "/miq_request/prov_dialog_fieldset",
        :locals         => {:workflow => wf,
          :dialog                     => dialog,
          :label                      => _("Selected Template Contents"),
          :prefix                     => "/miq_request/",
          :keys                       => keys})
  - when :schedule
    - has_schedule_time = (@edit && @edit[:new] && @edit[:new][:schedule_type] && @edit[:new][:schedule_type][0] == "schedule") || (@options && @options[:schedule_type] && @options[:schedule_type][0] == "schedule")
    - keys = [:schedule_type, has_schedule_time ? :schedule_time : nil, :stateless].compact
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Schedule Info"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})
    - keys = [:vm_auto_start, :retirement, :retirement_warn]
    = render(:partial => "/miq_request/prov_dialog_fieldset",
      :locals         => {:workflow => wf,
        :dialog                     => dialog,
        :label                      => _("Lifespan"),
        :prefix                     => "/miq_request/",
        :keys                       => keys})
