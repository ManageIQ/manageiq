- if @sb[:active_tab] == "methods"
- url = url_for(:action => 'form_method_field_changed', :id => "#{@ae_method.id || 'new'}")
- obs = {:interval => '.5', :url => url}.to_json
  %h3
    = _('Main Info')
  .form-horizontal
    .form-group
      %label.col-md-2.control-label
        = Dictionary.gettext('fqname', :type => :column, :notfound => :titleize)
      .col-md-8
        %p.form-control-static
          = h(@sb[:namespace_path])
    .form-group
      %label.col-md-2.control-label
        = _('Name')
      .col-md-8
        = text_field_tag("#{prefix}method_name",
                        @edit[:new][:name],
                        :maxlength         => MAX_NAME_LEN,
                        :class => "form-control",
                        "data-miq_observe" => obs)
    .form-group
      %label.col-md-2.control-label
        = _('Display Name')
      .col-md-8
        = text_field_tag("#{prefix}method_display_name",
                        @edit[:new][:display_name],
                        :maxlength         => MAX_NAME_LEN,
                        :class => "form-control",
                        "data-miq_observe" => obs)
    .form-group
      %label.col-md-2.control-label
        = _('Location')
      .col-md-8
        = select_tag("#{prefix}method_location",
                      options_for_select(@edit[:new][:available_locations].sort,
                      @edit[:new][:location]),
                      :class    => "selectpicker",
                      "data-miq_observe" => {:url => url}.to_json)
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent("#{prefix}method_location", "#{url}")
    - if @ae_method.created_on
      .form-group
        %label.col-md-2.control-label
          = _("Created On")
        .col-md-8
          = h(format_timezone(@ae_method.created_on, Time.zone, "gtl"))
  %hr
  %h3= _("Data")
  = render :partial => "method_data", :locals => {:field_name => "#{prefix}method"}
  %hr
  %h3= _("Input Parameters")
  %table.table.table-bordered.table-striped
    %thead
      %tr
        %th
          = link_to(image_tag("/images/toolbars/squashed-#{@sb[:squash_state]}.png",
            :class => "rollover small",
            :id    => "exp_collapse_img",
            :style => "z-index:50",
            :alt   => (t = (@sb[:squash_state] ? _("Show Input Parameters") : _("Hide Input Parameters"))),
            :title => t),
            {:action => 'expand_toggle', :id => "exp_collapse"}, :remote  => true)

  #inputs_div{:style => @sb[:squash_state] ? "display: none;" : ""}
    %table.table.table-striped.table-bordered.table-hover
      %thead
        %tr
          %th.narrow
          %th= _('Name')
          %th= _('Default Value')
          %th= _('Data Type')
      %tbody
        - @edit[:new][:fields].each_with_index do |flds, i|
          - unless @edit[:fields_to_delete].include?(flds["id"])
            %tr
              %td
                = link_to(image_tag("/images/icons/16/notequal-red.png", :alt => _("Click to delete this input field from method")),
                  {:action => "field_method_delete", :id => flds["id"].to_s, :arr_id => i},
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  :remote                => true,
                  :confirm               => _('Are you sure you want to delete input field from method?'),
                  :title                 => _("Click to delete this input field from method"))
              %td
                = text_field_tag("#{prefix}fields_name_#{i}",
                  flds["name"],
                  :maxlength         => 50,
                  "data-miq_observe" => obs)
              %td
                = text_field_tag("#{prefix}fields_value_#{i}", flds["default_value"],
                  :style             => flds["datatype"] == "password" ? "display:none" : "",
                  "data-miq_observe" => obs)
                = password_field_tag("#{prefix}fields_password_value_#{i}", '',
                  :placeholder       => placeholder_if_present(flds['default_value']),
                  :style             => flds["datatype"] == "password" ? "" : "display:none",
                  "data-miq_observe" => obs)
              %td
                = select_tag("#{prefix}fields_datatype_#{i}",
                  options_for_select(@edit[:new][:available_datatypes], flds["datatype"]),
                  "data-miq_observe" => {:url => url}.to_json)
        - if !params[:add] && params[:add] != "new" && (session[:field_data].blank? || session[:field_data].empty?)
          %tr{:title => _("Click to add a new parameter"),
            :onclick => remote_function(:url => {:action => 'field_method_select', :add => 'new', :item => "field"})}
            %td
              = image_tag("/images/icons/16/equal-green.png")
            %td
              = h("<#{_('New Parameter')}>")
            %td
              &nbsp;
            %td
              &nbsp;
        - else
          %tr
            %td
              = link_to(image_tag("/images/icons/16/na.png", :alt => "Add this entry"),
              {:action => "field_method_accept", :button => "accept"},
              "data-miq_sparkle_on"  => true,
              "data-miq_sparkle_off" => true,
              :remote                => true,
              :title                 => _("Add this entry"))
            %td
              = text_field_tag("#{prefix}field_name",
                session[:field_data][:name],
                "data-miq_observe" => obs)
            %td
              = text_field_tag("#{prefix}field_default_value",
                session[:field_data][:default_value],
                :style             => session[:field_data][:datatype] == "password" ? "display:none" : "",
                "data-miq_observe" => obs)
              = password_field_tag("#{prefix}field_password_value", '',
                :placeholder       => placeholder_if_present(session[:field_data][:data_value]),
                :style             => session[:field_data][:datatype] == "password" ? "" : "display:none",
                "data-miq_observe" => obs)
            %td
              = select_tag("#{prefix}field_datatype", options_for_select(@edit[:new][:available_datatypes], session[:field_data][:datatype]), "data-miq_observe" => {:url => url}.to_json)
