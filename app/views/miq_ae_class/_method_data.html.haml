- url = url_for(:action => 'form_method_field_changed', :id => "#{@ae_method.id || 'new'}")
- url_one_trans = url_for(:action => 'form_method_field_changed',
  :id                             => "#{@ae_method.id || 'new'}",
  :transOne                       => '1')
#form_div
  - if @edit[:new][:location] == "inline"
    = text_area_tag("#{field_name}_data",
      @edit[:new][:data],
      :style => "display:none;")
  - elsif @edit[:new][:location] == 'builtin'
    .form-horizontal
      .form-group
        %label.col-md-2.control-label
          = _('Builtin to call')
        .col-md-8
          = select_tag("#{field_name}_data",
                       options_for_select(@edit[:new][:available_builtins].sort, @edit[:new][:data]),
                       :class    => "selectpicker",
                       "data-miq_observe" => {:url => url}.to_json)
    :javascript
      miqInitSelectPicker();
      miqSelectPickerEvent("#{field_name}_data", "#{url}")
  - elsif @edit[:new][:location] == 'uri'
    .form-horizontal
      .form-group
        %label.col-md-2.control-label
          = _('Method URI')
        .col-md-8
          = text_field_tag("#{field_name}_data",
            @edit[:new][:data],
            :maxlength         => MAX_NAME_LEN,
            :class => "form-control",
            "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
  - unless @edit[:new][:location] == 'builtin'
    %tr
      %td
        %span#pwd_note{:style => "color: red;"}
      %td
        = render(:partial => "/layouts/form_buttons_verify",
          :locals         => {:validate_url => "validate_method_data",
            :valtype                        => "default",
            :record                         => @ae_method,
            :verify_title_off               => "Enter data to Validate",
            :verify_title_on                => "Validate method data",
            :serialize                      => true})

:javascript
  ManageIQ.oneTransition.oneTrans = 0;
- if @edit[:new][:location] == "inline"
  -# Create a MyCodeMirror editor for the text area
  = render(:partial => "/layouts/my_code_mirror",
    :locals => {:text_area_id => "#{field_name}_data",
      :mode                   => "ruby",
      :line_numbers           => true,
      :url                    => url_one_trans})
