- url = url_for(:action => 'dialog_form_field_changed', :id => @record.id.to_s || 'new')
.form-group
  %label.col-md-2.control-label
    = _('Visible')
  .col-md-8
    = check_box_tag('field_visible', '1',
                    @edit[:field_visible],
                    'data-miq_observe_checkbox' => {:url => url}.to_json)
.form-group
  %label.col-md-2.control-label
    = _('Read only')
  .col-md-8
    = check_box_tag('field_read_only', '1', @edit[:field_read_only],
                    "data-miq_observe_checkbox" => {:url => url}.to_json)

- if @edit[:field_typ] =~ /Text|Check/
  .form-group
    %label.col-md-2.control-label
      = _('Default Value')
    .col-md-8
      - if @edit[:field_typ] =~ /TextArea/
        = text_area_tag("field_default_value",
          @edit[:field_default_value],
          "data-miq_observe" => {:interval => '.5', :url => url}.to_json,
          :maxlength         => 8196,
          :size              => "50x6")
      - elsif @edit[:field_typ] =~ /TextBox/
        - if @edit[:field_protected]
          = password_field_tag('field_default_value__protected',
                                @edit[:field_default_value],
                                'data-miq_observe' => {:interval => '.5', :url => url}.to_json)
        - else
          = text_field_tag("field_default_value",
                            @edit[:field_default_value],
                            "data-miq_observe" => {:interval => '.5', :url => url}.to_json,
                            :class => "form-control",
                            :maxlength         => 50)
      - else
        = check_box_tag("field_default_value", "1",
                        @edit[:field_default_value],
                        "data-miq_observe_checkbox" => {:url => url}.to_json)
  - if @edit[:field_typ].include?('TextBox')
    .form-group
      %label.col-md-2.control-label
        = _('Value Type')
      .col-md-8
        = select_tag('field_data_typ',
                      options_for_select([[_("Integer"), "integer"], [_("String"), "string"]],
                                          @edit[:field_data_typ]),
                      "data-miq_sparkle_on" => true,
                      :class    => "selectpicker")
        :javascript
          miqSelectPickerEvent('field_data_typ', "#{url}")
    .form-group
      %label.col-md-2.control-label
        = _('Protected')
      .col-md-8
        = check_box_tag('field_protected', 'true',
                        @edit[:field_protected],
                        "data-miq_observe_checkbox" => {:url => url}.to_json)
  .form-group
    %label.col-md-2.control-label= _('Required')
    .col-md-8
      = check_box_tag('field_required', 'true',
                      @edit[:field_required],
                      "data-miq_observe_checkbox" => {:url => url}.to_json)

  - if %w(DialogFieldTextBox DialogFieldTextAreaBox).include?(@edit[:field_typ])
    .form-group
      %label.col-md-2.control-label
        = _('Validator Type')
      .col-md-8
        = select_tag('field_validator_type',
                      options_for_select([[_("None"), nil], [_("Regular Expression"), 'regex']],
                                          @edit[:field_validator_type]),
                      "data-miq_sparkle_on" => true,
                      :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_validator_type', "#{url}")
    .form-group
      %label.col-md-2.control-label
        = _('Validator Rule')
      .col-md-8
        \/
        = text_field_tag("field_validator_rule",
                          @edit[:field_validator_rule],
                          "data-miq_observe" => {:interval => '.5', :url => url}.to_json,
                          :disabled          => @edit[:field_validator_type].blank?,
                          :class => "form-control",
                          :maxlength         => 250)
        \/

- elsif %w(DialogFieldDateControl DialogFieldDateTimeControl).include?(@edit[:field_typ])
  .form-group
    %label.col-md-2.control-label
      = _('Show Past Dates')
    .col-md-8
      = check_box_tag("field_past_dates", "1",
                      @edit[:field_past_dates],
                      "data-miq_observe_checkbox" => {:url => url}.to_json)

- elsif %w(DialogFieldDropDownList DialogFieldRadioButton).include?(@edit[:field_typ])
  .form-group
    %label.col-md-2.control-label
      = _('Required')
    .col-md-8
      = select_tag('field_required',
                  options_for_select([[_("True"), true], [_("False"), false]], @edit[:field_required].to_s),
                  "data-miq_sparkle_on" => true,
                  :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_required', "#{url}")

  .form-group
    %label.col-md-2.control-label
      = _('Default Value')
    .col-md-8
      - none = [["<#{_('None')}>", nil]]
      - values = @edit[:field_values].empty? ? none : none + @edit[:field_values].collect(&:reverse)
      - selected = @edit[:field_default_value] || nil
      = select_tag("field_default_value",
                    options_for_select(values, selected),
                    :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent("field_default_value", "#{url}")
  .form-group
    %label.col-md-2.control-label
      = _('Value Type')
    .col-md-8
      = select_tag('field_data_typ',
                    options_for_select([[_("Integer"), "integer"], [_("String"), "string"]],
                                        @edit[:field_data_typ]),
                    "data-miq_sparkle_on" => true,
                    :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_data_typ', "#{url}")
  .form-group
    %label.col-md-2.control-label
      = _('Sort By')
    .col-md-8
      = select_tag('field_sort_by',
                    options_for_select([[_("None"), "none"], [_("Description"), "description"], [_("Value"), "value"]], @edit[:field_sort_by]),
                    :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_sort_by', "#{url}")
  - if @edit[:field_sort_by] != "none"
    .form-group
      %label.col-md-2.control-label
        = _('Sort Order')
      .col-md-8
        = select_tag('field_sort_order',
                      options_for_select([[_("Ascending"), "ascending"], [_("Descending"), "descending"]], @edit[:field_sort_order]),
                      :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_sort_order', "#{url}")
- elsif @edit[:field_typ].include?("TagControl")
  .form-group
    %label.col-md-2.control-label
      = _('Category')
    .col-md-8
      - none = [["<#{_('Choose')}>", nil]]
      - values = none + DialogFieldTagControl.allowed_tag_categories.map { |cat| [cat[:description], cat[:id]] }
      = select_tag('field_category',
                    options_for_select(values, @edit[:field_category]),
                    :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_category', "#{url}")
  .form-group
    %label.col-md-2.control-label
      = _('Single Select')
    .col-md-8
      = check_box_tag('field_single_value', true,
                      @edit[:field_single_value],
                      :disabled                   => disable_check_box?,
                      "data-miq_observe_checkbox" => {:url => url}.to_json)
  .form-group
    %label.col-md-2.control-label
      = _('Value Type')
    .col-md-8
      = select_tag('field_data_typ',
                    options_for_select([[_("Integer"), "integer"], [_("String"), "string"]],
                                        @edit[:field_data_typ]),
                    "data-miq_sparkle_on" => true,
                    :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_data_typ', "#{url}")
  .form-group
    %label.col-md-2.control-label
      = _('Sort By')
    .col-md-8
      = select_tag('field_sort_by',
                    options_for_select([[_("None"), "none"], [_("Description"), "description"], [_("Value"), "value"]], @edit[:field_sort_by]),
                    :class    => "selectpicker")
      :javascript
        miqSelectPickerEvent('field_sort_by', "#{url}")
  - if @edit[:field_sort_by] != "none"
    .form-group
      %label.col-md-2.control-label
        = _('Sort Order')
      .col-md-8
        = select_tag('field_sort_order',
                      options_for_select([[_("Ascending"), "ascending"], [_("Descending"), "descending"]], @edit[:field_sort_order]),
                      :class    => "selectpicker")
        :javascript
          miqSelectPickerEvent('field_sort_order', "#{url}")
  .form-group
    %label.col-md-2.control-label
      = _('Required')
    .col-md-8
      = check_box_tag('field_required', 'true',
                      @edit[:field_required],
                      "data-miq_observe_checkbox" => {:url => url}.to_json)

