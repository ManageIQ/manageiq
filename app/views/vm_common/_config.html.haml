= render :partial => "layouts/flash_msg"
- case @display
- when "os_info"
  - if @osinfo
    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th{:colspan => "2"}= _('Basic Information')
      %tbody
        - @osinfo.each do |item|
          %tr
            %td.label
              = h(item[:osinfo])
            %td
              %img{:src => image_path("100/os-#{h(@record.os_image_name.downcase)}.png")}
              = h(item[:description])
    %hr
  - regexosname = Regexp.new(/linux/)
  - linuxos = regexosname.match(@record.os_image_name.downcase)
  - unless linuxos
    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th{:colspan => "2"}= _('Account Policies')
      %tbody
        - if @account_policy.nil? || @account_policy.empty?
          %tr
            %td
              %strong= _('Not Available')
        - else
          - @account_policy.each_slice(2) do |items|
            %tr
              - items.each do |item|
                %td
                  %strong
                    = h(item[:field])
                    = h(item[:description])

- when "hv_info"
  - if @vmminfo
    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th{:colspan => "2"}= _('Basic Information')
      %tbody
        - @vmminfo.each do |item|
          %tr
            %td.label
              = h(item[:vmminfo])
            %td
              = h(item[:description])

    %hr
    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th{:colspan => "2"}= _('Devices')
      %tbody
        - @devices.each do |item|
          %tr
            %td.label
              = h(item[:device])
            %td
              %img{:src => image_path("100/hardware-#{item[:icon].downcase}.png")}
              = h(item[:description])
          - unless item[:mode].nil?
            %tr
              %th= _('Network Type')
              %td
                = h(item[:mode])

- when "snapshot_info"
  = render :partial => "vm_common/snapshots_desc"
  = render :partial => "vm_common/snapshots_tree"

- when "vmtree_info"
  -# Create divs for each VM to display as the mouse hovers over each VM node
  - @tree_vms.each do |v|
    - prefix = session[:base_vm] == "_h-#{v.id}" ? 'h' : 'v'
    #outer
      #inner
        %div{:id => "#{prefix}-#{v.id}", :style => "display:none; z-index:10; width: 72px; height: 72px; padding: 0 0px 0px 0px"}
          %div{:style => "margin-left: -70px;"}
            = render_quadicon(v, :mode => :icon, :typ => :listnav, :size => 72)
            %div
              %center{:style => 'color:#000;'}
                = h(v.product_name)
  = render :partial => "vm_common/vmtree"

- when "networks"
  - if @vmminfo
    - @record.hardware.networks.each do |adapter|
      %table.table.table-bordered.table-striped
        %thead
          %tr
            %th{:colspan => "2"}= _('Network Adapter')
        %tbody
          - {:ipaddress       => _('IP Address'),
             :ipv6address     => _('IPv6 Address'),
             :description     => _('Description'),
             :dhcp_server     => _('DHCP Server'),
             :dhcp_enabled    => _('DHCP Enabled'),
             :default_gateway => _('Default Gateway'),
             :subnet_mask     => _('Subnet Mask'),
             :dns_server      => _('DNS Server')}.each do |sym, label|
            %tr
              %td.label
                = label
              %td
                = adapter.send(sym)
- when "resources_info"
  %table.table.table-bordered.table-striped
    %thead
      %tr
        %th{:colspan => "2"}= _('Account Policies')
    %tbody
      - {:cpu_limit => _("CPU Limit"),
          :cpu_reserve => _("CPU Reserve"),
          :cpu_reserve_expand => _("CPU Reserve Expand"),
          :cpu_shares => _("CPU Shares"),
          :cpu_shares_level => _("CPU Shares Level"),
          :memory_limit => _("Memory Limit"),
          :memory_reserve => _("Memory Reserve"),
          :memory_reserve_expand => _("Memory Reserve Expand"),
          :memory_shares => _("Memory Shares"),
          :memory_shares_level => _("Memory Shares Level")}.each do |sym, label|
        %tr
          %td.label
            = label
          %td
            = @record.send(sym)
