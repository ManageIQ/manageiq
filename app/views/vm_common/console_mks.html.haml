- if is_browser_ie?
  %html{:lang => I18n.locale.to_s.sub('-', '_')}
    %head
      %title
        = _("VM %{name} Remote Console") % {:name => @record.name}
      = favicon_link_tag
      :javascript
        function connect() {
          mks.Connect("#{host}", 902, "#{cfgFile}", "#{ticket}", "#{ticket}");
        }
        function shut() {
          mks.disconnect();
        }

    %body{:onload => 'connect();', :onunload => 'shut();', :bgcolor => '#000000'}
      %center
        %script#win{:event => "OnWindowStateChange(windowState)", :for => "mks"}
          :cdata
            if (windowState == 3) {
              if (confirm("#{_('You are about to enter fullscreen mode. Press Ctl+Alt to return to windowed mode.')}")) {
                mks.setFullScreen(true);
              }
            }
        %script#grab{:event => "OnGrabStateChange(grabState)", :for => "mks"}
          :cdata
            if (grabState == 1) {
              window.status = "#{_('Press Ctl+Alt to release cursor.')}";
            } else {
              window.status = "";
            }
        %script#size{:event => "OnMessage(type, message)", :for => "mks"}
          :cdata
            alert(message);
        %script#conn{:event => "OnConnectionStateChange(cntd)", :for => "mks"}
          :cdata

        %script#conn{:event => "OnDeviceConnectionStateChange(cntd, x, y)", :for => "mks"}
          :cdata

        %script#size{:event => "OnSizeChange()", :for => "mks"}
          :cdata
            mks.height = mks.VMScreenHeight + 1;
            mks.width = mks.VMScreenWidth + 1;
        %object#mks{:classid => "CLSID:#{mks_classid}", :height => "100%", :width => "100%"}

- elsif is_browser?("firefox")
  %html{:lang => I18n.locale.to_s.sub('-', '_')}
    %head
      %title
        = _("VM %{name} Remote Console") % {:name => @record.name}
    :javascript
      const IMessageListener = Components.interfaces.xpcomIMessageListener;
      const IGrabStateListener = Components.interfaces.xpcomIGrabStateListener;
      const IWindowStateListener = Components.interfaces.xpcomIWindowStateListener;
      const ISizeChangeListener = Components.interfaces.xpcomISizeChangeListener;
      const IConnectionStateListener = Components.interfaces.xpcomIConnectionStateListener;

      var mks = null;
      function connect() {
        // Check if the plugin is loaded.
        if (!navigator.mimeTypes["application/x-vmware-mks;version=#{version}"]) {
          document.getElementById("install").style.display = '';
          return;
        }

        document.getElementById("install").style.display = 'none';
        mks = document.getElementById("mks");

        mks.messageListener = new MessageListener();
        mks.grabStateListener = new GrabStateListener();
        mks.windowStateListener = new WindowStateListener();
        mks.sizeChangeListener = new SizeChangeListener();
        mks.connectionStateListener = new ConnectionStateListener();

        mks.connect("#{host}", 902, "#{cfgFile}", "#{ticket}", "#{ticket}");
      }

      function shut() {
        if (mks != null) {
          mks.disconnect();
        }
      }

      function MessageListener() {}
      MessageListener.prototype = {
        onMessage : function (msgType, message) {
          if (msgType == IMessageListener.MT_INFO) {
            window.status = message;
          } else {
            alert("#{_('Connection failed.')}");
          }
        }
      };

      function GrabStateListener() {}
      GrabStateListener.prototype = {
        onGrabStateChange : function (grabState) {
          if (grabState == IGrabStateListener.GS_GRABBED) {
            window.status = "#{_('Press Ctrl+Alt to release cursor.')}";
          } else {
            window.status = "";
          }
        }
      };

      function WindowStateListener() {}
      WindowStateListener.prototype = {
        onWindowStateChange : function (windowState) {
          if (windowState == IWindowStateListener.WS_ENTER_FULLSCREEN) {
            mks.setFullScreen(true);
          }
        }
      };

      function SizeChangeListener() {}
      SizeChangeListener.prototype = {
        onSizeChange : function () {
          mks.width = mks.vmScreenWidth + 1;
          mks.height = mks.vmScreenHeight + 1;
        }
      };

      function ConnectionStateListener() {}
      ConnectionStateListener.prototype = {
         onConnectionStateChange : function (isConnected) {
         },
         onDeviceConnectionStateChange : function(isConnected, x, y) {
         }
      };

      function install() {
        var os = window.navigator.platform;
        if (os.match(/Win32/)) {
          window.frames["pluginDownload"].location.href = '/plugins/mks/mozilla/win32/vmware-mks.xpi';
        } else if (os.match(/Linux/)) {
          window.frames["pluginDownload"].location.href = '/plugins/mks/mozilla/linux/vmware-mks.xpi';
        }
      }
  </script>
  </head>
  -# Using onbeforeunload event instead of onunload
  %body{:onbeforeunload => "shut();", :onload => "connect();", :style => "background-color:black; color:yellow; font-size:17pt; font-weight:bold;"}
    %object#mks{:height => "100%", :type => "application/x-vmware-mks;version=#{@mks_version}", :width => "100%"}

    #install{:style => "display:none"}
      = _('This page requires the VMware MKS plugin. Install the plugin and try again.')
    %iframe#pluginDownload{:name => "pluginDownload", :style => "display:none"}
