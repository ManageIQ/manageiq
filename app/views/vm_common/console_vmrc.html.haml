= render :partial => 'layouts/doctype'
%html{:lang => I18n.locale.to_s.sub('-', '_')}
  %head
    - if %w(5.1 5.5).include?(api_version) && is_browser_ie? && browser_info(:version).to_i > 9
      %meta{:content => "IE=8", "http-equiv" => "X-UA-Compatible"}
    %meta{:content => "text/html; charset=ISO-8859-1", "http-equiv" => "Content-Type"}
    = tag :link, :rel => "shortcut icon", :href => image_path("favicon.ico")
    = stylesheet_link_tag "vmrc"
    -# need jQuery that works in IE8 mode and has $.browser, the plugin is broken in IE9 mode
    = javascript_include_tag 'jquery-1.8/jquery'
    = javascript_include_tag 'jquery_overrides'

    :javascript
      var vmrc = null;
      var ticket = null;
      var vmNameTooltip = null;
      var tooltipTimeout = null;
      var resizeTimeout = null;
      var removeSpinnerCb = null;
      var SCROLLBAR_WIDTH = null;

      if (window.console == undefined || window.console.debug == undefined) {

        window.console = {
          debug: function(msg){},
          info: function(msg){},
          warn: function(msg){},
          error: function(msg){}
        }

      }

      var title = "#{@record.name}";

      // VMRC EVENTS
      var GS_GRABBED        = 1;
      var GS_UNGRABBED_HARD = 2;
      var GS_UNGRABBED_SOFT = 3;

      var MT_HINT           = 0;
      var MT_INFO           = 1;
      var MT_WARN           = 2;
      var MT_ERROR          = 3;

      var CS_DISCONNECTED   = 0;
      var CS_CONNECTED      = 2;

      function onMessage(type, msg) {
        var prefix = isNaN(type) ? type + ": " : "";
        alert(prefix + msg);
      }

      function onSizeChanged(width, height) {
        console.debug("VMRC: size changed: " + width + "x" + height);
        $(vmrc).height(vmrc.screenHeight());
        $(vmrc).width(vmrc.screenWidth());

        alignConsole();
      }

      function onConnectionStateChanged(cs, host, vmId, userRequested, reason) {
        console.debug("VMRC: connection state changed: " + cs);

        if (cs == CS_CONNECTED) {
          hideSpinner();
          $("#hint").text("#{_('Hint: Press Ctrl-Alt to release the cursor from the guest')}");
          $("#hint").fadeTo("fast", 0.5);
          $("#doc").fadeTo("fast", 0.5);
        } else {
          setTimeout(function() {
            vmrc.shutdown();
            if (reason != null && reason.length > 0) {
              alert(reason);
            } else {
              alert("#{_('The VM has been suspended, powered off or the connection to the server has been lost. \\nThis console window will now close.')}");
            }
            window.opener = self;
            window.close();
          }, 0);
        }
      }

      function onGrabStateChanged(state) {
        console.debug("VMRC: grab state changed: " + state);
        // Only show "Ctrl-Alt" hint when the mouse is grabbed
        var hint = $("#hint");
        var doc = $("#doc");

        //XXX bug: IE has integer (enum), FF has string as "state" parameter
        if (state == GS_GRABBED || state == "grabbed") {
          hint.text("#{_('Hint: Press Ctrl-Alt to release the cursor from the guest')}");
          hint.fadeTo("fast", 1.0);
          doc.fadeTo("fast", 1.0);
        } else if (state == GS_UNGRABBED_SOFT || state == GS_UNGRABBED_HARD ||
            state == "ungrabbedHard" || state == "ungrabbedSoft") {
          hint.fadeTo("slow", 0.5);
          doc.fadeTo("slow", 0.5);
        }
      }

      function onWindowStateChanged(state) {
        console.debug("VMRC: window state changed: " + state);
      }

      // EVENT HANDLERS

      function onWindowResized(event) {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(resizeContainer, 300);
      }

      function isVmrcReady() {
          return vmrc != null && vmrc.isReadyToStart();
      }

      function fullScreen() {
        if (vmrc != null) {
          vmrc.setFullscreen(true);
        }
      }

      function sendCAD() {
        if (vmrc != null) {
          vmrc.sendCAD();
        }
      }

      function backToClient() {
        var url =
          window.location.protocol + "//" + window.location.host + "/vsphere-client/?"
          + "#extensionId=vsphere.core.vm.summaryView;context=com.vmware.core.model%3A%3A"
          + "ServerObjectRef~2E1C1E82-BD83-4E54-9271-630C6DFAD4D1%3AVirtualMachine%3A"
          + "vm-20693";

        if (window.opener) {
          window.opener.location = url;
        } else {
          window.open(url);
        }
      }

      function getTarget(event) {
        return $(event.target).parents(".button");
      }

      function mouseOutHandler(e) {
        var target = getTarget(e);
        if (target == null) {
          return;
        }
        target.children("div").removeClass('box_hover').removeClass('box_pressed');
      }

      function mouseOverHandler(e) {
        var target = getTarget(e);
        if (target == null) {
          return;
        }
        target.children("div").addClass('box_hover');
      }

      function mouseDownHandler(e) {
        var target = getTarget(e);
        if (target == null) {
          return;
        }
        target.children("div").removeClass('box_hover').addClass('box_pressed');
      }

      function mouseUpHandler(e) {
        var target = getTarget(e);
        if (target == null) {
          return;
        }
        target.children("div").removeClass('box_pressed').addClass('box_hover');
      }

      function selectStartHandler(e) {
        return false;
      }

      function dragStartHandler(e) {
        return false;
      }

      function registerButton(buttonId, clickHandler) {
        var button = $("#" + buttonId);

        button.click(clickHandler);
        button.mouseout(mouseOutHandler);
        button.mouseover(mouseOverHandler);
        button.mousedown(mouseDownHandler);
        button.mouseup(mouseUpHandler);
        button.bind('selectstart', selectStartHandler);
        button.bind('dragstart', dragStartHandler);

        // mark the top level DOM element as a "button" class
        button.addClass("button");
      }

      function scrollbarWidth() {
        var div = $('<div style="width:50px;height:50px;overflow:hidden;position:abso' +
                'lute;top:-200px;left:-200px;"><div style="height:100px;"></div>');
        // Append div, do calculation and then remove it
        $("body").append(div);
        var w1 = $("div", div).innerWidth();
        div.css('overflow-y', 'scroll');
        var w2 = $("div", div).innerWidth();
        $(div).remove();
        return (w1 - w2);
      }

      function resizeContainer() {
        // set height
        $("#container").height( $(window).height() - $("#container").offset().top );

        // set width
        $("#container").width( $(window).width() );

        // align console
        alignConsole();
      }

      function alignConsole() {
        var cw = $("#container").width();
        var vw = $(vmrc).width();
        var ch = $("#container").height();
        var vh = $(vmrc).height();
        var offX = 1;
        var offY = $("#container").offset().top;

        /* Force add/remove scrollbars (FF issue) */

        var xScrollOn, yScrollOn = false;
        var xDiff, yDiff = 0;

        yDiff = ch - vh;
        xDiff = cw - vw;

        yScrollOn = yDiff <= 0;
        xScrollOn = xDiff <= 0;

        if (SCROLLBAR_WIDTH == null) {
          SCROLLBAR_WIDTH = scrollbarWidth();
        }
        // Enabling one scrollbar could trigger the other dimension to be clipped...
        if (yScrollOn && xDiff < SCROLLBAR_WIDTH) {
          xScrollOn = true;
        }
        if (xScrollOn && yDiff < SCROLLBAR_WIDTH) {
          yScrollOn = true;
        }

        // Compensate for scroll bars
        if (yScrollOn) { xDiff -= SCROLLBAR_WIDTH; }
        if (xScrollOn) { yDiff -= SCROLLBAR_WIDTH; }

        // Set the CSS directives
        var xVal = xScrollOn ? "scroll" : "hidden";
        var yVal = yScrollOn ? "scroll" : "hidden";

        /* Position the console */

        if (cw > vw) {
          offX += Math.floor(xDiff / 2);
        }
        if (ch > vh) {
          offY += Math.ceil(yDiff / 3);
        }

      //XXX this offset and overflow instruction "kills" vmrc !?@$!!
      //   $(vmrc).offset({top: offY, left: offX});
      //   $("#container").css("overflow-x", xVal);
      //   $("#container").css("overflow-y", yVal);

      //XXX Whereas this doesn't seem harmful
        $(vmrc).css("margin-left", offX + "px");

      //XXX UE question: do we want to have console aligned vertically as well?
      //   $(vmrc).css("margin-top", offY + "px");
      }

      function justifyButtonWidths() {
        $("#buttonBar").children().each( function() {
          var button = $(this);
          var r = $(button.children(".buttonR")[0]).width();
          var c = $(button.children(".buttonC")[0]).width();
          var l = $(button.children(".buttonL")[0]).width();
          button.width(l + c + r + 1);
        });
      }

      function showTooltip() {
        if (tooltipTimeout != null) {
          clearTimeout(tooltipTimeout);
          tooltipTimeout = null;
        }
        $("#vmNameTooltip").show();
      }

      function hideTooltip() {
        tooltipTimeout = setTimeout('$("#vmNameTooltip").fadeOut("slow")', 600);
      }

      function showSpinner() {
        // Use Raphael's Spinner --> raphael.min.js
        // constructor args: holderid, R1, R2, count, stroke_width, colour
      //MIQ   removeSpinnerCb = spinner("spinner", 16, 24, 12, 5, "#fff");
        $("#glassPane").fadeTo(0, 0.3);
        $("#spinner").show();
      }

      function hideSpinner() {
        $("#spinner").hide();
      //MIQ   removeSpinnerCb();
        $("#glassPane").hide();
      }

      function initVmrc() {
        // Keep retrying as long as VMRC is not ready
        if (!isVmrcReady()) {
          setTimeout(initVmrc, 100);
          console.debug("VMRC: initVmrc to retry " + new Date().getTime());
          return;
        }
        console.debug("VMRC: is ready to start.");

        if ($.browser.msie) {
          vmrc.attachEvent("onScreenSizeChange", onSizeChanged);
          vmrc.attachEvent("onConnectionStateChange", onConnectionStateChanged);
          vmrc.attachEvent("onGrabStateChange", onGrabStateChanged);
          vmrc.attachEvent("onMessage", onMessage);
          vmrc.attachEvent("onWindowStateChange", onWindowStateChanged);
        } else if ($.browser.mozilla || $.browser.chrome) {
          vmrc.onScreenSizeChange = onSizeChanged;
          vmrc.onConnectionStateChange = onConnectionStateChanged;
          vmrc.onGrabStateChange = onGrabStateChanged;
          vmrc.onMessage = onMessage;
          vmrc.onWindowStateChange = onWindowStateChanged;
        }

        var startupId = vmrc.startup(2, 2, "");

        ticket = "#{ticket}";

        if (startupId) {
          console.info("VMRC startup: " + startupId);

        var connected = vmrc.connect("#{host}", "", true, ticket, "", "", "#{vmid}", "", "");

          if (connected) {
            console.info("VMRC connected successfully.");
          } else {
            console.error("VMRC failed to connect.");
          }
        } else {
          console.error("VMRC failed to startup.");
        }
      }

      // INITIALIZE
      $(document).ready(function(){
      try {
        // Show spinner overlay
        showSpinner();

        // Start up VMRC
        vmrc = document.getElementById("vmrc");

        vmNameTooltip = $("#vmNameTooltip");
        var vmTitle = $("#vmTitle");

        // set the title strings on the page
        document.title = title;
        vmTitle.text(title);
        vmNameTooltip.text(title);

        // Attach event listeners
        $(window).resize(onWindowResized);
        registerButton("fullScreenButton", fullScreen);
        registerButton("cadButton", sendCAD);

        // Register tool tip
        $("#vmName").hover(showTooltip, hideTooltip);
        $("#vmNameTooltip").hover(showTooltip, hideTooltip);

        // Adjust CSS geometry
        $("#buttonBar").height( $("#container").offset().top );

        // This fixes IE7's inability to assign correct widths
        justifyButtonWidths();

        initVmrc();

        if (#{os == 'linux'}) {
          $(vmrc).height( $(window).height() - ($("#container").offset().top + 10) );
          $(vmrc).width( $(window).width() );
        }

      } catch (error) {
        hideSpinner();
        console.error(error);

        // Only alert if the plugin is installed
        if (vmrc != null && vmrc.isReadyToStart != null) {
          alert(error);
          $("#hint").text("");
        } else {
          $("#hint").text("#{_('Remote Console plugin is not properly installed.')}");
        }
      }
      });


      // UNLOAD
      //MIQ $(document).unload(function(){
      $(window).unload(function(){
        if (vmrc != null) {
          vmrc.disconnect();
          vmrc.shutdown();
          vmrc = null;
        }
      });

  %body
    - if false
      #buttonBar
        #fullScreenButton.buttonT
          .buttonR &#160;
          .buttonC= _('Full&#160;Screen')
          .buttonL &#160;
        #cadButton.buttonT
          .buttonR &#160;
          .buttonC= _('Send&#160;Ctrl-Alt-Delete')
          .buttonL &#160;
    #vmName
      %span#vmTitle
        / filled programmatically
    #vmNameTooltip
      / filled programmatically
    #doc
      = _('Use CTRL-ALT-INS for CTRL-ALT-DEL')
      %br
      = _('Use CTRL-ALT-Enter to toggle full screen')
    #hint
      = _('The Remote Console is connecting')
      \...
    #container
      :plain
        <!--[if IE]>
          <object id='vmrc' classid='CLSID:4AEA1010-0A0C-405E-9B74-767FC8A998CB'></object>
        <![endif]-->
        <!--[if !IE]> -->
          <object id='vmrc' type='application/x-vmware-remote-console-2012'></object>
        <!-- <![endif]-->
    #glassPane
    #spinner
