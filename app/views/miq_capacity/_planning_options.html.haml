- url = url_for(:action => 'planning_option_changed')
-# Div to hold the planning options
#planning_options_div
  = render :partial => "layouts/flash_msg", :locals => {:div_num => "0"}
  %h3
    = _('Reference VM Selection')
  .form.horizontal
    .form-group
      - options = [["<#{_('Choose')}>"],
        [_("By %s") % ui_lookup(:table => "ems_infras"), "ems"],
        [_("By %s") % ui_lookup(:table => "ems_clusters"), "cluster"],
        [_("By Host"), "host"],
        [_("By Filter"), "filter"],
        [_("All VMs"), "all"],]
      = select_tag("filter_typ",
                    options_for_select(options, @sb[:planning][:options][:filter_typ]),
                    :disabled              => @sb[:planning][:options][:vm_mode] == :manual,
                    "class"                => "selectpicker",
                    "data-miq_sparkle_on"  => true,
                    "data-miq_sparkle_off" => true)
      :javascript
        miqInitSelectPicker();
        miqSelectPickerEvent("filter_typ", "#{url}");
    .form-group
      - if @sb[:planning][:options][:filter_typ] == "host"
        - options = [["<#{_('Choose a %s') % title_for_host}>", "<Choose>"]] + Array(@sb[:planning][:hosts].invert).sort_by { |a| a.first.downcase }
        = select_tag("filter_value",
                      options_for_select(options, @sb[:planning][:options][:filter_value]),
                      :disabled              => @sb[:planning][:options][:vm_mode] == :manual,
                      "data-live-search"     => "true",
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      "data-miq_observe"     => {:url => url}.to_json)
      - elsif @sb[:planning][:options][:filter_typ] == "cluster"
        - options = [["<#{_('Choose a %s')}>" % title_for_cluster, "<Choose>"]] + Array(@sb[:planning][:clusters].invert).sort_by { |a| a.first.downcase }
        = select_tag("filter_value",
                      options_for_select(options, @sb[:planning][:options][:filter_value]),
                      :disabled              => @sb[:planning][:options][:vm_mode] == :manual,
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      "data-miq_observe"     => {:url => url}.to_json)
      - elsif @sb[:planning][:options][:filter_typ] == "ems"
        - options = [["<#{_('Choose a %s')}>" % ui_lookup(:table => "ext_management_systems"), "<Choose>"]] + Array(@sb[:planning][:emss].invert).sort_by { |a| a.first.downcase }
        = select_tag("filter_value",
                      options_for_select(options, @sb[:planning][:options][:filter_value]),
                      :disabled              => @sb[:planning][:options][:vm_mode] == :manual,
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      "data-miq_observe"     => {:url => url}.to_json)
      - elsif @sb[:planning][:options][:filter_typ] == "filter"
        - options = [["<#{_('Choose a Filter')}>", "<Choose>"]] + Array(@sb[:planning][:vm_filters].invert).sort_by { |a| a.first.downcase }
        = select_tag("filter_value",
                      options_for_select(options, @sb[:planning][:options][:filter_value]),
                      :disabled              => @sb[:planning][:options][:vm_mode] == :manual,
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true)
      :javascript
        miqInitSelectPicker();
        miqSelectPickerEvent("filter_value", "#{url}");
      - if @sb[:planning][:vms]
        - if @sb[:planning][:vms].empty?
          &nbsp;
          = _('No VMs found')
        - else
          - options = [["<#{_('Choose a VM')}>", "<Choose>"]] + Array(@sb[:planning][:vms].invert).sort_by { |a| a.first.downcase }
          = select_tag("chosen_vm",
                        options_for_select(options, @sb[:planning][:options][:chosen_vm]),
                        :disabled              => @sb[:planning][:options][:vm_mode] == :manual,
                        "data-live-search"     => "true",
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("chosen_vm", "#{url}");
  %hr/
  %h3
    = _('VM Options')
  .form-horizontal
    .form-group
      %label.control-label.col-md-4
        = _('Source')
      .col-md-8
        = select_tag("vm_mode",
                      options_for_select(PLANNING_VM_MODES.map { |k, v| [_(v), k] }.sort, @sb[:planning][:options][:vm_mode]),
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true)
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent("vm_mode", "#{url}");
    - vm_opts = VimPerformancePlanning.vm_default_options(@sb[:planning][:options][:vm_mode])
    - if vm_opts[:cpu]
      .form-group
        %label.control-label.col-md-4
          = _('CPU Speed')
        .col-md-8
          = check_box_tag("trend_cpu", "1", @sb[:planning][:options][:trend_cpu],
                          "data-miq_sparkle_on"       => true,
                          "data-miq_sparkle_off"      => true,
                          "data-miq_observe_checkbox" => {:url => url}.to_json)
          - if @sb[:planning][:options][:vm_mode] == :manual
            = text_field_tag("trend_cpu_val",
                              @sb[:planning][:options][:values][:cpu],
                              :maxlength         => 15,
                              :disabled          => !@sb[:planning][:options][:trend_cpu],
                              "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
          - else
            = @sb[:planning][:options][:values][:cpu]
          = _('MHz')
    - if vm_opts[:vcpus]
      .form-group
        %label.control-label.col-md-4
          = _('vCPU Count')
        .col-md-8
          = check_box_tag("trend_vcpus", "1", @sb[:planning][:options][:trend_vcpus],
                          "data-miq_sparkle_on"       => true,
                          "data-miq_sparkle_off"      => true,
                          "data-miq_observe_checkbox" => {:url => url}.to_json)
          - if @sb[:planning][:options][:vm_mode] == :manual
            = text_field_tag("trend_vcpus_val",
                              @sb[:planning][:options][:values][:vcpus],
                              :maxlength         => 15,
                              :disabled          => !@sb[:planning][:options][:trend_vcpus],
                              "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
          - else
            = @sb[:planning][:options][:values][:vcpus]
    - if vm_opts[:memory]
      .form-group
        %label.control-label.col-md-4
          = _('Memory Size')
        .col-md-8
          = check_box_tag("trend_memory", "1", @sb[:planning][:options][:trend_memory],
                          "data-miq_sparkle_on"       => true,
                          "data-miq_sparkle_off"      => true,
                          "data-miq_observe_checkbox" => {:url => url}.to_json)
          - if @sb[:planning][:options][:vm_mode] == :manual
            = text_field_tag("trend_memory_val",
                              @sb[:planning][:options][:values][:memory],
                              :maxlength         => 15,
                              :disabled          => !@sb[:planning][:options][:trend_memory],
                              "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
          - else
            = @sb[:planning][:options][:values][:memory]
          = _('MB')
    - if vm_opts[:storage]
      .form-group
        %label.control-label.col-md-4
          = _('Disk Space')
        .col-md-8
          = check_box_tag("trend_storage", "1", @sb[:planning][:options][:trend_storage],
                          "data-miq_sparkle_on"       => true,
                          "data-miq_sparkle_off"      => true,
                          "data-miq_observe_checkbox" => {:url => url}.to_json)
          - if @sb[:planning][:options][:vm_mode] == :manual
            = text_field_tag("trend_storage_val",
                              @sb[:planning][:options][:values][:storage],
                              :maxlength         => 15,
                              :disabled          => !@sb[:planning][:options][:trend_storage],
                              "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
          - else
            = @sb[:planning][:options][:values][:storage]
          = _('GB')
          %br{:clear => "all"}
          = _('* Disk space not supported for OpenStack providers')
  %hr/
  %h3
    = _('Target Options / Limits')
  .form-horizontal
    .form-group
      %label.control-label.col-md-4
        = _('Show')
      .col-md-8
        = select_tag("target_typ",
                      options_for_select(TARGET_TYPE_CHOICES.map { |k, v| [_(v), k] }.sort_by(&:last), @sb[:planning][:options][:target_typ]),
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true)
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent("target_typ", "#{url}");
    - unless @sb[:planning][:options][:target_filters].blank?
      .form-group
        %label.control-label.col-md-4
          = _('Filter')
        .col-md-8
          - options = [["<#{_('All')}>", nil]] + Array(@sb[:planning][:options][:target_filters].invert).sort_by { |a| a.first.downcase }
          = select_tag("target_filter",
                        options_for_select(options, @sb[:planning][:options][:target_filter]),
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("target_filter", "#{url}");
    - if vm_opts[:cpu]
      .form-group
        %label.control-label.col-md-4
          = _('CPU Speed')
        .col-md-8
          = select_tag("limit_cpu",
                        options_for_select(TREND_LIMIT_PERCENTS, @sb[:planning][:options][:limit_cpu]),
                        :disabled              => !@sb[:planning][:options][:trend_cpu],
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("limit_cpu", "#{url}");
    - if vm_opts[:vcpus]
      .form-group
        %label.control-label.col-md-4
          = _('vCPUs per Core')
        .col-md-8
          = select_tag("limit_vcpus",
                        options_for_select((1..25).to_a.reverse, @sb[:planning][:options][:limit_vcpus]),
                        :disabled => !@sb[:planning][:options][:trend_vcpus],
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("limit_vcpus", "#{url}");
    - if vm_opts[:memory]
      .form-group
        %label.control-label.col-md-4
          = _('Memory Size')
        .col-md-8
          = select_tag("limit_memory",
                        options_for_select(TREND_LIMIT_PERCENTS, @sb[:planning][:options][:limit_memory]),
                        :disabled              => !@sb[:planning][:options][:trend_memory],
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("limit_memory", "#{url}");
    - if vm_opts[:storage]
      .form-group
        %label.control-label.col-md-4
          = _('Datastore Space')
        .col-md-8
          = select_tag("limit_storage",
                        options_for_select(TREND_LIMIT_PERCENTS, @sb[:planning][:options][:limit_storage]),
                        :disabled => !@sb[:planning][:options][:trend_storage],
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("limit_storage", "#{url}");
  %hr/
  %h3
    = _('Trend Options')
  .form-horizontal
    .form-group
      %label.control-label.col-md-4
        = _('Trends for past')
      .col-md-8
        = select_tag("trend_days",
                      options_for_select(WEEK_CHOICES.invert.sort_by(&:last), @sb[:planning][:options][:days].to_i),
                      "class"                => "selectpicker",
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true)
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent("trend_days", "#{url}");
    .form-group
      %label.control-label.col-md-4
        = _('Time Profile')
      .col-md-8
        - if session[:time_profiles].blank?
          = _('No Time Profiles found')
        - elsif session[:time_profiles].length == 1
          -# Only 1 choice, show the value
          = session[:time_profiles][@sb[:planning][:options][:time_profile].to_i]
        - else
          = select_tag("time_profile",
                        options_for_select(session[:time_profiles].invert.sort_by(&:first), @sb[:planning][:options][:time_profile]),
                        "class"                => "selectpicker",
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true)
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent("time_profile", "#{url}");
