= render :partial => "layouts/flash_msg"
#pre_prov_div
  - typ = @edit[:controller] == "vm_cloud" ? ui_lookup(:table => "template_cloud") : ui_lookup(:table => "template_infra")
  %label
    - id = @edit[:req_id] || "new"
    %input{:type => "checkbox",
           :onclick => "miqAjax('" + url_for({:action => "vm_pre_prov", :id => id.to_s, :hide_deprecated_templates => !@edit[:hide_deprecated_templates]}) + "')",
           :checked => @edit[:hide_deprecated_templates]} Hide deprecated
  - if @edit[:controller] == "vm_cloud"
    %label
      = _("Provision %{what} based on:") % {:what => ui_lookup(:tables => @edit[:controller])}
    %input{:type => "radio", :value => "images", :name => "provision_based_on", :checked => @edit[:provision_based_on] == "images" ? "checked" : nil, :onclick => "miqAjax('/miq_request/pre_prov/?provision_based_on=images');"}
      = _("Images")
    %input{:type => "radio", :value => "volumes", :name => "provision_based_on", :checked => @edit[:provision_based_on] == "volumes" ? "checked" : nil, :onclick => "miqAjax('/miq_request/pre_prov/?provision_based_on=volumes');"}
      = _("Volumes")
    %input{:type => "radio", :value => "snapshots", :name => "provision_based_on", :checked => @edit[:provision_based_on] == "snapshots" ? "checked" : nil, :onclick => "miqAjax('/miq_request/pre_prov/?provision_based_on=snapshots');"}
      = _("Volume Snapshots")
  - else
    %label
      = _("Provision %{what} based on the selected %{type}") % {:what => ui_lookup(:tables => request.parameters[:controller]), :type => typ}
  %table.table.table-bordered.table-hover.table-striped.table-selectable
    - if @edit[:provision_based_on] == "images"
      %thead
        %tr
          - id = @edit[:req_id] || "new"
          - @edit[:vm_columns].each_with_index do |h, i|
            %th
              -# Replaced to exclude non-view table fields from sorting
              = link_to(h(@edit[:vm_headers][h]),
                {:action => "vm_pre_prov", :sort_choice => h, :id => id.to_s},
                "data-miq_sparkle_on"  => true,
                "data-miq_sparkle_off" => true,
                "data-method"          => :post,
                :remote                => true)
              - if @edit[:vm_columns][i] == @edit[:vm_sortcol]
                %img{:src => image_path("16/sort_#{@edit[:vm_sortdir] == 'ASC' ? 'up' : 'down'}.png")}
      %tbody
        - @vms.each do |row|
          - @id = row.id
          - cls =  @edit[:src_vm_id] && @edit[:src_vm_id] == @id ? "selected" : ""
          %tr{:class => cls, :onclick => "miqAjax('/miq_request/pre_prov/?sel_id=#{@id}&sel_type=VmOrTemplate');", :id => "row_#{@id}"}
            %td
              = h(row.name)
            %td
              = h(row.operating_system.try(:product_name))
            %td
              = h(row.platform)
            %td
              = h(row.cpu_total_cores)
            %td
              = h(number_to_human_size(row.mem_cpu.to_i * 1024 * 1024))
            %td
              = h(number_to_human_size(row.allocated_disk_storage))
            %td
              - if row.ext_management_system
                = h(row.ext_management_system.name)
            %td
              = h(row.v_total_snapshots)
            - if @edit[:vm_headers].include?("cloud_tenant")
              %td
                - if row.respond_to?(:cloud_tenant)
                  = h(row.cloud_tenant.try(:name))

    - if @edit[:provision_based_on] == "volumes"
      %thead
        %tr
          - id = @edit[:req_id] || "new"
          - @edit[:volume_columns].each_with_index do |h, i|
            %th
              -# Replaced to exclude non-view table fields from sorting
              = link_to(h(@edit[:volume_headers][h]),
                {:action => "vm_pre_prov", :sort_choice => h, :id => id.to_s},
                "data-miq_sparkle_on"  => true,
                "data-miq_sparkle_off" => true,
                "data-method"          => :post,
                :remote                => true)
              - if @edit[:volume_columns][i] == @edit[:volume_sortcol]
                %img{:src => image_path("16/sort_#{@edit[:volume_sortdir] == 'ASC' ? 'up' : 'down'}.png")}
      %tbody
        - @volumes.each do |row|
          - @id = row.id
          - cls =  @edit[:src_vm_id] && @edit[:src_vm_id] == @id ? "selected" : ""
          %tr{:class => cls, :onclick => "miqAjax('/miq_request/pre_prov/?sel_id=#{@id}&sel_type=CloudVolume');", :id => "row_#{@id}"}
            %td
              = h(row.name)
            %td
              = h(row.description)
            %td
              = h(number_to_human_size(row.size))
            %td
              = h(row.bootable)
            %td
              - if row.ext_management_system
                = h(row.ext_management_system.name)
            %td
              - if row.respond_to?(:cloud_tenant)
                = h(row.cloud_tenant.try(:name))

    - if @edit[:provision_based_on] == "snapshots"
      %thead
        %tr
          - id = @edit[:req_id] || "new"
          - @edit[:snapshot_columns].each_with_index do |h, i|
            %th
              -# Replaced to exclude non-view table fields from sorting
              = link_to(h(@edit[:snapshot_headers][h]),
                {:action => "vm_pre_prov", :sort_choice => h, :id => id.to_s},
                "data-miq_sparkle_on"  => true,
                "data-miq_sparkle_off" => true,
                "data-method"          => :post,
                :remote                => true)
              - if @edit[:snapshot_columns][i] == @edit[:snapshot_sortcol]
                %img{:src => image_path("16/sort_#{@edit[:snapshot_sortdir] == 'ASC' ? 'up' : 'down'}.png")}
      %tbody
        - @snapshots.each do |row|
          - @id = row.id
          - cls =  @edit[:src_vm_id] && @edit[:src_vm_id] == @id ? "selected" : ""
          %tr{:class => cls, :onclick => "miqAjax('/miq_request/pre_prov/?sel_id=#{@id}&sel_type=CloudVolumeSnapshot');", :id => "row_#{@id}"}
            %td
              = h(row.name)
            %td
              = h(row.description)
            %td
              = h(row.cloud_volume.try(:name))
            %td
              = h(row.cloud_volume.try(:bootable))
            %td
              = h(number_to_human_size(row.size))
            %td
              - if row.ext_management_system
                = h(row.ext_management_system.name)
            %td
              - if row.respond_to?(:cloud_tenant)
                = h(row.cloud_tenant.try(:name))
