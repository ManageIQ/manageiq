= render :partial => "layouts/flash_msg"
#st_tabs
  %ul.nav.nav-tabs
    = miq_tab_header('basic') do
      = _('Basic Info')
    - if @record.display && !@record.prov_type.try(:start_with?, "generic_")
      = miq_tab_header('details') do
        = _('Details')
    - if @record.composite?
      = miq_tab_header('resources') do
        = _('Selected Resources')
    - else
      - if need_prov_dialogs?(@record.prov_type)
        = miq_tab_header('request') do
          = _('Request Info')
  .tab-content
    = miq_tab_content('basic') do
      %h3
        = _('Basic Information')
      .form-horizontal.static
        .form-group
          %label.col-md-2.control-label
            = _('Name / Description')
          .col-md-8
            #{@record.name} / #{@record.description}
        .form-group
          %label.col-md-2.control-label
            = _('Display in Catalog')
          .col-md-8
            &nbsp;
            = check_box_tag("display", true, @record.display, :disabled => true)
        - if @record.display
          .form-group
            %label.col-md-2.control-label
              = _('Catalog')
            .col-md-8
              = h(@record.service_template_catalog ? @record.service_template_catalog.name : "<#{_('Unassigned')}>")
        .form-group
          %label.col-md-2.control-label
            = _('Dialog')
          .col-md-8
            = h(@sb[:dialog_label])
        - if @record.prov_type == "generic"
          .form-group
            %label.col-md-2.control-label
              = _('Subtype')
            .col-md-8
              = h(ServiceTemplate::GENERIC_ITEM_SUBTYPES[@record[:generic_subtype]])
        - if @record.prov_type == "generic_orchestration"
          .form-group
            %label.col-md-2.control-label
              = _('Orchestration Template')
            .col-md-8
              = h(@record.try(:orchestration_template).try(:name))
          - if @record.orchestration_manager
            .form-group
              %label.col-md-2.control-label
                = _('Provider')
              .col-md-8
                = h(@record.orchestration_manager.name)
        - elsif @record.prov_type == "generic_ansible_tower"
          .form-group
            %label.col-md-2.control-label
              = _('Ansible Tower Job Template')
            .col-md-8
              = h(@record.try(:job_template).try(:name))
        - elsif @record.prov_type == "generic_container"
          .form-group
            %label.col-md-2.control-label
              = _('Container Template')
            .col-md-8
              = h(@record.try(:container_template).try(:name))
        - entry_points = [[_("Provisioning"), :fqname]]
        - unless @record.prov_type.try(:start_with?, "generic_")
          - entry_points.push([_("Reconfigure"),  :reconfigure_fqname],
             [_("Retirement"),   :retire_fqname])
        - entry_points.each do |entry_points_op|
          .form-group
            %label.col-md-2.control-label{:title => _("%{entry_point} Entry Point (NameSpace/Class/Instance)") % {:entry_point => entry_points_op[0]}}
              #{entry_points_op[0]} #{_('Entry Point')}
            .col-md-8
              = h(@sb[entry_points_op[1]])
      %hr
      %h3
        = _('Custom Image')
      .form-horizontal
        - if @record.picture
          .form-group
            .col-md-8
              = image_tag("#{@record.picture.url_path}?#{rand(99_999_999)}",
                          :style => "width:100px; height:100px;")
            .col-md-8{:valign => "bottom"}
              = link_to(image_tag(image_path('toolbars/remove.png'),
                                  :class => "rollover small",
                                  :alt   => t = _("Remove this Custom Image")),
                        {:action  => "st_upload_image",
                         :id      => @record.id,
                         :pressed => "remove"},
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true,
                        :remote                => true,
                        "data-method"          => :post,
                        :confirm               => _("Are you sure you want to remove this Custom Image?"),
                        :title                 => t)
        - else
          = _('No custom image has been uploaded')
          %br
          %br
        .form-group
          = form_tag({:action    => "st_upload_image",
                      :id        => @record.id},
                     {:multipart => true,
                      :method    => :post}) do
            .col-md-4
              = render :partial => "shared/file_chooser", :locals => {:object_name => "upload", :method => "image"}
            .col-md-6
              = submit_tag(_("Upload"), :id => "upload", :class => "upload btn btn-default")
              = _('* Requires image file in .png or .jpg format')
    - if @record.display && !@record.prov_type.try(:start_with?, "generic_")
      = miq_tab_content('details') do
        %h3
          = _('Basic Information')
        .form-horizontal.static
          .form-group
            %label.col-md-2.control-label
              = _('Long Description')
            .col-md-8
              = @record.long_description.to_s.html_safe

    - if @record.composite?
      = miq_tab_content('resources') do
        %h3
          = _('Resources')
        - resources = @record.service_resources
        - if resources.empty?
          = _('No Resources found.')
        - else
          %table.table.table-bordered.table-hover.table-striped
            %thead
              %tr
                %th.narrow
                - titles = [_("Name"), _("Description"), _("Action Order"), _("Provision Order"), _("Action"), _("Delay (mins)")]
                - colspan = [_("Action"), _("Delay (mins)")]
                - titles.each do |title|
                  %th{:colspan => colspan.include?(title) ? 2 : 1}= title
              - sub_titles = [_("Start"), _("Stop"), _("Start"), _("Stop")]
              %tr
                %th{:colspan => "5"}
                - sub_titles.each do |st|
                  %th
                    = st
            %tbody
              - prev_group = 0
              - resources.sort_by { |rsc| [rsc.group_idx, rsc.resource_name.downcase] }.each_with_index do |r, i|
                - col_span = 10
                - if prev_group != r.group_idx && i < resources.length
                  - prev_group = r.group_idx
                  %tr#new_tr.separator
                    %td{:colspan => col_span}
                %tr{:title       => _("Click to this Catalog Item"),
                    :onclick     => remote_function(:loading  => "miqSparkle(true);",
                                                    :complete => "miqSparkle(false);",
                                                    :url      => "/catalog/x_show/#{to_cid(r.resource_id)}")}
                  %td.narrow
                    %i.product.product-template
                  - keys = %w(resource_name resource_description group_idx provision_index start_action stop_action start_delay stop_delay)
                  - keys.each do |key|
                    %td
                      - if %w(start_delay stop_delay).include?(key)
                        = r.send(key) / 60
                      - else
                        = %w(group_idx provision_index).include?(key) ? r.send(key).to_i + 1 : r.send(key)
    - else
      - if !@record.prov_type || (@record.prov_type && need_prov_dialogs?(@record.prov_type))
        = miq_tab_content('request') do
          - if @options[:wf]
            %h3
              = _('Request Info')
              = render :partial => "miq_request/prov_wf",
                       :locals  => {:wf   => @options[:wf],
                                    :show => true}
          - else
            %span{:style => "color:red"}= @no_wf_msg
:javascript
  miq_tabs_init("#st_tabs");
