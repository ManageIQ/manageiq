- if @edit
  - url = url_for(:action => 'alert_field_changed', :id => "#{@alert.id || 'new'}")
  - observe = {:url => url}.to_json
#alert_details_div{:style => "width: 100%; height: 100%; overflow: auto;"}
  - if @assign
    = render :partial => 'alert_assign'
  - elsif @alert
    #alert_info_div
      = render :partial => "layouts/flash_msg"
      %h3= _('Info')
      .form-horizontal
        -# Description
        - if @edit
          .form-group
            %label.control-label.col-md-2
              = _("Description")
            .col-md-10
              = text_field_tag("description",
                @edit[:new][:description],
                :maxlength         => MAX_DESC_LEN,
                "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
              = javascript_tag(javascript_focus('description'))
        -# Enabled
        .form-group
          %label.control-label.col-md-2
            = _("Active")
          - if @edit
            .col-md-10
              = check_box_tag("enabled_cb", "1", @edit[:new][:enabled], "data-miq_observe_checkbox" => observe)
          - else
            .col-md-10
              = @alert.enabled ? _("Yes") : _("No")
        -# Based on (model)
        .form-group
          %label.control-label.col-md-2
            = _("Based On")
          - if @edit
            .col-md-10
              - if @alert.memberof.empty?
                = select_tag('miq_alert_db',
                  options_for_select(@edit[:dbs].invert.sort, @edit[:new][:db]),
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-miq_observe"     => observe)
              - else
                = ui_lookup(:model => @edit[:new][:db])
                &nbsp;&nbsp;&nbsp;
                = _('* Cannot be changed while this Alert belongs to an Alert Profile.')
          - else
            .col-md-10
              = h(ui_lookup(:model => @alert.db))
        -# Eval Method
        .form-group
          %label.control-label.col-md-2
            = _("What to Evaluate")
          - if @edit
            .col-md-10
              - if @edit[:expression_types].blank?
                = _('Expression (Custom)')
              - else
                - opts = @edit[:expression_types].invert.sort + [[_("Expression (Custom)"), nil]]
                = select_tag('exp_name',
                  options_for_select(opts, @edit[:new][:expression][:eval_method].to_s),
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-miq_observe"     => observe)
          - else
            .col-md-10
              - if @alert.expression.kind_of?(MiqExpression)
                -# Expression is an MiqExpression
                = _('Expression')
              - else
                = h(MiqAlert.expression_types(@alert.db)[@alert.expression[:eval_method]])

        -# Expression driving event
        - if @edit
          - unless @edit[:new][:expression][:eval_method] && @edit[:new][:expression][:eval_method] != "nothing"
            .form-group
              %label.control-label.col-md-2
                = _("Driving Event")
              .col-md-10
                - opts = [["<#{_('Choose')}>", nil], [_("Hourly Timer"), "_hourly_timer_"]] + @edit[:events].invert.sort
                = select_tag('exp_event',
                  options_for_select(opts, @edit[:new][:exp_event]),
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-miq_observe"     => observe)
        - else
          - if @alert.expression.kind_of?(MiqExpression) || @alert.expression[:eval_method] == "nothing"
            .form-group
              %label.control-label.col-md-2
                = _("Driving Event")
              .col-md-10
                = h(@event)
        -# Repeat Time
        .form-group
          %label.control-label.col-md-2
            = _("Notification Frequency")
          - if @edit
            .col-md-10
              - if @edit[:new][:expression][:eval_method] == "hourly_performance"
                = select_tag('repeat_time',
                  options_for_select(@sb[:alert][:hourly_repeat_times].invert.sort_by(&:last), @edit[:new][:repeat_time]),
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-miq_observe"     => observe)
              - else
                = select_tag('repeat_time',
                  options_for_select(@sb[:alert][:repeat_times].invert.sort_by(&:last), @edit[:new][:repeat_time]),
                  "data-miq_sparkle_on"  => true,
                  "data-miq_sparkle_off" => true,
                  "data-miq_observe"     => observe)
          - else
            .col-md-10
              - if @alert.options[:notifications][:delay_next_evaluation].blank?
                = _('10 Minutes')
              - else
                = h(@sb[:alert][:repeat_times][@alert.options[:notifications][:delay_next_evaluation]])
      %hr
      -# Expression
      - if @edit
        - if !@edit[:new][:expression][:eval_method]
          %h3
            = _('Expression (Choose an element of the expression to edit)')
          = render(:partial => 'layouts/exp_editor')
        - else
          - if @edit[:new][:expression][:eval_method] != "nothing"
            %h3
              = h(MiqAlert.expression_types(@edit[:new][:db])[@edit[:new][:expression][:eval_method]])
              = _('Parameters')
            .form-horizontal
              - @edit[:expression_options].each do |eo|
                = render :partial => "alert_builtin_exp", :locals  => {:option => eo}
        %hr
      - else
        - if @alert.expression.kind_of?(MiqExpression)
          %h3
            = _('Expression')
          - if !@expression_table.nil?
            - @expression_table.each do |token|
              - if ! ["AND", "OR", "(", ")"].include?([token].flatten.first)
                = h([token].flatten.first)
              - else
                %font{:color => "black"}
                  %b
                    = h([token].flatten.first)
          - else
            = _('An alert must contain a valid expression.')
          %hr
        - else
          - if @alert.expression[:eval_method] != "nothing"
            %h3
              = h(MiqAlert.expression_types(@alert.db)[@alert.expression[:eval_method]])
              = _('Parameters')
            .form-horizontal
              - MiqAlert.expression_options(@alert.expression[:eval_method]).each do |eo|
                = render :partial => "alert_builtin_exp", :locals  => {:option => eo}
            %hr

      - if @edit
        -# E-mail, SNMP, Timeline Event, Mgmt Event edit
        = render :partial => "layouts/edit_email", :locals  => {:action_url => "alert_field_changed", :record => @alert}
        = render :partial => "alert_snmp"
        = render :partial => "alert_evm_event"
        = render :partial => "alert_mgmt_event"
      - else
        -# E-mail, SNMP, Timeline Event, Mgmt Event show
        - if @alert.options && @alert.options[:notifications] && !@alert.options[:notifications][:email].blank?
          %h3
            = _('Send E-mail')
          .form-horizontal
            .form-group
              %label.control-label.col-md-2
                = _("From")
              .col-md-10
                - if @alert.options[:notifications][:email][:from].blank?
                  = _("(Default: %s)") % h(get_vmdb_config[:smtp][:from])
                - else
                  = h(@alert.options[:notifications][:email][:from])
            .form-group
              %label.control-label.col-md-2
                = _("To")
              .col-md-10
                - unless @email_to.blank?
                  = h(@email_to.join(';'))
          %hr
        - if @alert.options && @alert.options[:notifications] && !@alert.options[:notifications][:snmp].blank?
          %h3
            = _('Send SNMP Trap')
          %label.control-label.col-md-2
            .form-group
              %label.control-label.col-md-2
                = title_for_host
              .col-md-10
                - @alert.options[:notifications][:snmp][:host].each do |host|
                  = h(host)
                  %br
            .form-group
              %label.control-label.col-md-2
                = _("Version")
              .col-md-10
                = h(@alert.options[:notifications][:snmp][:snmp_version])
            - opts = @alert.options[:notifications][:snmp][:snmp_version].nil? ? _("Trap Number") : _("Trap Object ID")
            - trap_text = @alert.options[:notifications][:snmp][:snmp_version] == "v1" || opts

            .form-group
              %label.control-label.col-md-2
                = trap_text
              .col-md-10
                = h(@alert.options[:notifications][:snmp][:trap_id])
          - if @alert.options[:notifications][:snmp].key?(:variables)
            %br
            %table.table.table-striped.table-bordered.table-hover
              %thead
                %tr
                  %th= _('Variable Object ID')
                  %th= _('Type')
                  %th= _('Value')
              %tbody
                - @alert.options[:notifications][:snmp][:variables].each do |var|
                  - unless var[:oid].blank?
                    %tr
                      %td
                        = h(var[:oid])
                      %td
                        = h(var[:var_type])
                      %td
                        = h(var[:value])
          %hr
        - if @alert.options && @alert.options[:notifications] && @alert.options[:notifications][:evm_event]
          %h3
            = _('Timeline Event')
          .form-horizontal
            .form-group
              %label.control-label.col-md-2
                = _("Show on Timeline")
              .col-md-10
                = _('True')
          %hr
        - if @alert.options && @alert.options[:notifications] && !@alert.options[:notifications][:automate].blank?
          %h3
            = _('Send Management Event')
          .form-horizontal
            .form-group
              %label.control-label.col-md-2
                = _("Event Name")
              .col-md-10
                = h(@alert.options[:notifications][:automate][:event_name])
          %hr
      -# Alert Profiles alert is assigned to
      - unless @edit
        - if x_active_tree == :alert_tree
          %tr
            %td
              %h3= _('Belongs to Alert Profiles')
              - if @alert_profiles.empty?
                = render :partial => 'layouts/info_msg', :locals => {:message => _("This Alert is not assigned to any Alert Profiles.")}
              - else
                %table
                  %tbody
                    - @alert_profiles.each do |ap|
                      - id = "xx-#{@alert.db}_ap-#{to_cid(ap.id)}"
                      %tr{:title => _("View this Alert Profile"),
                          :onclick => remote_function(:url => "/miq_policy/x_show/#{id}?accord=alert_profile")}
                        %td
                          %img{:src => "/images/icons/new/miq_alert_profile.png"}
                        %td
                          = ap.description
      -# Show any owning actions
      - unless @edit
        - if x_active_tree == :alert_tree && !@alert.owning_miq_actions.empty?
          %tr
            %td
              %h3= _('Referenced by Actions')
              - if @alert.owning_miq_actions.empty?
                = render :partial => 'layouts/info_msg', :locals => {:message => _("This Alert is not referenced by any Actions.")}
              - else
                %table.table.table-striped.table-bordered.table-hover
                  %tbody
                    - @alert.owning_miq_actions.each do |oa|
                      - id = "a-#{to_cid(oa.id)}"
                      %tr{:title => _("View this Action"),
                        :onclick => remote_function(:url => "/miq_policy/x_show/#{id}?accord=action")}
                        %td.narrow
                          - if oa.action_type == "default"
                            %img{:src => "/images/icons/new/miq_action.png"}
                          - else
                            %img{:src => "/images/icons/new/miq_action_#{oa.action_type}.png"}
                        %td.narrow
                          = oa.description
              %hr
