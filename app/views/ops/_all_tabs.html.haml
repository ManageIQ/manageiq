#ops_tabs
  -# Settings
  - case x_active_tree
  - when :settings_tree
    - if selected?(x_node, "z")
      %ul.nav.nav-tabs
        = miq_tab_header("settings_evm_servers", @sb[:active_tab]) do
          = _("Zone")
        = miq_tab_header("settings_smartproxy_affinity", @sb[:active_tab]) do
          = _("SmartProxy Affinity")
      .tab-content
        = miq_tab_content("settings_smartproxy_affinity", @sb[:active_tab]) do
          = render :partial => "settings_smartproxy_affinity_tab"
        = miq_tab_content("settings_evm_servers", @sb[:active_tab]) do
          = render :partial => "settings_evm_servers_tab"
    - elsif selected?(x_node, "svr")
      - cur_svr_id = from_cid(x_node.split("-").last).to_i
      %ul.nav.nav-tabs
        = miq_tab_header("settings_server", @sb[:active_tab]) do
          = _("Server")
        = miq_tab_header("settings_authentication", @sb[:active_tab]) do
          = _("Authentication")
        = miq_tab_header("settings_workers", @sb[:active_tab]) do
          = _("Workers")
        - if cur_svr_id == my_server_id
          = miq_tab_header("settings_custom_logos", @sb[:active_tab]) do
            = _("Custom Logos")
          = miq_tab_header("settings_advanced", @sb[:active_tab]) do
            = _("Advanced")
      .tab-content
        = miq_tab_content("settings_server", @sb[:active_tab]) do
          = render :partial => "settings_server_tab"
        = miq_tab_content("settings_authentication", @sb[:active_tab]) do
          = render :partial => "settings_authentication_tab"
        = miq_tab_content("settings_workers", @sb[:active_tab]) do
          = render :partial => "settings_workers_tab"
        - if cur_svr_id == my_server_id
          = miq_tab_content("settings_custom_logos", @sb[:active_tab]) do
            = render :partial => "settings_custom_logos_tab"
          = miq_tab_content("settings_advanced", @sb[:active_tab]) do
            = render :partial => "settings_advanced_tab"
    - else
      - if selected_settings_tree?(x_node)
        .tab-content
          #settings_list
            = render :partial => "settings_list_tab"
      - else
        %ul.nav.nav-tabs
          = miq_tab_header("settings_details", @sb[:active_tab]) do
            = _("Details")
          = miq_tab_header("settings_cu_collection", @sb[:active_tab]) do
            = _("C & U Collection")
          = miq_tab_header("settings_co_categories", @sb[:active_tab]) do
            = escape_javascript(current_tenant.name)
            = _("Categories")
          = miq_tab_header("settings_co_tags", @sb[:active_tab]) do
            = escape_javascript(current_tenant.name)
            = _("Tags")
          = miq_tab_header("settings_import_tags", @sb[:active_tab]) do
            = _("Import Tags")
          = miq_tab_header("settings_import", @sb[:active_tab]) do
            = _("Import")
          = miq_tab_header("settings_rhn", @sb[:active_tab]) do
            = _("Red Hat Updates")
        .tab-content
          = miq_tab_content("settings_details", @sb[:active_tab]) do
            = render :partial => "settings_details_tab"
          = miq_tab_content("settings_cu_collection", @sb[:active_tab]) do
            = render :partial => "settings_cu_collection_tab"
          = miq_tab_content("settings_co_categories", @sb[:active_tab]) do
            = render :partial => "settings_co_categories_tab"
          = miq_tab_content("settings_co_tags", @sb[:active_tab]) do
            = render :partial => "settings_co_tags_tab"
          = miq_tab_content("settings_import_tags", @sb[:active_tab]) do
            = render :partial => "settings_import_tags_tab"
          = miq_tab_content("settings_import", @sb[:active_tab]) do
            = render :partial => "settings_import_tab"
          = miq_tab_content("settings_rhn", @sb[:active_tab]) do
            = render :partial => "settings_rhn_tab"
    -# Diagnostics
  - when :diagnostics_tree
    - if x_node.split("-")[0] == "z"
      %ul.nav.nav-tabs
        = miq_tab_header("diagnostics_roles_servers", @sb[:active_tab]) do
          = _("Roles by Servers")
        = miq_tab_header("diagnostics_servers_roles", @sb[:active_tab]) do
          = _("Servers by Roles")
        = miq_tab_header("diagnostics_server_list", @sb[:active_tab]) do
          = _("Servers")
        = miq_tab_header("diagnostics_collect_logs", @sb[:active_tab]) do
          = _("Collect Logs")
        = miq_tab_header("diagnostics_cu_repair", @sb[:active_tab]) do
          = _("C & U Gap Collection")
      .tab-content
        = miq_tab_content("diagnostics_roles_servers", @sb[:active_tab]) do
          = render :partial => "diagnostics_roles_servers_tab"
        = miq_tab_content("diagnostics_servers_roles", @sb[:active_tab]) do
          = render :partial => "diagnostics_servers_roles_tab"
        = miq_tab_content("diagnostics_server_list", @sb[:active_tab]) do
          = render :partial => "diagnostics_server_list_tab"
        = miq_tab_content("diagnostics_collect_logs", @sb[:active_tab]) do
          = render :partial => "diagnostics_collect_logs_tab"
        = miq_tab_content("diagnostics_cu_repair", @sb[:active_tab]) do
          = render :partial => "diagnostics_cu_repair_tab"
    - elsif x_node.split("-")[0] == "svr"
      %ul.nav.nav-tabs
        - if @sb[:selected_server_id] == my_server_id || @selected_server.started?
          = miq_tab_header("diagnostics_summary", @sb[:active_tab]) do
            = _("Summary")
          = miq_tab_header("diagnostics_workers", @sb[:active_tab]) do
            = _("Workers")
        = miq_tab_header("diagnostics_collect_logs", @sb[:active_tab]) do
          = _("Collect Logs")
        - if @sb[:selected_server_id] == my_server_id
          = miq_tab_header("diagnostics_evm_log", @sb[:active_tab]) do
            = _("CFME Log")
          = miq_tab_header("diagnostics_audit_log", @sb[:active_tab]) do
            = _("Audit Log")
          = miq_tab_header("diagnostics_production_log", @sb[:active_tab]) do
            = @sb[:rails_log]
            = _("Log")
        = miq_tab_header("diagnostics_utilization", @sb[:active_tab]) do
          = _("Utilization")
        = miq_tab_header("diagnostics_timelines", @sb[:active_tab]) do
          = _("Timelines")
      .tab-content
        - if @sb[:selected_server_id] == my_server_id || @selected_server.started?
          = miq_tab_content("diagnostics_summary", @sb[:active_tab]) do
            = render :partial => "diagnostics_summary_tab"
          = miq_tab_content("diagnostics_workers", @sb[:active_tab]) do
            = render :partial => "diagnostics_workers_tab"
        = miq_tab_content("diagnostics_collect_logs", @sb[:active_tab]) do
          = render :partial => "diagnostics_collect_logs_tab"
        - if @sb[:selected_server_id] == my_server_id
          = miq_tab_content("diagnostics_evm_log", @sb[:active_tab]) do
            = render :partial => "diagnostics_evm_log_tab"
          = miq_tab_content("diagnostics_audit_log", @sb[:active_tab]) do
            = render :partial => "diagnostics_audit_log_tab"
          = miq_tab_content("diagnostics_production_log", @sb[:active_tab]) do
            = render :partial => "diagnostics_production_log_tab"
        = miq_tab_content("diagnostics_utilization", @sb[:active_tab]) do
          = render :partial => "diagnostics_utilization_tab"
        = miq_tab_content("diagnostics_timelines", @sb[:active_tab]) do
          = render :partial => "diagnostics_timelines_tab"
    - else
      %ul.nav.nav-tabs
        = miq_tab_header("diagnostics_zones", @sb[:active_tab]) do
          = ui_lookup(:models => 'Zone')
        - if super_admin_user?
          = miq_tab_header("diagnostics_roles_servers", @sb[:active_tab]) do
            = _("Roles by Servers")
          = miq_tab_header("diagnostics_servers_roles", @sb[:active_tab]) do
            = _("Servers by Roles")
        = miq_tab_header("diagnostics_server_list", @sb[:active_tab]) do
          = _("Servers")
        - if !MiqEnterprise.is_enterprise? && super_admin_user?
          = miq_tab_header("diagnostics_replication", @sb[:active_tab]) do
            = _("Replication")
        - if super_admin_user?
          = miq_tab_header("diagnostics_database", @sb[:active_tab]) do
            = _("Database")
          = miq_tab_header("diagnostics_orphaned_data", @sb[:active_tab]) do
            = _("Orphaned Data")
      .tab-content
        = miq_tab_content("diagnostics_zones", @sb[:active_tab]) do
          = render :partial => "diagnostics_zones_tab"
        - if super_admin_user?
          = miq_tab_content("diagnostics_roles_servers", @sb[:active_tab]) do
            = render :partial => "diagnostics_roles_servers_tab"
          = miq_tab_content("diagnostics_servers_roles", @sb[:active_tab]) do
            = render :partial => "diagnostics_servers_roles_tab"
        = miq_tab_content("diagnostics_server_list", @sb[:active_tab]) do
          = render :partial => "diagnostics_server_list_tab"
        - if !MiqEnterprise.is_enterprise? && super_admin_user?
          = miq_tab_content("diagnostics_replication", @sb[:active_tab]) do
            = render :partial => "diagnostics_replication_tab"
        - if super_admin_user?
          = miq_tab_content("diagnostics_database", @sb[:active_tab]) do
            - if @sb[:active_tab] == "diagnostics_database"
              = render :partial => "diagnostics_database_tab"
          = miq_tab_content("diagnostics_orphaned_data", @sb[:active_tab]) do
            = render :partial => "diagnostics_orphaned_data_tab"
  - when :rbac_tree
    %ul.nav.nav-tabs
      = miq_tab_header("rbac_details", "rbac_details") do
        = @sb[:tab_label]
    .tab-content
      = miq_tab_content("rbac_details", "rbac_details") do
        = render :partial => "rbac_details_tab"
  - when :vmdb_tree
    %ul.nav.nav-tabs
      - tree_node = x_node
      - if tree_node == "root"
        = miq_tab_header("db_summary", @sb[:active_tab]) do
          = _("Summary")
      - if tree_node == "root" || tree_node.split("-").first == TreeBuilder.get_prefix_for_model("VmdbTable")
        = miq_tab_header("db_details", @sb[:active_tab]) do
          = @tab_text
      - if tree_node == "root"
        = miq_tab_header("db_indexes", @sb[:active_tab]) do
          = _("Indexes")
        = miq_tab_header("db_settings", @sb[:active_tab]) do
          = _("Settings")
        = miq_tab_header("db_connections", @sb[:active_tab]) do
          = _("Client Connections")
      - if tree_node == "root" || tree_node.split("-").first == TreeBuilder.get_prefix_for_model("VmdbTable")
        = miq_tab_header("db_utilization", @sb[:active_tab]) do
          = _("Utilization")
    .tab-content
      - if tree_node == "root"
        = miq_tab_content("db_summary", @sb[:active_tab]) do
          - if @sb[:active_tab] == "db_summary"
            = render :partial => "db_summary"
      = miq_tab_content("db_details", "db_details") do
        - if @sb[:active_tab] == "db_details" || (@sb[:active_tab] == "db_indexes" && (@vmdb_index) || @indexes)
          = render :partial => "db_details_tab"
      - if tree_node == "root"
        = miq_tab_content("db_indexes", @sb[:active_tab]) do
          - if @sb[:active_tab] == "db_indexes"
            = render :partial => "db_details_tab"
        = miq_tab_content("db_settings", @sb[:active_tab]) do
          - if @sb[:active_tab] == "db_settings"
            = render :partial => "db_details_tab"
        = miq_tab_content("db_connections", @sb[:active_tab]) do
          - if @sb[:active_tab] == "db_connections"
            = render :partial => "db_details_tab"
      - if tree_node == "root" || tree_node.split("-").first == TreeBuilder.get_prefix_for_model("VmdbTable")
        = miq_tab_content("db_utilization", @sb[:active_tab]) do
          - if @sb[:active_tab] == "db_utilization"
            = render(:partial => "layouts/performance")
  - when :analytics_tree
    - if get_vmdb_config[:product][:analytics]
      %ul.nav.nav-tabs
        = miq_tab_header("analytics_details", @sb[:active_tab]) do
          = _("Analytics Report")
      .tab-content
        = miq_tab_content("analytics_details", @sb[:active_tab]) do
          = render :partial => "analytics_details_tab"
:javascript
  miq_tabs_init("#ops_tabs", "/ops/change_tab");
