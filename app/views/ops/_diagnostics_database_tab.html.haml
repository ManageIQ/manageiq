- @angular_form = true

%form#form_div.form-horizontal{:name                                  => "angularForm",
                              'ng-controller'                         => "diagnosticsDatabaseFormController",
                              'ng-show'                               => "afterGet",
                              'data-db-backup-form-field-changed-url' => "/#{controller_name}/db_backup_form_field_changed/",
                              'data-submit-url'                       => "/#{controller_name}/db_backup/"}
  - if @sb[:active_tab] == "diagnostics_database"
    %h3
      = _("Basic Info")
  .form-group
    %label.col-md-2.control-label
      = _("Type")
    .col-md-8
      %p.form-control-static
        = h(@database[:display_name])
  .form-group
    %label.col-md-2.control-label
      = _("Hostname")
    .col-md-8
      %p.form-control-static
        = h(@database[:host])
  .form-group
    %label.col-md-2.control-label
      = _("Database Name")
    .col-md-8
      %p.form-control-static
        = h(@database[:database])
  .form-group
    %label.col-md-2.control-label
      = _("Username")
    .col-md-8
      %p.form-control-static
        = h(@database[:username])

  - if DatabaseBackup.backup_supported?
    %hr/
    %h3
      = _("Run a Database Backup Now")
    %fieldset
      - if @sb[:active_tab] == "diagnostics_database"
        -# created div with different name so database validation flash message can be shown in it's own box
        = render :partial => "layouts/flash_msg"
      %h3
        = _("Backup Schedules")
      .form-group
        %label.col-md-2.control-label
          = _("Fetch settings from a schedule")
        .col-md-8
          - if @backup_schedules.length < 1
            %p.form-control-static
              = _("No Backup Schedules are defined")
          - else
            - default_option = [_("<Choose>"), nil]
            - schedules_ary = Array(@backup_schedules.invert)
            - schedules_ary.sort_by! { |name, _id| name }
            - options = options_for_select([default_option] + schedules_ary)

            = select_tag('backup_schedule_type',
                         options,
                         "ng-model"                    => "diagnosticsDatabaseModel.backup_schedule_type",
                         "ng-change"                   => "backupScheduleTypeChanged()",
                         "checkchange"                 => "",
                         "selectpicker-for-select-tag" => "")


      %h3
        = _("Database Backup Settings")
      .form-group
        %label.col-md-2.control-label
          = _("Type")
        .col-md-8
          - default_option = [_("<No Depot>"), nil]
          = select_tag('log_protocol', options_for_select([default_option] + @database_backup_options_for_select),
                      "ng-model"                       => "diagnosticsDatabaseModel.log_protocol",
                      "ng-change"                      => "logProtocolChanged(diagnosticsDatabaseModel)",
                      "ng-required"                    => "logProtocolNotSelected(diagnosticsDatabaseModel)",
                      "checkchange"                    => "",
                      "selectpicker-for-select-tag"    => "")
      = render :partial => "layouts/angular-bootstrap/edit_log_depot_settings_angular_bootstrap",
                     :locals  => {:ng_show             => "logProtocolSelected()",
                                  :ng_reqd_depot_name  => true,
                                  :ng_model_depot_name => "diagnosticsDatabaseModel.depot_name",
                                  :ng_reqd_uri         => true,
                                  :ng_model_uri        => "diagnosticsDatabaseModel.uri",
                                  :ng_model_uri_prefix => "diagnosticsDatabaseModel.uri_prefix",
                                  :uri_prefix_display  =>  "{{diagnosticsDatabaseModel.uri_prefix}}://"}
      = render :partial => "layouts/angular-bootstrap/auth_credentials_angular_bootstrap",
                     :locals  => {:ng_show           => "sambaBackup()",
                                  :ng_model          => "diagnosticsDatabaseModel",
                                  :ng_reqd_userid    => "sambaRequired(diagnosticsDatabaseModel.log_userid)",
                                  :ng_reqd_password  => "sambaRequired(diagnosticsDatabaseModel.log_password)",
                                  :ng_reqd_verify    => "sambaRequired(diagnosticsDatabaseModel.log_verify)",
                                  :validate_url      => "log_depot_validate",
                                  :id                => nil,
                                  :valtype           => "log",
                                  :basic_info_needed => true}
      %input{:type => "hidden", :value => "db_backup", :name => "action_typ"}
    %table{:width => "100%"}
      %tr
        %td{:align => "right"}
          = render :partial => "layouts/angular/form_button_submit_angular",
                   :locals  => {:confirm => _("Are you sure you want to Run a Database Backup Now?")}


    - if DatabaseBackup.gc_supported?
      %hr/
      %h3
        = _("Run Database Garbage Collection Now")
      .form-group
        .col-md-8
          = _("Press submit to start the Database Vacuum process")
      %table{:width => "100%"}
        %tr
          %td{:align => "right"}
            #gc_submit_on
              - caption = _("Run Database Garbage Collection Now")
              - submit = button_tag(_("Submit"), :class => "btn btn-primary", :alt => caption)

              = link_to(submit, {:action => 'db_gc_collection'},
                "data-miq_sparkle_on" => true,
                :confirm              => _("Are you sure you want to Run Database Garbage Collection Now?"),
                :remote               => true,
                'data-method'         => :post,
                :title                => caption)

:javascript
  angular.bootstrap(jQuery('#form_div'), ['ManageIQ'], { strictDi: true });
