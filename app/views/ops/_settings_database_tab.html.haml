- change_stored_password ||= _("Change stored password")
- cancel_password_change ||= _("Cancel password change")
- stored_password_placeholder = "●●●●●●●●"
- pfx ||= "production"
- username = ""

- if @sb[:active_tab] == "settings_database"
  - url = url_for(:action => 'settings_form_field_changed', :id => "#{@sb[:active_tab].split('_').last}")
  = render :partial => "layouts/flash_msg"
  .alert.alert-danger
    %span.pficon-layered
      %span.pficon.pficon-error-octagon
      %span.pficon.pficon-error-exclamation
    %strong
      = _("Caution: Changing the Database settings could make the Server unstartable!")
  %h3
    = _("Database")
  .form-horizontal
    .form-group
      %label.col-md-2.control-label
        = _("Type")
      .col-md-8
        = select_tag('production_dbtype',
                      options_for_select(MiqDbConfig.get_db_types.invert.sort, @edit[:new][:name]),
                      "data-miq_focus"   => true,
                      :class    => "selectpicker")
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent('production_dbtype', "#{url}")
    - @options.each do |option|
      .form-group
        %label.col-md-2.control-label= option[:description]
        - if option[:name].to_s == "password"
          .col-md-8
            = password_field_tag("production_#{option[:name]}",
                                  username.blank? ? "" : stored_password_placeholder,
                                  :maxlength         => 50,
                                  :class => "form-control",
                                  :placeholder1       => placeholder_if_present(@edit[:new][option[:name]]),
                                  :class => "form-control",
                                  :disabled => username.blank? ? false : true,
                                  "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
          - unless username.blank?
            %div
              %a{:id => "#{pfx}_change_stored_password", "style" => "display:block;cursor: pointer; cursor: hand;", "onclick" => "changeStoredPassword('#{pfx}', '#{url}')"}
                = change_stored_password
              %a{:id => "#{pfx}_cancel_password_change", "style" => "display:none;cursor: pointer; cursor: hand;", "onclick" => "cancelPasswordChange('#{pfx}', '#{url}')"}
                = cancel_password_change
        - else
          .col-md-8
            = text_field_tag("production_#{option[:name]}",
                              h(@edit[:new][option[:name]]),
                              :maxlength         => 50,
                              :class => "form-control",
                              "data-miq_observe" => {:interval => '.5',
                              :url      => url}.to_json)
            - username = @edit[:new][option[:name]]
      - if option[:name].to_s == "password"
        .form-group{:id => "#{pfx}_verify_group", :style => username.blank? ? "display:block" : "display:none"}
          %label.col-md-2.control-label
            = _("Confirm Password")
          .col-md-8
            = password_field_tag("production_verify", '',
                                  :maxlength         => 50,
                                  :placeholder       => placeholder_if_present(@edit[:new][option[:verify]]),
                                  :class => "form-control",
                                  "data-miq_observe" => {:interval => '.5',
                                  :url      => url}.to_json)
    .form-group
      %label.col-md-6
      .col-md-4
        #validate_button_on{:style => "display:#{@edit[:new][:password] == @edit[:new][:verify] ? "display" : "none"};"}
          = button_tag(_("Validate"),
                      :class   => "btn btn-primary btn-xs pull-right",
                      :alt     => _("Validate Database Configuration"),
                      :title   => _("Validate Database Configuration"),
                      :onclick => "miqAjaxButton('#{url_for(:action => "settings_update",
                      :id     => @sb[:active_tab].split('_').last,
                      :button => "db_verify")}');")
        #validate_button_off{:style => "display:#{@edit[:new][:password] != @edit[:new][:verify] ? "display" : "none"};"}
          = button_tag(_("Validate"),
                      :class => "btn btn-primary btn-disabled btn-xs pull-right",
                      :alt   => _("Password fields must match to Validate Database Configuration"),
                      :title => _("Password fields must match to Validate Database Configuration"))
  %div{:style => "padding-bottom:20px;"}
